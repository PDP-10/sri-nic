
;COMPARISON OF PS:<C.LIB.USYS>LSEEK.C.32 AND PS:<C.LIB.USYS>LSEEK.JMR.2
;OPTIONS ARE    /3

**** FILE PS:<C.LIB.USYS>LSEEK.C.32, 1-1 (0)
/*
**** FILE PS:<C.LIB.USYS>LSEEK.JMR.2, 1-1 (0)
/* SS:<KCC-5.LIB.USYS>LSEEK.C.33 19-Sep-88 15:51:44, Edit by JAN-RYNNING
 * _nfbsz correct file length for 10X+T20 instead of SIZEF%
 *
***************

**** FILE PS:<C.LIB.USYS>LSEEK.C.32, 1-7 (148)
 * Note: SIZEF% call needs to be fixed so that file bytesize and FD bytesize
 * are taken into account -- they may be different.  e.g. file size 36,
 * FD size 9.
**** FILE PS:<C.LIB.USYS>LSEEK.JMR.2, 1-9 (283)
***************

**** FILE PS:<C.LIB.USYS>LSEEK.C.32, 1-30 (632)
    int arg_block[5];
**** FILE PS:<C.LIB.USYS>LSEEK.JMR.2, 1-29 (601)
    int arg_block[5], fdb[2];
    extern int _nfbsz();
***************

**** FILE PS:<C.LIB.USYS>LSEEK.C.32, 1-49 (1050)
	    if (!jsys(SIZEF, arg_block))
		USYS_RETERR(EBADF);
	    arg_block[2] += offset;	/* # bytes in file returned in AC2 */
**** FILE PS:<C.LIB.USYS>LSEEK.JMR.2, 1-49 (1053)
	    arg_block[2] = (2<<18) | _FBBYV;
	    arg_block[3] = (int) fdb;
	    if (!jsys(GTFDB, arg_block))
		USYS_RETERR(EBADF);
	    arg_block[2] = _nfbsz(_uiobsize[ufx], (fdb[0]>>24)&077, fdb[1]);
	    if (arg_block[2] < _uiopos[ufx])	/* If our len info is better */
		arg_block[2] = _uiopos[ufx];	/* update it! */
	    arg_block[2] += offset;
***************

