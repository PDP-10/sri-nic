12-Feb-87 18:03:34-PST,1776;000000000001
Return-Path: <@SRI-KL.ARPA:BEEBE@UTAH-SCIENCE.ARPA>
Received: from SRI-KL.ARPA by SRI-NIC.ARPA with TCP; Thu 12 Feb 87 18:03:19-PST
Received: from UTAH-SCIENCE.ARPA by SRI-KL.ARPA with TCP; Thu 12 Feb 87 16:42:55-PST
Date: Thu 12 Feb 87 17:28:40-MST
From: "Nelson H.F. Beebe" <Beebe@UTAH-SCIENCE.ARPA>
Subject: Floating-point fixup handler
To: klh@SRI-KL.ARPA
cc: BEEBE@UTAH-SCIENCE.ARPA
X-US-Mail: "Center for Scientific Computation, South Physics, University of Utah, Salt Lake City, UT 84112"
X-Telephone: (801) 581-5254
Message-ID: <12278568035.16.BEEBE@UTAH-SCIENCE.ARPA>

Three   possibilities   suggest   themselves   for   a   KCC
floating-point fixup handler.   The first  is Ralph  Gorin's
book on  TOPS-20, and  the sources  are probably  online  at
SCORE  or  LOTS.   The  second  is  Chuck  Hedricks   Pascal
compiler, for which we all have sources; routine SETARITH in
the Pascal runtime library is a good place to start looking.
The third source is FOROxx.EXE, the FORTRAN run-time system,
for which I have sources, having been a field test site  for
versions 6,  7, and  10.   This source  of course  would  be
"stealing".

The job needs to be done carefully, including having support
for G-floating (we have users who would really like to  call
FORTRAN math  library  code  from  C; it  was  the  lack  of
floating-point fault handling in PCC-20 which prevented this
from ever working successfully).

It  would  be  interesting  to  use  the  fixup  handler  to
implement gradual underflow, a la IEEE arithmetic.  It would
be possible, though  not uniformly so,  to fake an  infinity
and a  Nan  too;  unfortunately, the  -20  has  no  reserved
operand floating-point  pattern  to do  this  with  complete
success.
-------
