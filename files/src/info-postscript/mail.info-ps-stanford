15-Nov-85 17:32:07-PST,629;000000000001
Return-Path: <primerd!bobsun!bob@mit-eddie.MIT.EDU>
Received: from mit-eddie by SU-SCORE.ARPA with TCP; Fri 15 Nov 85 17:31:36-PST
Received: by mit-eddie (4.12/4.7)
	id AA24405; Fri, 15 Nov 85 20:28:39 est
Received: from bobsun.primerd.uucp by primerd.uucp (2.0/SMI-2.0)
	id AA03342; Fri, 15 Nov 85 19:27:55 est
Return-Path: <bob@bobsun>
Received: by bobsun.primerd.uucp (2.0/SMI-2.0)
	id AA27054; Fri, 15 Nov 85 19:18:33 est
Date: Fri, 15 Nov 85 19:18:33 est
From: primerd!bobsun!bob@mit-eddie.MIT.EDU (Bob Pellegrino)
Message-Id: <8511160018.AA27054@bobsun.primerd.uucp>
To: info-postscript@su-score.arpa

hi,

17-Nov-85 03:23:16-PST,664;000000000001
Return-Path: <unc!brock%unc.csnet@CSNET-RELAY.ARPA>
Received: from CSNET-RELAY.ARPA by SU-SCORE.ARPA with TCP; Sun 17 Nov 85 03:23:05-PST
Received: from unc by csnet-relay.csnet id as10976; 17 Nov 85 6:17 EST
Received: from unc by thorin (4.12/4.7)
	id AA10529; Sat, 16 Nov 85 18:59:52 est
Received: by unc (4.12/4.7)
	id AA11525; Sat, 16 Nov 85 19:00:12 est
Date: Sat, 16 Nov 85 19:00:12 est
From: "J. Dean Brock" <unc!brock%unc.csnet@CSNET-RELAY.ARPA>
Message-Id: <8511170000.AA11525@unc>
To: info-postscript@su-score.arpa
Subject: Request
Cc: brock@unc.CSNET

Could you add
	post-postscript@unc
(on the csnet) to the postscript mailing list.

19-Nov-85 07:59:46-PST,652;000000000001
Return-Path: <cak@Purdue.EDU>
Received: from merlin.Purdue.EDU by SU-SCORE.ARPA with TCP; Tue 19 Nov 85 07:59:30-PST
Message-Id: <8511191559.AA20586@merlin.Purdue.EDU>
Received: by merlin.Purdue.EDU; Tue, 19 Nov 85 10:59:12 EST
To: info-postscript@su-score.arpa
Subject: Two-up troff?
National-Indulgence-Of-The-Day: Baklava
Date: 19 Nov 85 10:59:08 EST (Tue)
From: "Christopher A. Kent" <cak@Purdue.EDU>

Has anyone out there thought about hacking up a ditroff translator that
prints two-up rotated output (like enscript -2r)? I'd like this a lot;
there are times when using nroff | enscript isn't quite nice enough.

chris
----------
20-Nov-85 05:41:40-PST,4350;000000000001
Return-Path: <cak@Purdue.EDU>
Received: from merlin.Purdue.EDU by SU-SCORE.ARPA with TCP; Wed 20 Nov 85 05:41:21-PST
Message-Id: <8511201341.AA00443@merlin.Purdue.EDU>
Received: by merlin.Purdue.EDU; Wed, 20 Nov 85 08:41:10 EST
To: info-postscript@su-score.arpa
Subject: failed mail (lots of it!)
National-Indulgence-Of-The-Day: Baklava
Date: 20 Nov 85 08:41:05 EST (Wed)
From: "Christopher A. Kent" <cak@Purdue.EDU>

Could you check these out, and perhaps arrange the list so that *you*
get these messages?

chris

--------------------
From: enea!erix!erisun!MAILER-DAEMON@seismo.CSS.GOV (Mail Delivery Subsystem)
Subject: Returned mail: User unknown
To: cak@Purdue.EDU
Date: 19 Nov 85 10:59:08 EST (Tue)

   ----- Transcript of session follows -----
550 info-postscript... User unknown

   ----- Unsent message follows -----
Received: by erisun.uucp (2.0/3.14)
	id AA16325; Tue, 19 Nov 85 20:35:03 -0100
Received: by erix.UUCP (4.40/4.7)
	id AA29385; Tue, 19 Nov 85 20:34:13 -0100
Received: by enea.UUCP; Tue, 19 Nov 85 20:19:26 -0100 (MET)
Received: from SU-SCORE.ARPA by seismo.CSS.GOV with SMTP; Tue, 19 Nov 85 11:02:03 EST
Received: from merlin.Purdue.EDU by SU-SCORE.ARPA with TCP; Tue 19 Nov 85 07:59:30-PST
Message-Id: <8511191559.AA20586@merlin.Purdue.EDU>
Received: by merlin.Purdue.EDU; Tue, 19 Nov 85 10:59:12 EST
To: info-postscript@su-score.arpa
Subject: Two-up troff?
National-Indulgence-Of-The-Day: Baklava
Date: 19 Nov 85 10:59:08 EST (Tue)
From: "Christopher A. Kent" <erix!enea!seismo!Purdue.EDU!cak>

Has anyone out there thought about hacking up a ditroff translator that
prints two-up rotated output (like enscript -2r)? I'd like this a lot;
there are times when using nroff | enscript isn't quite nice enough.

chris
----------
From: Mail Delivery Subsystem <gatech!MAILER-DAEMON@seismo.CSS.GOV>
Subject: Returned mail: Host unknown
To: seismo!cak@Purdue.EDU@seismo.CSS.GOV
Date: 19 Nov 85 10:59:08 EST (Tue)
Posted-Date: 19 Nov 85 10:59:08 EST (Tue)

   ----- Transcript of session follows -----
Mailer at "gatech": Unable to find path to any host in pathname.
550 pwd!pwd... Host unknown

   ----- Unsent message follows -----
Received: from seismo by gatech.GTNET with UUCP (4.14.GT/6.0.GT)
	id AA26284; Tue, 19 Nov 85 14:43:53 est
Posted-Date: 19 Nov 85 10:59:08 EST (Tue)
Received-Date: Tue, 19 Nov 85 14:43:53 est
Received: from SU-SCORE.ARPA by seismo.CSS.GOV with SMTP; Tue, 19 Nov 85 11:02:03 EST
Received: from merlin.Purdue.EDU by SU-SCORE.ARPA with TCP; Tue 19 Nov 85 07:59:30-PST
Message-Id: <8511191559.AA20586@merlin.Purdue.EDU>
Received: by merlin.Purdue.EDU; Tue, 19 Nov 85 10:59:12 EST
To: info-postscript@su-score.arpa.UUCP
Subject: Two-up troff?
National-Indulgence-Of-The-Day: Baklava
Date: 19 Nov 85 10:59:08 EST (Tue)
From: "Christopher A. Kent" <seismo!Purdue.EDU!cak>

Has anyone out there thought about hacking up a ditroff translator that
prints two-up rotated output (like enscript -2r)? I'd like this a lot;
there are times when using nroff | enscript isn't quite nice enough.

chris
----------
From: bdmrrr!potomac!MAILER-DAEMON@seismo.CSS.GOV (Mail Delivery Subsystem)
Subject: Returned mail: User unknown
To: bdmrrr!seismo!cak%Purdue.EDU@seismo.CSS.GOV
Date: 19 Nov 85 10:59:08 EST (Tue)

   ----- Transcript of session follows -----
550 info-postscript... User unknown

   ----- Unsent message follows -----
Received: by potomac.uucp (4.24/3.14)
	id AA00362; Tue, 19 Nov 85 12:16:20 est
Received: by bdmrrr.uucp (2.0/SMI-2.0)
	id AA01048; Tue, 19 Nov 85 11:46:47 est
Received: from SU-SCORE.ARPA by seismo.CSS.GOV with SMTP; Tue, 19 Nov 85 11:02:03 EST
Received: from merlin.Purdue.EDU by SU-SCORE.ARPA with TCP; Tue 19 Nov 85 07:59:30-PST
Message-Id: <8511191559.AA20586@merlin.Purdue.EDU>
Received: by merlin.Purdue.EDU; Tue, 19 Nov 85 10:59:12 EST
To: info-postscript%su-score.arpa
Subject: Two-up troff?
National-Indulgence-Of-The-Day: Baklava
Date: 19 Nov 85 10:59:08 EST (Tue)
From: "Christopher A. Kent" <bdmrrr!seismo!Purdue.EDU!cak>

Has anyone out there thought about hacking up a ditroff translator that
prints two-up rotated output (like enscript -2r)? I'd like this a lot;
there are times when using nroff | enscript isn't quite nice enough.

chris
----------

----------
20-Nov-85 06:32:27-PST,1051;000000000001
Return-Path: <cak@Purdue.EDU>
Received: from merlin.Purdue.EDU by SU-SCORE.ARPA with TCP; Wed 20 Nov 85 06:32:08-PST
Message-Id: <8511201431.AA01596@merlin.Purdue.EDU>
Received: by merlin.Purdue.EDU; Wed, 20 Nov 85 09:31:26 EST
To: mccrudden%cipher.DEC@decwrl.DEC.COM (Steve  MKO1-2/J07  264-7635)
Cc: info-postscript@su-score.arpa
Subject: Re: junk mail
In-Reply-To: Your message of 20-Nov-1985 0858.
	     <8511201355.AA16116@decwrl.DEC.COM>
Date: 20 Nov 85 09:31:22 EST (Wed)
From: "Christopher A. Kent" <cak@Purdue.EDU>

	From: mccrudden%cipher.DEC@decwrl.DEC.COM  (Steve  MKO1-2/J07  264-7635)
	Subject: junk mail
	To: cak@Purdue.EDU, mccrudden%cipher.DEC@decwrl.DEC.COM
	Date: 20-Nov-1985 0858

	forward your problem to info-postscript-request, not to info postscript.

	info-postscript is just a mailing list!

	/swm

My apologies to all -- that's what I intended to do, and in my
sleepiness this morning, I forgot the -request. (Jeez, how embarrassing!)

Mea culpa, mea culpa, mea maxima culpa,
chris

----------
20-Nov-85 09:39:16-PST,477;000000000001
Mail-From: REULING created at 20-Nov-85 09:38:59
Date: Wed 20 Nov 85 09:38:59-PST
From: John Reuling <Reuling@SU-SCORE.ARPA>
Subject: INFO-POSTSCRIPT-STANFORD doesn't change
To: info-ps-stanford@SU-SCORE.ARPA
Stanford: 206 Margaret Jacks Hall, +1 (415) 497-3549
Message-ID: <12160790798.23.REULING@SU-SCORE.ARPA>


The addresses INFO-POSTSCRIPT-STANFORD and INFO-PS-STANFORD
have not changed.  That is, they are still automatic rebroadcast
lists.

-John
-------
26-Mar-86 11:18:30-PST,1061;000000000001
Mail-From: BARCKLAY created at 26-Mar-86 11:16:55
Return-Path: <tony@ATHENA.MIT.EDU>
Received: from ATHENA by SU-SCORE.ARPA with TCP; Tue 25 Mar 86 15:30:58-PST
Received: by ATHENA (5.45/4.7)
	id AA21424; Tue, 25 Mar 86 17:40:57 EST
Received: by ORPHEUS (5.15/4.7)
	id AA19048; Tue, 25 Mar 86 17:41:59 EST
Message-Id: <8603252241.AA19048@ORPHEUS>
To: info-postscript@su-score.arpa
Subject: Data compression...
Date: Tue, 25 Mar 86 17:41:54 -0500
From: Tony Della Fera <tony@ATHENA.MIT.EDU>
ReSent-Date: Wed 26 Mar 86 11:16:55-PST
ReSent-From: Bob Barcklay <BARCKLAY@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12193838769.24.BARCKLAY@SU-SCORE.ARPA>


	Has   anyone   done  any  work  in  PostScript  involving  the
compression of raster image data (color or B&W) with an algorithm like
say, the Lempel-Ziv algorithm (IEEE Computer Vol 17, No 6, June 1984)?
I want to decompress  raster  image  data  inside  the  printer  (with
PostScript) after compressing it as it is read out of a frame buffer.


						Tony...
26-Mar-86 21:25:46-PST,1073;000000000001
Mail-From: BARCKLAY created at 26-Mar-86 21:25:26
Return-Path: <tony@ATHENA.MIT.EDU>
Received: from ATHENA by SU-SCORE.ARPA with TCP; Wed 26 Mar 86 08:49:40-PST
Received: by ATHENA (5.45/4.7)
	id AA25768; Wed, 26 Mar 86 11:48:01 EST
Received: by ORPHEUS (5.15/4.7)
	id AA28802; Wed, 26 Mar 86 11:49:05 EST
Message-Id: <8603261649.AA28802@ORPHEUS>
To: info-postscript@su-score.arpa
Subject: 4.3 BSD lpr bug and TranScript...
Date: Wed, 26 Mar 86 11:49:03 -0500
From: Tony Della Fera <tony@ATHENA.MIT.EDU>
ReSent-Date: Wed 26 Mar 86 21:25:26-PST
ReSent-From: Bob Barcklay <BARCKLAY@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12193949546.18.BARCKLAY@SU-SCORE.ARPA>


	Incase anyone else has wasted any time on this:

	There  is  bug  in  the 4.3 BSD lpr/lpd software that prevents
TranScript from doing proper printer logging.  This problem  is  fixed
by  one of the more recent 4.3 patches from Berkeley.   If you install
the Berkeley patches in /usr/src/usr.lib/lpr  everything  should  work
properly.

						Tony...
						
31-Mar-86 09:53:10-PST,2831;000000000001
Mail-From: REULING created at 31-Mar-86 09:51:51
Return-Path: <GFOSTER@USC-ISI.ARPA>
Received: from USC-ISI.ARPA by SU-SCORE.ARPA with TCP; Sat 29 Mar 86 14:30:30-PST
Date: 29 Mar 1986 17:26:26 EST
Subject: PS program to see glyph widths
From: Glen Foster <GFoster@USC-ISI.ARPA>
To: info-postscript@SU-SCORE.ARPA
ReSent-Date: Mon 31 Mar 86 09:51:49-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12195133999.13.REULING@SU-SCORE.ARPA>


The following is a PS program, kindly provided by Ann Robinson of Adobe,
that prints all encoded members of a font.  She says that she will be 
providing a similar program that also shows un-encoded members.  I haven't
had a chance to run it yet so I don't know about format etc.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

/Fontname (Times-Roman) def               % change this to get other fonts
/in {72 mul} def
/y 10 in def
/lm .9 in def
/ptsize 10 def                                       % size to print in
/cr {/y y ptsize sub def                             % move down column -- at 
     y 1 in le {/y 10 in def /lm lm 1.8 in add def} if  % bottom, go to next 
     lm y moveto
    } def                                            % column

/showwidth
   {dup cvn findfont                                 % get font dictionary 
    dup /fn exch def                                 % save in /fn
    1 scalefont /sfn exch def                     % get size X 1000
    /pfn fn ptsize scalefont def                     % scale for printing
    fn /Encoding get /enc exch def                   % get encoding vector
    /schar 4 string def                              % string for character
    /ssize 5 string def                              % string for size
    /tab1 {lm .3 in add y moveto} def
    /tab2 {lm .6 in add y moveto} def
    pfn setfont 
    gsave 3.5 in 10.4 in moveto
     2 2 scale show grestore               % print name at 2 x print size
    lm y moveto                                      % top of page
    32 1 255                                         % go thru all ascii chars
        {/i exch def sfn setfont enc i get           % get encoding
               /.notdef ne                         % dont print if undefined
                {( ) dup 0 i put                   % put ascii val into string
                  dup stringwidth pop              % save copy and get width
                  1000.0 mul cvi ssize cvs            % put width in string
                  pfn setfont
                  i schar cvs show                      % show ascii value
                  tab1 exch show tab2 show             % show char and width
                  cr} 
                 if } for
      showpage} def

Fontname showwidth

-------
 5-Apr-86 13:21:28-PST,4183;000000000001
Mail-From: BARCKLAY created at  5-Apr-86 13:20:56
Return-Path: <adobe!taft@decwrl.DEC.COM>
Received: from decwrl.DEC.COM by SU-SCORE.ARPA with TCP; Fri 4 Apr 86 18:19:19-PST
Received: by decwrl.DEC.COM (4.22.03/4.7.34)
	id AA28576; Fri, 4 Apr 86 14:46:43 pst
Received: by adobe.UUCP (4.12/4.7)
	id AA04891; Fri, 4 Apr 86 14:42:59 pst
From: adobe!taft@decwrl.DEC.COM (Ed Taft)
Message-Id: <8604042242.AA04891@adobe.UUCP>
Date:  4 Apr 1986 1442-PST (Friday)
To: Info-PostScript@SU-Score.ARPA
Cc: taft@decwrl.DEC.COM
Subject: improved LaserWriter serial I/O patch
ReSent-Date: Sat 5 Apr 86 13:20:56-PST
ReSent-From: Bob Barcklay <BARCKLAY@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12196482786.8.BARCKLAY@SU-SCORE.ARPA>

Several months ago, I circulated a downloadable program that corrects
several known problems in the LaserWriter's serial I/O handler.
Unfortunately, the patch did not completely fix one of the problems.
This message contains a revised patch that works better.

The problems corrected by the patch are:

  - occasional failure to send a needed XON after XOFF;
  - erroneously reading past end-of-file under some circumstances;
  - lost or garbled characters in serial output to the host.

The patch applies only to the original LaserWriter (PostScript version
23.0) and not to any other PostScript printer; it affects serial
communication only (not AppleTalk). To install the patch, first edit
the program if necessary to change the system administrator password;
then send it as a separate job to the printer. Once installed, the
patch persists until the printer is next turned off.

	Ed Taft
	Adobe Systems, Inc.

---------- cut here ----------
%! 
0000000000			% the exitserver password

version (23.0) ne
   {(Patch not installed -- wrong printer type or version) = stop} if
statusdict /Patch1Installed known
   {(Patch already installed -- not installed again) = stop} if
serverdict begin exitserver
statusdict /Patch1Installed true put
currentfile eexec
c3c703843e75cc772962e3a7fadee742bb1258167ac7020cbc1cdfd379c35f53
da38afaed75c86541fde979ff594180fe542991f2199c8614247e4a1e3e5ecff
8bc3844d36e2d091e9f649518473592b44be262c7a2929ac4a9acd626bd3c441
e2aae320e60b2c21e02bc9c4f3cde0d5eca674f5b0bbff3ee860a7cd2e4e9f7b
9eed9b1286e5a9b9b0fdf8e73951152837a16a6913e477cc8a4f3cebbf2e78e8
fe5b0f92d45a274e75df31e5182cd81dce61bc53bdb8685f0a7ce24c0b8440f7
67b7fd750bb998fc775415b1c7b8502ea7c744ccb807635f7244d3fdd6ebd01f
634c9f3241fddc1a95d62bfb710a9ea6831ec6e1792f60503f077868e860dc3a
518d8ac29dc625ec65157889cd1f943a37eb55ef0e44c3a4776a481f1dd10cda
79b3db9907295c0ab9e3142df3ef0840b07f29d67c4f8aba333c9cc6e9f57d3f
47083e0bd9e85151ef158308a7d991b02ddcf47bffe6fed2f8e342dd7d2f81ca
80bb689bd0cb5af2a471b5577a4f8dbdfd2b0fcd0267bfa4dc6038bc235d3d8b
35469a680b41dc95e6a1d48ba543d291575d72475ef512492547629c4db741b8
68705f01282c230e1570cea8daea989707e99dce1d11d561256bd24608a66945
2042384aadfcc25cb0167b5896b1a13092d0a7c4ce1343e30834de5d5df345b9
ccb742acf36f7d3a9b43361cf5a9e0121fec84ba8b6c06312a71600ab9783ddc
59b8cb4da03019e82690df5cb2aefd9026aed30efb24b19e5405410685eb35b3
b25cf8ba535156ee600749abf2e3c572313c62dcd9492ca3abcfe7ee8fd40410
902f417c82908b412c9a826206f4292ab5196013a5f3615661cf81fc60b36a84
f457c2adb1a0c1c19f089d170de47d6933ce247d44865035caa1a6d4a2f6986f
9856de5f3d05a5a1020bce9768df8e8aab928b90029dfc2bbb715e19b5e7bc3e
11f05c1dad24849f8aadb7867f9d92f4400a432cdd6587057c582dc25fbeadde
f75121202e2a90dc6a4491ae9ee2b39c5fab5071a2f415d4a3cf8357fff771d8
790cc5788d506086c5a07ddbc2997f3abe28972cd40275c0117c77f479fd0b74
53a0bfcd82f30d1eb3c35fc914657d6f484bf3be81c54238267ccc2a19ec42a3
1336014c6446b12e3fe7746b658f829c52173a78e456ad78c2d65a3209949a5a
735d3795579151ee0102773c204134e8563b011a90c7cf0622058081c60b4d5d
6a146eb610c92e2e9c05f7ca40a1375e7c397def7f0d6a4c65e22728ae30adc2
b1b088339a7e7ab8f2dc6a3b5abd1318663cc5d3c37edd57f8ace64a565d1775
6e5a1268986105c918547306e0bf12d128220771e074323746ac15c52ef16e95
c0e62a0746b7c202a2e2aba2060cd64d5f656dbeb1fa837734d4a23093ddb312
537c0a6f8e224e5aa6cd22f1740e3611550b85d1a447c58ca8
---------- cut here ----------


12-Apr-86 13:09:29-PST,1861;000000000001
Mail-From: BARCKLAY created at 12-Apr-86 13:08:31
Return-Path: <km%emory.csnet@CSNET-RELAY.ARPA>
Received: from CSNET-RELAY.ARPA by SU-SCORE.ARPA with TCP; Mon 7 Apr 86 14:24:39-PST
Received: from emory by csnet-relay.csnet id aa03768; 7 Apr 86 17:13 EST
Received: by emory.eu (4.12/5.6)
	id AA03869; Mon, 7 Apr 86 01:33:13 est
Date: Mon, 7 Apr 86 01:33:13 est
From: Ken Mandelberg <km%emory.csnet@CSNET-RELAY.ARPA>
To: info-postscript@su-score.ARPA
Subject: Bit Smoothing on Apple Laserwriter?
ReSent-Date: Sat 12 Apr 86 13:08:31-PST
ReSent-From: Bob Barcklay <BARCKLAY@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12198315534.15.BARCKLAY@SU-SCORE.ARPA>

I know this a topic that has been discussed before, but I don't think I
have heard a definitive answer.

I would like to take the postscript output generated by a Mac including
output with bitmaps (say from macpaint) and print them on an Apple
Laserwriter not attached to Appletalk.  I currently have a postscript
header that can be prepended to Mac-generated postscript output, and
provides the necessary quickdraw definitions. It works on everything
except the bitmaps.

Apparently the reason for this is that Apple considers its bit
smoothing algorithm for printing bitmaps on the laserwriter
proprietary, and on Appletalk the Mac actualy downloads some 68000
machine code to do the work.

What seems to be needed is a header with this code that can be
downloaded from the RS-232, with the other quickdraw definitions.
Failing this, I guess a substitute postscript routine to approximate it
would probably do.

Has anyone worked this out?


Ken Mandelberg
Emory University
Dept of Math and CS
Atlanta, Ga 30322

{akgua,sb1,gatech,decvax}!emory!km   USENET
km@emory                      CSNET
km.emory@csnet-relay          ARPANET



12-Apr-86 13:09:49-PST,1781;000000000001
Mail-From: BARCKLAY created at 12-Apr-86 13:09:27
Return-Path: <RCKing.Satelite@MIT-MULTICS.ARPA>
Received: from MIT-MULTICS.ARPA by SU-SCORE.ARPA with TCP; Tue 8 Apr 86 07:56:44-PST
Date:  Tue, 8 Apr 86 10:45 EST
From:  "Roger C. King" <RCKing@MIT-MULTICS.ARPA>
Subject:  Epson Printer Emulator Wanted
To:  info-postscript@SU-SCORE.ARPA
Message-ID:  <860408154507.455845@MIT-MULTICS.ARPA>
ReSent-Date: Sat 12 Apr 86 13:09:26-PST
ReSent-From: Bob Barcklay <BARCKLAY@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12198315702.15.BARCKLAY@SU-SCORE.ARPA>

Does anyone have or know of an emulator which can run on either a PC or
the LaserWriter which will emulate the text and graphics capabilities of
an Epson (standard, now out of date, IBM Graphics) printer?  Such a
program would do a lot to ease the interface of the LaserWriter family
into the PC world.  Presumably such a program would support
'shift-PrtSc' for a graphics dump of the screen.

By the way, for people interested in portfolio management, I note that
the latest PC Week review of stock market software picked as a standout
the Isgur Portfolio system from Batteries Included which runs under GEM
and thus supports both the EGA and the LaserWriter.

Also, for users of Xywrite III, XyQuest now has available an updated PRN
file for the LaserWriter which includes the latest patch posted here
from Adobe, and works well for large documents using either XONXOFF.COM
or AST's SuperSpool.  For people interested in a more 'obscure' PRN file
implementation for the LaserWriter (not the LaserWriter Plus) which has
different capabilities than the XyQuest product, I would be happy to
supply my implementation directly.

Roger King
MIT Lincoln Laboratory
Lexington, MA
12-Apr-86 13:10:35-PST,5338;000000000001
Mail-From: BARCKLAY created at 12-Apr-86 13:10:14
Return-Path: <egisin%waterloo.csnet@CSNET-RELAY.ARPA>
Received: from CSNET-RELAY.ARPA by SU-SCORE.ARPA with TCP; Thu 10 Apr 86 14:58:30-PST
Received: from waterloo by csnet-relay.csnet id a019026; 10 Apr 86 17:29 EST
Received: by watmath; Thu, 10 Apr 86 17:13:25 est
Date: Thu, 10 Apr 86 17:13:25 est
From: Eric Gisin <egisin%waterloo.csnet@CSNET-RELAY.ARPA>
To: info-postscript@su-score.ARPA
Subject: C program to convert text files to PostScript
ReSent-Date: Sat 12 Apr 86 13:10:14-PST
ReSent-From: Bob Barcklay <BARCKLAY@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12198315846.15.BARCKLAY@SU-SCORE.ARPA>

This program is short and very useful so I'm mailing it to info-postscript.

: This is a shar archive.	Extract with sh, not csh.
: The rest of this file will extract:
: Read_me text_ps.1 text_ps.c prapple.com
echo Extracting Read_me
sed 's/^X//' > Read_me << 'e-o-f'
Xtext_ps converts text files to PostScript on stdout.
XIt has been tested on Unix 4.2 and VMS V4.
X
Xtext_ps.c: C source
Xtext_ps.1: Unix man page
Xprapple.com: command file for VMS to run text_ps and print the output
X
XOur Unix lpr/lpd is locally modified
Xso I'm not including any printcap stuff or input filters.
X
X	Eric Gisin, egisin@waterloo.csnet, egisin@watarts.bitnet
X
e-o-f
echo Extracting text_ps.1
sed 's/^X//' > text_ps.1 << 'e-o-f'
X.TH TEXT_PS 1
X.SH NAME
Xtext_ps \- convert text to PostScript
X.SH SYNOPSIS
X\fBtext_ps\fP [\fB-w\fP] [file ...]
X.SH DESCRIPTION
X\fIText_ps\fP converts text files to PostScript on the standard output.
XIf no files are given, text_ps reads from the standard input.
XThe \fB-w\fP flag rotates and compresses the page allowing 132 columns.
X.PP
XAt Waterloo, \fItext_ps\fP is called as a prefilter
Xwhen using \fIlpr\fP to a PostScript printer and the default format.
XIf you send \fItext_ps\fP output to \fIlpr\fP, use the \fB-Fl\fP flag.
X.SH BUGS
XOnly the final character is output when several characters are overstuck with backspace.
X.SH SEE ALSO
Xprinters(i)
X.SH AUTHOR
XEric Gisin (egisin@waterloo.csnet)
e-o-f
echo Extracting text_ps.c
sed 's/^X//' > text_ps.c << 'e-o-f'
X/*
X * text-ps: convert text files to PostScript
X *
X *	Copyright (c) 1986, Eric Gisin, egisin@waterloo.CSNET
X *
X *	This program may be copied and redistributed, provided
X *	no fee is charged and this copyright notice is preserved.
X */
X
X#include <stdio.h>
X#include <ctype.h>
X
X#define	LLen	132
X#define	PLen	66
X
Xchar *	Head [] = {
X	"%!PS-Adobe-1.0",
X	"%%Creator: text_ps.c",
X	"%%DocumentFonts: Courier",
X	"/Courier findfont 12 scalefont setfont",
X	"/S {12 mul 780 exch sub 0 exch moveto show} def",
X	"/P+ {/Save save def M concat} def",
X	"/P- {showpage Save restore} def",
X	NULL};
Xchar *	Mdef [] = {"/M [1 0 0 1 18 0] def", "/M [0 -.727 0.727 0 21 737] def"};
X
Xint	wflag = 0;
Xint	page = 0;
X
Xmain(argc, argv)
X	char **	argv;
X{
X	int	i;
X	int	nofiles = 1;
X
X	for (i = 0; Head[i]!=NULL; i ++)
X		printf("%s\n", Head[i]);
X	for (i = 1; i < argc; i ++)
X	    if (argv[i][0]=='-')
X		switch (argv[i][1]) {
X		  case 'w':
X			wflag = !wflag;
X			break;
X		  default:
X			fprintf(stderr, "Usage: %s [-w] file ...\n", argv[0]);
X			exit(1);
X		}
X	    else {
X		FILE *	f;
X		nofiles = 0;
X		f = fopen(argv[i], "r");
X		if (f==NULL) {
X			fprintf(stderr, "%s: Can't open input %s\n", argv[0], argv[i]);
X			continue;
X		}
X		text_ps(f);
X		fclose(f);
X	    }
X	if (nofiles)
X		text_ps(stdin);
X}
X
Xtext_ps(f)
X	register FILE *	f;
X{
X	register c;
X	int	row = 0;
X	int	col = 0;
X	char	line [LLen+1];
X
X	printf("%s\n", Mdef[wflag]);
X	while (1) switch((c = getc(f))) {
X	  case EOF:
X	  case '\r':
X	  case '\n':
X	  case '\f':
X		if (c==EOF && row==0)
X			return;
X		if (row==0) {
X			page ++;
X			printf("%%%%Page: ? %d\n", page);
X			printf("P+\n");
X		}
X		if (col>0) {
X			line[(col<LLen) ? col : LLen] = '\0';
X			putstring(line);
X			printf("%d S\n", row);
X		}
X		if (c=='\n')
X			row ++;
X		if (row==PLen || c=='\f' || c==EOF) {
X			printf("P-\n");
X			row = 0;
X		}
X		if (c==EOF)
X			return;
X		col = 0;
X		break;
X	  case '\t':
X		while (col<LLen) {
X			line[col++] = ' ';
X			if (col%8 == 0) break;
X		}
X		break;
X	  case '\b':
X		if (col>0)
X			col --;
X		break;
X	  default:
X		if (col<LLen)
X			line[col++] = (isascii(c) && isprint(c)) ? c : ' ';
X	}
X}
X
Xputstring(s)
X	register char *s;
X{
X	register c;
X
X	putchar('(');
X	while ((c = *s++) != '\0') {
X		if (c=='\\' || c=='(' || c==')')
X			putchar('\\');
X		putchar(c);
X	}
X	putchar(')');
X}
X
e-o-f
echo Extracting prapple.com
sed 's/^X//' > prapple.com << 'e-o-f'
X$ ! Print text file on Apple LaserWriter
X$ !     pra*pple :== @disk$root:[local.apple.cmd]prapple
X$
X$       if P1 .eqs. "" then goto usage
X$       text_ps := $disk$root:[local.apple.cmd]text_ps
X$       define /user_mode sys$output sys$scratch:prapple.lis
X$       text_ps 'P1' 'P2' 'P3' 'P4' 'P5' 'P6' 'P7'
X$       print /queue=apple /form=postscript sys$scratch:prapple.lis /delete
X$       exit
X$ usage:
X$       write sys$error "Usage: prapple [-w] file ..."
X$       exit
e-o-f
exit 0

12-Apr-86 13:11:08-PST,2804;000000000001
Mail-From: BARCKLAY created at 12-Apr-86 13:10:50
Return-Path: <sdpage%SEVAX.PRG.OXFORD.AC.UK%SEVAX.PRG.OXFORD.AC.UK@Cs.Ucl.AC.UK>
Received: from Cs (CS.UCL.AC.UK.#Internet) by SU-SCORE.ARPA with TCP; Sat 12 Apr 86 05:01:57-PST
Received: from sevax.prg.oxford.ac.uk by 44d.Cs.Ucl.AC.UK   via Janet with NIFTP
           id a001231; 11 Apr 86 17:36 BST
Via:        UK.AC.OXFORD.PRG.SEVAX    ; Fri, 11 Apr 86 16:17:01 GMT
Date:    Fri, 11 Apr 86 16:17:01 GMT
From: Stephen Page <sdpage%sevax.prg.oxford.ac.uk@cs.ucl.ac.uk>
Message-Id: <8604111617.AA09465@UK.AC.OXFORD.PRG.SEVAX (4.12/prgv.15)>
Acknowledge-To: sdpage@UK.AC.OXFORD.PRG.SEVAX
To: WorkS <@cs.ucl.ac.uk,@cs.ucl.ac.uk:WorkS@red.rutgers.edu>, 
    editor-people <@cs.ucl.ac.uk,@cs.ucl.ac.uk:editor-people@su-score.arpa>, 
    human-nets <@cs.ucl.ac.uk,@cs.ucl.ac.uk:human-nets@red.rutgers.edu>, 
    info-ibmpc <@cs.ucl.ac.uk,@cs.ucl.ac.uk:info-ibmpc@usc-isib.arpa>, 
    info-micro <@cs.ucl.ac.uk,@cs.ucl.ac.uk:info-micro@brl.arpa>, 
    info-postscript <@cs.ucl.ac.uk,@cs.ucl.ac.uk:info-postscript@su-score.arpa>, 
    laser-lovers <@cs.ucl.ac.uk,@cs.ucl.ac.uk:laser-lovers@washington.arpa>
Subject: Information request: WP specfications
ReSent-Date: Sat 12 Apr 86 13:10:49-PST
ReSent-From: Bob Barcklay <BARCKLAY@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12198315954.15.BARCKLAY@SU-SCORE.ARPA>

                           Request for information
                 SPECIFICATIONS FOR WORD PROCESSING SOFTWARE

The University of Oxford is developing a co-ordinated policy to guide future
purchases of workstations and personal computers. As part of the policy
we will be specifying minimum standards for word processing software
which will be supplied with and used on these machines.

The software will have two major functions:
     - to act as standalone document preparation software, handling all aspects
       from text entry to production of the final copy on a local printer;
     - to allow the user to enter and edit text which will be transmitted
       from the workstation for remote processing or typesetting.

Our specification includes sections on text preparation facilities, document
production facilities, and output file formats. We are interested in pursuing
markup languages and postprocessors as well as the more common word processing
software packages. We are particularly interested in foreign-language and
scientific capabilities.

We would be interested to hear from others who have drawn up similar
specifications or who may have information which might be of assistance.

Please mail to    sdpage%oxford.prg@ucl-cs.arpa
or write to       Stephen Page, Programming Research Group,
                  8-11 Keble Road, Oxford   OX1 3QD,  U.K.


16-Apr-86 09:10:56-PST,1631;000000000001
Mail-From: REULING created at 16-Apr-86 09:10:31
Return-Path: <MARC%OZ.AI.MIT.EDU@MC.LCS.MIT.EDU>
Received: from OZ.AI.MIT.EDU (MC.LCS.MIT.EDU.#Internet) by SU-SCORE.ARPA with TCP; Sat 12 Apr 86 15:23:45-PST
Date: Sat, 12 Apr 1986  18:24 EST
Message-ID: <MARC.12198340295.BABYL@MIT-OZ>
From: MARC%OZ.AI.MIT.EDU@XX.LCS.MIT.EDU
Subject: Bit Smoothing on Apple Laserwriter?
To:   info-postscript@SU-SCORE.ARPA
In-reply-to: Msg of 7 Apr 1986  01:33-EST from Ken Mandelberg <km%emory.csnet at CSNET-RELAY.ARPA>
ReSent-Date: Wed 16 Apr 86 09:10:29-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12199320779.39.REULING@SU-SCORE.ARPA>


Ken writes:

>>I would like to take the postscript output generated by a Mac including
>>output with bitmaps (say from macpaint) and print them on an Apple
>>Laserwriter not attached to Appletalk.  I currently have a postscript
>>header that can be prepended to Mac-generated postscript output, and
>>provides the necessary quickdraw definitions. It works on everything
>>except the bitmaps.

	
	The problem is in your PostScript header. The full header (I use 
one that was edited by Alan Crosswell,  Columbia U., available from the
info-mac archives) contains an encrypted segment at the end of it that 
contains the PostScript definitions for bit-smoothing. Note that this 
encrypted data contains additional PostScript code only, and that there is
no mechanism whereby PostScript can accept any sort of machine code. This
scheme is also used by Adobe in their implementation of downloadable fonts. 

--Marc
16-Apr-86 09:48:13-PST,3979;000000000001
Mail-From: REULING created at 16-Apr-86 09:47:23
Return-Path: <hitchens@uo.cs.UTEXAS.EDU>
Received: from im4u.UTEXAS.EDU ([128.83.138.9].#Internet) by SU-SCORE.ARPA with TCP; Sat 12 Apr 86 18:28:50-PST
Date: Sat, 12 Apr 86 20:25:06 cst
Posted-Date: Sat, 12 Apr 86 20:25:06 cst
Message-Id: <8604130225.AA22382@im4u.UTEXAS.EDU>
Received: from uo.cs.utexas.edu by im4u.UTEXAS.EDU (4.22/4.22)
	id AA22382; Sat, 12 Apr 86 20:25:07 cst
Received: by uo.cs.utexas.edu (LucasFilm/UT SM); Sat, 12 Apr 86 20:24:51 CST
From: hitchens@uo.cs.UTEXAS.EDU (Ron Hitchens, Sun Wiz)
To: info-postscript@SU-SCORE.ARPA
Cc: brian@sally.utexas.edu, km.emory@csnet-relay.arpa
Subject: Re:  Bit Smoothing on Apple Laserwriter?
ReSent-Date: Wed 16 Apr 86 09:47:22-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12199327493.39.REULING@SU-SCORE.ARPA>

  Yeah, we've done that here at UT.  It's no biggie.  What you need is
the laser-prep file which is downloaded by the Mac to prepare the LW
for receiving Mac Postscript files.  It has been posted to usenet
several times, both with and without the smoothing stuff.  The
smoothing algorithm is encoded hex, so it's opaque but it works fine.
The problem is that the hexified 68000 code is grokked by an eexec
command which reads to end-of-file, that makes it difficult to append
a Mac-prepared file to the end of it.

  The regular laser-prep file installs itself permanently in the LW so
that if you're mainly using it with a Mac it need only be downloaded
once.  Our LaserWriter is driven by a unix spooler (4.2) and is used
for ditroff and TeX mostly, only the occasional MacWrite or MacPaint
file is printed.  Laser-prep is quite large, so I didn't want it to be
continuosly resident.  I changed it to exist only for the current job
by removing the escape-from-server-loop stuff at the top and by making 
a small change to the encoded bit-smoothing data at the end.

  The end of the laser-prep file originally was something like this:

currentfile eexec
652E29AE551935C9A82086907FB876D510EC4D451220E0F80D63DBC0EA379346
(many lines of hex)
905B88019BC3EF0FF064AC6477442573C18EF7090E2C08EAA1A9

  The eexec would gooble hex digits until it hit EOF, I changed it to
look like this.

<652E29AE551935C9A82086907FB876D510EC4D451220E0F80D63DBC0EA379346
(many lines of hex)
905B88019BC3EF0FF064AC6477442573C18EF7090E2C08EAA1A9>
eexec

  All I've done here is define the large glob of hex as a string which is
pushed on the stack (by bounding it with <>).  Eexec happily uses the string
sitting on the stack rather than insisting on reading it from stdin.  What
this gains you is the ability to continue sending more Postscript following
the laser-prep which will be part of the same job.  When that job is finished
the whole shebang will be thrown away.  The penalty is that by pushing the
hex string on the stack that string space is wasted because PostScript
doesn't reclaim string space when they are popped off the stack.  It's
never caused a problem here however.

  So, to print a file prepared on a Mac, you just upload the PostScript
created by doing the CMD-P trick on the Mac.  Then concatenate the modified
laser-prep and your Mac file and feed it to lpr.  Presto, it prints just
like it would if you sent it via AppleTalk to a LaserWriter.  Here at
UT we've setup our spooler to prepend the laser-prep prolog if you spool
the Mac-generated file as a "fortran" type file (which was unused).  You
could also write a simple shell script something like this:

#!/bin/sh

cat /<somepath>/laser-prep.pro $@ | /usr/ucb/lpr -Plw

  I hope this helps.  The bit-smoothing function is very good and makes
a big difference when it's used.  

Ron Hitchens			University of Texas at Austin Computer Science
hitchens@uo.CS.UTEXAS.EDU	Ex-Text Processing Manager
ut-sally!hitchens		(What a relief.  Gimme Suns and leave me alone)

21-Apr-86 21:52:05-PST,1415;000000000001
Mail-From: BARCKLAY created at 21-Apr-86 21:51:42
Return-Path: <sunrise!awesome!jgc@SUN.COM>
Received: from sun.com by SU-SCORE.ARPA with TCP; Tue 15 Apr 86 12:14:57-PST
Received: from snail.sun.com (snail-ptp) by sun.com (3.2-/SMI-3.0)
	id AA05446; Tue, 15 Apr 86 12:11:17 PST
Received: from suntoo.sun.uucp by snail.sun.com (3.2/SMI-3.0DEV4)
	id AA12703; Tue, 15 Apr 86 12:11:16 PST
Received: by suntoo.sun.uucp (3.0-/SMI-2.0)
	id AA20244; Tue, 15 Apr 86 12:12:13 PST
Received: from awesome.sunrise.uucp by sunrise.uucp (2.2/SMI-2.2)
	id AA04808; Tue, 15 Apr 86 13:39:59 est
Return-Path: <jgc@awesome>
Received: by awesome.sunrise.uucp (2.2/SMI-2.2)
	id AA22908; Tue, 15 Apr 86 13:28:46 est
Date: Tue, 15 Apr 86 13:28:46 est
From: sunrise!awesome!jgc@SUN.COM (Jim Constantine)
Message-Id: <8604151828.AA22908@awesome.sunrise.uucp>
To: info-postscript@su-score.arpa
Subject: APL Font
ReSent-Date: Mon 21 Apr 86 21:51:42-PST
ReSent-From: Bob Barcklay <BARCKLAY@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12200770072.9.BARCKLAY@SU-SCORE.ARPA>


  I need a way to print the APL character set on an LaserWriter ?

  Does anyone have such a font ?    Is there any easy way to generate one ?

  I have a Berkeley vfont format APL font, but that is probably of little use
  on a postscript device, or can these be downloaded to the postscript
  printer.

  --Jim

22-Apr-86 16:59:48-PST,1220;000000000001
Mail-From: REULING created at 22-Apr-86 16:59:00
Return-Path: <MartinRR%multics.cardiff.ac.uk@Cs.Ucl.AC.UK>
Received: from Cs (CS.UCL.AC.UK.#Internet) by SU-SCORE.ARPA with TCP; Fri 18 Apr 86 03:20:05-PST
Received: from multics.cardiff.ac.uk by 44d.Cs.Ucl.AC.UK   via Janet with NIFTP
           id a004990; 18 Apr 86 9:56 BST
Date:  Fri, 18 Apr 86 09:21+0100
From:  Ralph <MartinRR%multics.cardiff.ac.uk@cs.ucl.ac.uk>
Subject:  Inconsistency in Appendix C of the PostScript manual
To:  @cs.ucl.ac.uk,@cs.ucl.ac.uk:info-postscript@su-score.arpa
MMDF-Warning:  Parse error in preceding line at 44d.Cs.Ucl.AC.UK
Message-ID:  <860418082125.944788@UK.AC.CARDIFF.MULTICS>
ReSent-Date: Tue 22 Apr 86 16:58:58-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12200978927.11.REULING@SU-SCORE.ARPA>

The structuring conventions say that
a minimally conforming program should a least contain a line
%%DocumentFonts: font1 font2 ...
And it also says that 
the keyword must be followed by one or more values...

Please, what am I supposed to do when my output is purely pictorial,
with no text in it at all. The above rules are inconsistent!

Ralph

22-Apr-86 17:00:53-PST,8155;000000000001
Mail-From: REULING created at 22-Apr-86 16:59:19
Return-Path: <cbosgd!nomad!ggr@seismo.CSS.GOV>
Received: from seismo.CSS.GOV by SU-SCORE.ARPA with TCP; Sun 20 Apr 86 08:50:39-PST
Return-Path: <cbosgd!nomad!ggr>
Received: from cbosgd.UUCP by seismo.CSS.GOV with UUCP; Sun, 20 Apr 86 11:38:08 EST
Received: from lc/lot/nomad.DK 
	by cbosgd.ATT.COM (4.12/UUCP-Project/11.09.85)
	id AA17317; Sat, 19 Apr 86 12:22:03 est
Date: 19 Apr 86 12:23:32 EST (Sat)
From: nomad!ggr@seismo.CSS.GOV (Guy Riddle)
Subject: herps: A Program to Convert Hershey Font Data to PostScript
Message-Id: <8604191723.AA09222@lc/lot/nomad.DK>
Received: by lc/lot/nomad.DK; 8604191723
Telephone: +1 201 580 4168
To: info-postscript@su-score.arpa
Cc: laser-lovers@washington.arpa
ReSent-Date: Tue 22 Apr 86 16:59:17-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12200978985.11.REULING@SU-SCORE.ARPA>

: Open attached package to find Free ReadMe file enclosed.
#! /bin/sh
# This is a shell archive, meaning:
# 1. Remove everything above the #! /bin/sh line.
# 2. Save the resulting text in a file.
# 3. Execute the file with /bin/sh (not csh) to create the files:
#	ReadMe
#	Makefile
#	herps.c
#	pagefinish.ps
#	pagestart.ps
#	prolog.ps
#	trailer.ps
# This archive created: Thu Apr 17 15:56:07 1986
export PATH; PATH=/bin:$PATH
if test -f 'ReadMe'
then
	echo shar: will not over-write existing file "'ReadMe'"
else
cat << \SHAR_EOF > 'ReadMe'
This program will take the Hershey Font files in the format recently
posted to USENET and converts them to a PostScript language stream
that will print sampler pages when shipped to a PostScript printer.

It won't generate anything suitable for consumption by troff, but it
gives you a starting point.

Usage:
	cat hersh.o?? ^ herps ^ lp -dPostScript

	(or "lpr something" on Berkeley UNIX) 

Notes:
	1.  The fonts look better than I expected, and certainly scale
	better than other bit-mapped fonts I've played with.  I'm particularly
	fond of the two Grade-School Script fonts and think a memo written
	using them might really impress a Vice President.

	2.  I set the baseline as if all characters were the large ("regular")
	size.  If you really want to use the smaller characters instead of
	scaling the larger ones to the right size, you'll have to tweak this.

	3.  I generated all characters with the same pen width, you might
	experiment with modifying that, too.

	4.  The program is lazy, takes no arguments, gives no usage message,
	and may be used only as a filter.  Sorry.

Author:
	Guy Riddle
	AT&T Bell Laboratories
	184 Liberty Corner Road
	Liberty Corner, NJ  07938

	<ihnp4!nomad!ggr> or <ggr@btl.csnet>
SHAR_EOF
fi # end of overwriting check
if test -f 'Makefile'
then
	echo shar: will not over-write existing file "'Makefile'"
else
cat << \SHAR_EOF > 'Makefile'
herps:		herps.o
		cc -o herps herps.o
herps.o:	prolog.h pagestart.h pagefinish.h trailer.h

.SUFFIXES: 	.ps
.ps.h:
		sed -e 's/.*/"&",/' $*.ps >$*.h
SHAR_EOF
fi # end of overwriting check
if test -f 'herps.c'
then
	echo shar: will not over-write existing file "'herps.c'"
else
cat << \SHAR_EOF > 'herps.c'
#include <stdio.h>

/*
 *	herps -- Convert Hershey Fonts to PostScript
 *
 * The output is a series of sample pages suitable for printing
 * on your Apple LaserWriter or other PostScript printer.  It doesn't
 * attempt to give you what to need to get something useful out of troff
 * or another formatter -- this is left as an exercise to the reader.
 *
 * Usage:
 *
 *	cat hersh.oc? ^ herps ^ lp -dPostScript
 *
 * Author:
 *
 *	Guy Riddle
 *	AT&T Bell Laboratories
 *
 *	<ihnp4!nomad!ggr> or <ggr@btl.csnet>
 */

	char	glyphnum[6], glyphlength[4];

	int	gcount, page;

	char	*prolog[] = {
#include "prolog.h"
		0
	};
	char	*pagestart[] = {
#include "pagestart.h"
		0
	};
	char	*pagefinish[] = {
#include "pagefinish.h"
		0
	};
	char	*trailer[] = {
#include "trailer.h"
		0
	};

main()
{
	squirt(prolog);

	while(fread(glyphnum, 1, sizeof(glyphnum)-1, stdin) == (sizeof(glyphnum)-1))
		glyph(atoi(glyphnum));

	finishpage();
	squirt(trailer);
	printf("%%%%Pages: %d\n", page);

	exit(0);
}

glyph(gnum)
{
	int	c, glen, xl, xr;

	if(gcount == 64){
		finishpage();
		gcount = 0;
	}
	if(gcount == 0)
		startpage();

	fread(glyphlength, 1, sizeof(glyphlength)-1, stdin);

	glen = atoi(glyphlength)*2 - 2;

	xl = getchar() - 'R';
	xr = getchar() - 'R';

	printf("/%d [%d %d %d\n(", gcount, gnum, xl, xr);

	while(--glen >= 0)
		switch(c = getchar()){
		case '\n':
			glen++;
			break;

		case ' ':
			putchar(c);
			(void) getchar();
			glen--;
			break;

		case '\\':
		case '(':
		case ')':
			putchar('\\');
		default:
			putchar(c);
		}

	printf(")\n] def\n");

	if(getchar() != '\n'){
		fprintf(stderr, "herps: Input format botch\n");
		exit(65);
	}
	if((c = getchar()) != '\n')
		ungetc(c, stdin);

	gcount++;
}

startpage()
{
	printf("%%%%Page: %d\n", ++page);

	squirt(pagestart);
}

finishpage()
{
	squirt(pagefinish);

	printf("%d HersheyPage\n", gcount);
}

squirt(stuff)
	char	**stuff;
{
	char	*p;

	while(p = *stuff++)
		printf("%s\n", p);
}
SHAR_EOF
fi # end of overwriting check
if test -f 'pagefinish.ps'
then
	echo shar: will not over-write existing file "'pagefinish.ps'"
else
cat << \SHAR_EOF > 'pagefinish.ps'
end
/FontBBox [-10 -10 30 30] def
end /Hershey exch definefont
SHAR_EOF
fi # end of overwriting check
if test -f 'pagestart.ps'
then
	echo shar: will not over-write existing file "'pagestart.ps'"
else
cat << \SHAR_EOF > 'pagestart.ps'
save
9 dict dup begin
	/FontType 3 def
	/FontMatrix [1 33 div 0 0 1 33 div 0 0] def

	/Encoding 64 array def 0 1 63 {Encoding exch dup charname put} for
	/BuildChar {10 dict begin BuildHershey end} def

	/CharData 64 dict def CharData begin
SHAR_EOF
fi # end of overwriting check
if test -f 'prolog.ps'
then
	echo shar: will not over-write existing file "'prolog.ps'"
else
cat << \SHAR_EOF > 'prolog.ps'
%!PS-Adobe-1.0
%%Title: Hershey Font Sample Pages
%%Creator: Program by Guy Riddle <ggr@BTL.CSNET>
%%Pages: (atend)
%%EndComments

/inch {72 mul} def
/xdef {exch def} def

/HersheyPage {
	1 sub /maxchar xdef

	30 scalefont /font-h xdef

	0 1 maxchar {
		/charnum xdef

		gsave
		charnum hplace
		font-h /CharData get charnum charname get /chardata xdef

		font-c setfont
		.3 inch .1 inch moveto
		chardata 0 get (????) cvs show

		.3 inch .2 inch moveto .3 inch .8 inch lineto
		.2 inch .3 inch moveto .8 inch .3 inch lineto
		0 setlinewidth stroke

		font-h setfont
		.3 inch .3 inch moveto
		(?) dup 0 charnum put show

		grestore
	} for

	font-r setfont
	.5 inch .9 inch moveto
	(Size 12: ) show

	/Hershey findfont 12 scalefont setfont
	all-64 0 maxchar 1 add getinterval show

	showpage
	restore
} def

/charname {
	(???) cvs cvn
} def

/hplace {
	dup
	8 mod /xc xdef
	8 idiv /yc xdef

	xc 0.45 add inch
	7 yc sub 2.00 add inch translate
} def

/BuildHershey {
	/charcode xdef
	/CharData get charcode charname get /cd xdef

	cd 2 get cd 1 get sub 0 -10 -20 50 60 setcachedevice

	/domove true def
	/isx true def

	cd 3 get {
		isx {
			dup 32 eq {
				pop
				/domove true def
			} {
				82 sub cd 1 get sub
				/isx false def
			} ifelse
		} {
			neg 91 add
			domove {
				moveto
				/domove false def
			} {
				lineto
			} ifelse

			/isx true def
		} ifelse
	} forall

	1 setmiterlimit 1 setlinejoin 1 setlinecap 1 setlinewidth stroke
} def

/Courier findfont 7 scalefont /font-c xdef
/Times-Roman findfont 12 scalefont /font-r xdef

64 string dup 0 1 63 {dup put dup} for pop /all-64 xdef

%%EndProlog
SHAR_EOF
fi # end of overwriting check
if test -f 'trailer.ps'
then
	echo shar: will not over-write existing file "'trailer.ps'"
else
cat << \SHAR_EOF > 'trailer.ps'
%%Trailer
SHAR_EOF
fi # end of overwriting check
#	End of shell archive
exit 0
22-Apr-86 17:02:02-PST,1574;000000000001
Mail-From: REULING created at 22-Apr-86 16:59:55
Return-Path: <allegra!phri!roy@seismo.CSS.GOV>
Received: from seismo.CSS.GOV by SU-SCORE.ARPA with TCP; Tue 22 Apr 86 05:55:43-PST
Return-Path: <allegra!phri!roy>
Received: from allegra.UUCP by seismo.CSS.GOV with UUCP; Tue, 22 Apr 86 07:51:17 EST
Received: by phri.UUCP (4.12/4.7)
	id AA23084; Mon, 21 Apr 86 13:09:50 est
Date: Mon, 21 Apr 86 13:09:50 est
From: allegra!phri!roy@seismo.CSS.GOV (Roy Smith)
Message-Id: <8604211809.AA23084@phri.UUCP>
To: allegra!seismo!su-score.arpa!info-postscript@seismo.CSS.GOV
Subject: Upgrading an Apple LaserWriter to LaserWriter Plus
ReSent-Date: Tue 22 Apr 86 16:59:55-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12200979098.11.REULING@SU-SCORE.ARPA>

	Does anybody know what is involved in upgrading an Apple
LaserWriter to a LaserWriter Plus?  From the "PostScript Language Update
for the Apple LaserWriter and LaserWriter Plus" from Adobe, it looks
like the only difference is a new ROM.  My local Apple dealer says the
upgrade is $799 and consists of a new PC board.  So far, I havn't been
able to even get a phone number of somebody to talk to at Apple who
might really know what the story is.

	Once (if) we get the upgrade, what do we have to do to make
TransScript know about the new fonts?  Do we just need new AFM files?
If so, how much do they cost?

Roy Smith, {allegra,philabs}!phri!roy
System Administrator, Public Health Research Institute
455 First Avenue, New York, NY 10016
22-Apr-86 17:03:01-PST,7826;000000000001
Mail-From: REULING created at 22-Apr-86 17:00:37
Return-Path: <adobe!greid@su-glacier.arpa>
Received: from su-glacier.arpa by SU-SCORE.ARPA with TCP; Tue 22 Apr 86 16:55:45-PST
Received: by su-glacier.arpa with Sendmail; Tue, 22 Apr 86 16:55:48 pst
Received: by adobe.UUCP (4.12/4.7)
	id AA16390; Tue, 22 Apr 86 16:50:21 pst
Message-Id: <8604230050.AA16390@adobe.UUCP>
Date: 22 Apr 1986 1650-PST (Tuesday)
To: Info-PostScript <glacier!info-postscript@SU-Score.ARPA>,
        Laser Lovers <laser-lovers@Washington.ARPA>
Subject: Quick "text-to-PS" PostScript header
Cc: Me <greid@su-glacier.arpa>
From: Glenn Reid <adobe!greid@su-glacier.arpa>
ReSent-Date: Tue 22 Apr 86 17:00:35-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: 9V
ReSent-Message-ID: <12200979222.11.REULING@SU-SCORE.ARPA>


This is a file which will allow a PostScript printer to behave like a
line printer for text files.  It is designed to be as short as possible
while maintaining great flexibility.  It works by reading from
"currentfile", and may simply be PREpended to the beginning of a text
file and shipped to the printer.
Unix(tm) example:

	prompt: cat printfile.ps textfile | lpr

There are a number of default parameters for page setup which may
easily be given alternate definitions by either prepending a short
text file or by downloading some permanenent definitions outside the
server loop of your PostScript printer (NOTE:  if you are using
TranScript(tm), make sure the included file starts with "%!").  These
include: top, left, and bottom margins, default font, point size,
leading, the capability for a header line and/or page numbering (as
well as specification of a default font and pointsize for the header
fields).  These are redefined by simply prepending lines like:

/header (printfile.ps Tue Apr 22 16:30:05 1986) def
/pagenumber false def
/fontname /Palatino-Roman def
/pointsize 12 def

I have tried to avoid complexity where possible, but it might be of use
to define a special dictionary for these parameters if they are to be
declared outside the serverloop.

NOTE:  this file MUST end with the line containing only the word
"printfile".  Everything after this line in the file will be considered
part of the DATA and will be printed on the page (include blank lines).

BUGS:  This is a very simple program.  It does not deal with tabs,
in-line font changes, or a host of other troublesome things.  You may
add whatever features you like to it.  Please mail me any
improvements you make.

Enough.  Herein follow two copies of the code, one fully commented, and
one with all unnecessary comments and whitespace stripped out (for
compactness)

---------------------- cut once -----------------------
%!-Adobe-1.0
%%Title: printfile.ps
%%Creator: Glenn Reid, Adobe Systems Incorporated
%%CreationDate: Tue Apr 22 15:35:53 1986
%%Pages: 0
%% Copyright (c) 1986 Glenn Reid and Adobe Systems Incorporated.
%% Use it, distribute it (with this message), but don't sell it.
%%
%% This program will take miscellaneous text concatenated at its
%% end and print it in some default font.  It is designed to be
%% minimal in its functionality, but flexible enough to be easily
%% adapted to other uses.

/in.	{72 mul}	def
/line	512	string def	% for input line buffering
/buff	10	string def	% for page number conversion

%% CHANGE THESE IF YOU LIKE

%% If any of these parameters are defined ahead of this file, then
%% those values will be used.  A typical way to use this is to
%% allow an application to redefine some of the parameters by
%% inserting definitions ahead of this file in the print stream.
%% Examples of redefinitions look like:
%% 
%%     /fontname /Palatino-Roman def
%%     /pointsize /13 def
%%     /header (document.ps) def
%%     /pagenumber false def
%%     /leftmargin 36 def
%% 
%% Any number (including 0) of these parameters may be defined to
%% be different from the defaults.  The defaults are quite
%% reasonable for general use, and will print in 11-point Courier
%% with a 12-point Courier-Bold header (only prints a header of
%% /header string is defined by the user).  Margins top, left and
%% bottom are: .75 in.,  .75 in., and .5 in.
%% 
%%  Otherwise, the following defaults will be used:

/leftmargin where not
    { /leftmargin .75 in. def } {pop} ifelse
/bottom where not
    { /bottom .5 in. def } {pop} ifelse
/startX where not
    { /startX leftmargin def } {pop} ifelse
/startY where not
    { /startY 10 in. def } {pop} ifelse
/fontname where not
    { /fontname /Courier def } {pop} ifelse
/pointsize where not
    { /pointsize 11 def } {pop} ifelse
/leading where not
    { /leading pointsize 2 add def } {pop} ifelse
/headerfontname where not
    { /headerfontname /Courier-Bold def } {pop} ifelse
/headerpointsize where not
    { /headerpointsize 12 def } {pop} ifelse
/headerfont
    headerfontname findfont headerpointsize scalefont
def
/page where not
    { /page 1 def } {pop} ifelse
/pagenumber where not
    { /pagenumber true def } {pop} ifelse

% This routine will print a header at the top of each page
/printheader {
    gsave
	currentdict /header known {
	    36 10.5 in. moveto
	    headerfont setfont
	    header show
	} if
	pagenumber {
	    8 in. 10.5 in. moveto
	    headerfont setfont
	    page buff cvs show
	    /page page 1 add def
	} if
    grestore
    startX startY moveto
} bind def

/crlf {
    leftmargin currentpoint exch pop	% replace X with leftmargin
    leading sub
    dup bottom le
    { pop pop showpage printheader }
    { moveto } ifelse
} bind def

/printfile {
    line readline		% read a line from the file
    {				% 'if' procedure body (+boolean)
	{			% 'while' procedure body
	    show crlf		% show what's left by readline
	    currentfile cvlit	% use as operand
	    line readline	% and read the next line
	    not {exit} if	% exit if no more input to be had
	} loop			% end of while-proc
    } if
    showpage			% when input file is exhausted
} bind def			% /printfile

fontname findfont pointsize scalefont setfont

printheader		% execute header
currentfile cvlit	% uses rest of this file as input

% everything following 'PrintFile' is treated as data, through EOF
printfile
---------------------- cut twice -----------------------
%! Adobe PasteUp Version 2.0 (35)
/in.{72
mul}def/line
512
string
def/buff
10
string
def/leftmargin
where
not{/leftmargin
.75
in.
def}{pop}ifelse/bottom
where
not{/bottom
.5
in.
def}{pop}ifelse/startX
where
not{/startX
leftmargin
def}{pop}ifelse/startY
where
not{/startY
10
in.
def}{pop}ifelse/fontname
where
not{/fontname/Courier
def}{pop}ifelse/pointsize
where
not{/pointsize
11
def}{pop}ifelse/leading
where
not{/leading
pointsize
2
add
def}{pop}ifelse/headerfontname
where
not{/headerfontname/Courier-Bold
def}{pop}ifelse/headerpointsize
where
not{/headerpointsize
12
def}{pop}ifelse/headerfont
headerfontname
findfont
headerpointsize
scalefont
def/page
where
not{/page
1
def}{pop}ifelse/pagenumber
where
not{/pagenumber
true
def}{pop}ifelse/printheader{gsave
currentdict/header
known{36
10.5
in.
moveto
headerfont
setfont
header
show}if
pagenumber{8
in.
10.5
in.
moveto
headerfont
setfont
page
buff
cvs
show/page
page
1
add
def}if
grestore
startX
startY
moveto}bind
def/crlf{leftmargin
currentpoint
exch
pop
leading
sub
dup
bottom
le{pop
pop
showpage
printheader}{moveto}ifelse}bind
def/printfile{line
readline{{show
crlf
currentfile
cvlit
line
readline
not{exit}if}loop}if
showpage}bind
def
fontname
findfont
pointsize
scalefont
setfont
printheader
currentfile
cvlit
printfile
22-Apr-86 17:12:12-PST,1412;000000000001
Mail-From: REULING created at 22-Apr-86 17:11:17
Return-Path: <CET1%PHOENIX.CAMBRIDGE.AC.UK%SERC-ICF.ENGINEERING.CAMBRIDGE.AC.UK@Cs.Ucl.AC.UK>
Received: from Cs (CS.UCL.AC.UK.#Internet) by SU-SCORE.ARPA with TCP; Tue 22 Apr 86 17:03:52-PST
Received: from serc-icf.engineering.cambridge.ac.uk by 44d.Cs.Ucl.AC.UK 
           via Janet with NIFTP  id a022077; 21 Apr 86 19:57 BST
Date: Monday, 21 April 1986 16:47:29
To: info-postscript <@cs.ucl.ac.uk,@cs.ucl.ac.uk:info-postscript@su-score.arpa>
Subject: LW bug in treatment of "syntaxerror"?
From: "Cambridge Phoenix - CAM.PHX@CAM.ENG-ICF" <CET1%phoenix.cambridge.ac.uk@cs.ucl.ac.uk>
Authentic-sender:   MAIL@CAGA
ReSent-Date: Tue 22 Apr 86 17:11:16-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: 9V
ReSent-Message-ID: <12200981167.11.REULING@SU-SCORE.ARPA>

There seems to be a bug in the LaserWriter (revision 0, PostScript
version 23.0), when driven via the RS232 port, to do with "syntaxerror":
after the usual error message the input stream is not flushed. Instead
an EOT (ctrl/D) is sent immediately by the LW and it then starts to
interpret the rest of the stream as a new job. Can anyone confirm this
effect, and/or state whether it is restricted to "syntaxerror" (as it
appears to me to be), and/or indicate whether it is fixed in revision 2?
 
Chris Thompson
CET1%PHX.CAM.AC.UK@UCL-CS.ARPA

26-Apr-86 13:15:20-PST,1433;000000000001
Mail-From: BARCKLAY created at 26-Apr-86 13:14:48
Return-Path: <MartinRR%multics.cardiff.ac.uk@Cs.Ucl.AC.UK>
Received: from Cs (CS.UCL.AC.UK.#Internet) by SU-SCORE.ARPA with TCP; Thu 17 Apr 86 21:55:33-PST
Received: from multics.cardiff.ac.uk by 44d.Cs.Ucl.AC.UK   via Janet with NIFTP
           id a019114; 15 Apr 86 16:36 BST
Posted-Date:  15 Apr 86 16:35+0100
Date:  Tue, 15 Apr 86 16:34+0100
From:  Ralph <MartinRR%multics.cardiff.ac.uk@cs.ucl.ac.uk>
Subject:  sending postscript over appletalk
To:  @cs.ucl.ac.uk,@cs.ucl.ac.uk:info-postscript@su-score.arpa, 
     @cs.ucl.ac.uk,@cs.ucl.ac.uk:info-mac@sumex-aim.arpa
MMDF-Warning:  Parse error in preceding line at 44d.Cs.Ucl.AC.UK
Message-ID:  <860415153448.453096@UK.AC.CARDIFF.MULTICS>
ReSent-Date: Sat 26 Apr 86 13:14:48-PST
ReSent-From: Bob Barcklay <BARCKLAY@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12201986694.14.BARCKLAY@SU-SCORE.ARPA>

I want to be able to send arbitrary postscript files, saved as text
files on a macintosh, to a laserwriter connected via appletalk.  Does
anyone have a utility for doing this they would be willing to let me
have a .hqx file for?
 I know that PSTester does more or less this, but it has one drawback -
it can't cope with long files (I guess it tries to read them into memory
first).  I dont want to be able to fiddle about with the files, just
send them.
 Any offers ?
    Ralph

26-Apr-86 13:16:21-PST,875;000000000001
Mail-From: BARCKLAY created at 26-Apr-86 13:15:51
Return-Path: <HAAS@UTAH-20.ARPA>
Received: from UTAH-20.ARPA by SU-SCORE.ARPA with TCP; Thu 24 Apr 86 15:35:55-PST
Date: Thu 24 Apr 86 16:35:08-MST
From: Walt <Haas@UTAH-20.ARPA>
Subject: minor bug in TranScript 2.0
To: Info-PostScript@SU-SCORE.ARPA
Message-ID: <12201487954.9.HAAS@UTAH-20.ARPA>
ReSent-Date: Sat 26 Apr 86 13:15:51-PST
ReSent-From: Bob Barcklay <BARCKLAY@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: 9V
ReSent-Message-ID: <12201986884.14.BARCKLAY@SU-SCORE.ARPA>

pscatmap.c does not set the return value to 0 on a normal exit, but
just falls out the bottom of the main procedure.  This doesn't matter
on the VAX, but our Gould 9080 gives a garbage return value that causes
the invoking shell script to fail.

Solution: add "exit(0);" at the bottom of pscatmap.c.

Cheers  -- Walt
-------
 7-May-86 09:47:23-PDT,870;000000000001
Mail-From: REULING created at  7-May-86 09:46:39
Return-Path: <HAAS@UTAH-20.ARPA>
Received: from UTAH-20.ARPA by SU-SCORE.ARPA with TCP; Thu 24 Apr 86 15:35:55-PST
Date: Thu 24 Apr 86 16:35:08-MST
From: Walt <Haas@UTAH-20.ARPA>
Subject: minor bug in TranScript 2.0
To: Info-PostScript@SU-SCORE.ARPA
Message-ID: <12201487954.9.HAAS@UTAH-20.ARPA>
ReSent-Date: Wed 7 May 86 09:46:38-PDT
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12204821460.15.REULING@SU-SCORE.ARPA>

pscatmap.c does not set the return value to 0 on a normal exit, but
just falls out the bottom of the main procedure.  This doesn't matter
on the VAX, but our Gould 9080 gives a garbage return value that causes
the invoking shell script to fail.

Solution: add "exit(0);" at the bottom of pscatmap.c.

Cheers  -- Walt
-------
 7-May-86 09:48:07-PDT,1221;000000000001
Mail-From: REULING created at  7-May-86 09:46:53
Return-Path: <LISKOV@XX.LCS.MIT.EDU>
Received: from XX.LCS.MIT.EDU by SU-SCORE.ARPA with TCP; Sat 26 Apr 86 09:58:49-PST
Date: Sat 26 Apr 86 12:50:17-EST
From: Barbara H. Liskov <LISKOV@XX.LCS.MIT.EDU>
Subject: ascii/postscript conversion utility
To: laser-lovers@WASHINGTON.ARPA
cc: info-postscript@SU-SCORE.ARPA
Message-ID: <12201949464.71.LISKOV@XX.LCS.MIT.EDU>
ReSent-Date: Wed 7 May 86 09:46:53-PDT
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12204821504.15.REULING@SU-SCORE.ARPA>


	I have submitted a menu driven turbo pascal program for ascii to
postscript conversion for public domain non-commercial use.  It should be available in the info-ibmpc library at isib.arpa.

	This program allows font type selection, font size, line spacing
, optional header line, pagination.  It allows for one normal and one bold 
font per page.  The output may be sent to the printer directly or to a
file.  The program is not smart about character widths of various
fonts but has some smarts about tab positioning.

	I hope people find this useful.

	Nate Liskov  (nate@mit.bold.lcs.edu)
-------
 7-May-86 09:49:06-PDT,890;000000000001
Mail-From: REULING created at  7-May-86 09:47:10
Return-Path: <stew%lhasa.UUCP@harvard.HARVARD.EDU>
Received: from harvard.HARVARD.EDU by SU-SCORE.ARPA with TCP; Mon 28 Apr 86 07:13:43-PDT
Received: by harvard.HARVARD.EDU; Mon, 28 Apr 86 10:14:57 EDT
From: stew%lhasa.UUCP@harvard.HARVARD.EDU
Date: 	28 Apr 86 10:06 EDT
To: harvard!info-postscript@su-score.arpa
Subject:  bind
ReSent-Date: Wed 7 May 86 09:47:10-PDT
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12204821556.15.REULING@SU-SCORE.ARPA>

Does anyone know the semantics of the bind operator?  It is not defined
in Inside LaserWriter.  I am trying to fix the Adobe Error Handler routines,
which give a typecheck on the bind on the last line of the file.  Does
anyone have this fixed?

Thanx
Stew
rubenstein@harvard.harvard.edu
seismo!harvard!rubenstein
 7-May-86 09:49:58-PDT,4320;000000000001
Mail-From: REULING created at  7-May-86 09:47:36
Return-Path: <adobe!shore@su-glacier.arpa>
Received: from su-glacier.arpa by SU-SCORE.ARPA with TCP; Tue 29 Apr 86 23:57:57-PDT
Received: by su-glacier.arpa with Sendmail; Tue, 29 Apr 86 23:58:31 pdt
Received: by adobe.UUCP (4.12/4.7)
	id AA07223; Tue, 29 Apr 86 21:20:44 pdt
From: adobe!shore@su-glacier.arpa (Andrew Shore)
Message-Id: <8604300420.AA07223@adobe.UUCP>
Date: 29 Apr 1986 2120-PDT (Tuesday)
To: glacier!info-postscript@su-glacier.arpa
Subject: revised PostScript downloadable error handler
ReSent-Date: Wed 7 May 86 09:47:35-PDT
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12204821634.15.REULING@SU-SCORE.ARPA>

Here is our latest version of the downloadable PostScript error
handler (ehandler.ps).  When sent to any PostScript printer, it
will download itself outside the printer's "server loop"
(assuming the server loop password is correct) and redefine the
action taken on a PostScript error. 

This handler prints a sometimes-helpful summary of the error on
the thus-far-completed page and then executes the previous
handleerror code as well (which in most PostScript printers will
echo the error name and offending command over the
communications channel).  This version works on all existing
Adobe PostScript implementations.

It really helps when debugging raw PostScript code and new
PostScript-generating applications.

Enjoy,
--Andy

%!
% lib/ehandler.ps -- Downloaded Error Break-page handler
% Copyright (c) 1984, 1985, 1986 Adobe Systems Incorporated. 
% All Rights Reserved.

0000 % serverloop password
/$brkpage where
{pop pop(Error Handler in place - not loaded again\n)print flush stop}
{dup serverdict begin statusdict begin checkpassword
 {(Error Handler downloaded.\n)print flush exitserver}
 {pop(Bad Password on loading error handler!!!\n)print flush stop}ifelse
}ifelse
/$brkpage 64 dict def $brkpage begin
/prnt
 {dup type/stringtype ne{=string cvs}if dup length 6 mul/tx exch def/ty 10 def
  currentpoint/toy exch def/tox exch def 1 setgray newpath
  tox toy 2 sub moveto 0 ty rlineto tx 0 rlineto 0 ty neg rlineto
  closepath fill tox toy moveto 0 setgray show}bind def
/nl{currentpoint exch pop lmargin exch moveto 0 -10 rmoveto}def
/=={/cp 0 def typeprint nl}def
/typeprint{dup type dup currentdict exch known
  {exec}{unknowntype}ifelse}readonly def
/lmargin 72 def/rmargin 72 def
/tprint{dup length cp add rmargin gt{nl/cp 0 def}if
  dup length cp add/cp exch def prnt}readonly def
/cvsprint{=string cvs tprint( )tprint}readonly def
/unknowntype{exch pop cvlit(??)tprint cvsprint}readonly def
/integertype{cvsprint}readonly def
/realtype{cvsprint}readonly def
/booleantype{cvsprint}readonly def
/operatortype{(//)tprint cvsprint}readonly def
/marktype{pop(-mark- )tprint}readonly def
/dicttype{pop(-dictionary- )tprint}readonly def
/nulltype{pop(-null- )tprint}readonly def
/filetype{pop(-filestream- )tprint}readonly def
/savetype{pop(-savelevel- )tprint}readonly def
/fonttype{pop(-fontid- )tprint}readonly def
/nametype{dup xcheck not{(/)tprint}if cvsprint}readonly def
/stringtype
 {dup rcheck{(\()tprint tprint(\))tprint}{pop(-string- )tprint}ifelse
 }readonly def
/arraytype
 {dup rcheck{dup xcheck
  {({)tprint{typeprint}forall(})tprint}
  {([)tprint{typeprint}forall(])tprint}ifelse}{pop(-array- )tprint}ifelse
 }readonly def
/packedarraytype
 {dup rcheck{dup xcheck
  {({)tprint{typeprint}forall(})tprint}
  {([)tprint{typeprint}forall(])tprint}ifelse}{pop(-packedarray- )tprint}ifelse
 }readonly def
/courier/Courier findfont 10 scalefont def
/OLDhandleerror errordict /handleerror get def
end %$brkpage
errordict/handleerror
 {systemdict begin $error begin $brkpage begin newerror
   {/newerror false store 
    vmstatus pop pop 0 ne{grestoreall}if initgraphics courier setfont
    lmargin 720 moveto(ERROR: )prnt errorname prnt
    nl(OFFENDING COMMAND: )prnt/command load prnt
    $error/ostack 
    known{nl nl(STACK:)prnt nl nl $error/ostack get aload length{==}repeat}if
    systemdict/showpage get exec
    /newerror true store/OLDhandleerror load end end end exec}{end end end}
  ifelse}
dup 0 systemdict put dup 4 $brkpage put bind readonly put


 7-May-86 09:55:01-PDT,49870;000000000001
Mail-From: REULING created at  7-May-86 09:53:44
Return-Path: <cbosgd!nomad!ggr@seismo.CSS.GOV>
Received: from seismo.CSS.GOV by SU-SCORE.ARPA with TCP; Sat 3 May 86 02:05:15-PDT
Return-Path: <cbosgd!nomad!ggr>
Received: from cbosgd.UUCP by seismo.CSS.GOV with UUCP; Sat, 3 May 86 01:54:20 EDT
Received: from lc/lot/nomad.DK 
	by cbosgd.ATT.COM (4.12/UUCP-Project/11.09.85)
	id AA04838; Mon, 28 Apr 86 21:26:13 edt
Date: 28 Apr 86 21:27:29 EDT (Mon)
From: nomad!ggr@seismo.CSS.GOV (Guy Riddle)
Subject: hersel: Make a PostScript Font from Selected Hershey Characters
Message-Id: <8604290127.AA16071@lc/lot/nomad.DK>
Received: by lc/lot/nomad.DK; 8604290127
Telephone: +1 201 580 4168
To: info-postscript@su-score.arpa
Cc: laser-lovers@washington.arpa
ReSent-Date: Wed 7 May 86 09:53:42-PDT
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12204822747.15.REULING@SU-SCORE.ARPA>

: If you enjoyed the recently released *herps*, the sequel, *hersel*, should be
: coming very soon to a file near you.

#! /bin/sh
# This is a shell archive, meaning:
# 1. Remove everything above the #! /bin/sh line.
# 2. Save the resulting text in a file.
# 3. Execute the file with /bin/sh (not csh) to create the files:
#	READme
#	Makefile
#	hersel.c
#	standard.enc
#	makefont.ps
#	font.map+
#	morefonts
#	HerGotEng.sel
#	HerGotEngB.sel
#	HerGotEngO.sel
#	HerGotGer.sel
#	HerGotGerB.sel
#	HerGotGerO.sel
#	HerGotIta.sel
#	HerGotItaB.sel
#	HerGotItaO.sel
#	HerPla.sel
#	HerPlaB.sel
#	HerPlaO.sel
#	HerScrCom.sel
#	HerScrComB.sel
#	HerScrComO.sel
#	HerScrSim.sel
#	HerScrSimB.sel
#	HerScrSimO.sel
#	HerTri.sel
#	HerTriB.sel
#	HerTriBI.sel
#	HerTriI.sel
# This archive created: Mon Apr 28 15:22:38 1986
export PATH; PATH=/bin:$PATH
if test -f 'READme'
then
	echo shar: will not over-write existing file "'READme'"
else
cat << \SHAR_EOF > 'READme'
This program takes a "selection file" and a file of Hershey glyphs
and creates 3 output files:

	a .pro file -- PostScript code that when included in a PostScript
		program makes a font that may then be accessed via 'findfont'
	a .afm file -- provides the Adobe Font Metrics information needed
		by the TranScript shell file 'afmdit' to construct a
		troff .out file
	a .map file -- used by TranScript software to map the 2-character
		troff font name to the internal font name

To make the whole shebang, just say "make".

If you have Adobe's TranScript package, you dispose of the output
files as follows:

	.pro -- goes in /usr/add-on/ps/lib [Your Directories May Vary]

	.afm -- goes in /usr/add-on/ps/lib and /usr/lsrc/transcript/lib

	.map -- goes in /usr/lsrc/transcript/lib/ditroff.font

Then sort the `font.map+' lines into your font.map, merge the `moreout' line
into your /usr/lsrc/transcript/lib/ditroff.font/Makefile, and run make in
this directory.  Scatter the .out and .aux files to their proper places
[probably /usr/lib/font/devpsc].

Now if you have the version of TranScript I do, you are done.  (I've locally
modified mine to automatically merge the .pro file with the rest of the
psdit output whenever a "non-standard font" is used in a document.  I can't
send you these modifications but you might try expressing your wishes
to adobe!shore in hope of altering the future.)  Otherwise you need to
arrange some other method of merging the proper .pro files before printing
the output.

Usage:	(if you wish to build fonts other than the ones I did)
 	hersel font.sel hersh.oc

Notes:
	1.  I didn't bother with ligatures (none of the fonts I encoded
	had any).

	2.  I only encoded characters in Adobe's Standard Encoding.  You'll
	have to do some twiddling to get the Christmas tree into a font.

	3.  To keep the regular fonts dainty, I have used a rather narrow
	pen width.  This looks fine at small character sizes, but at
	larger sizes the characters show gaps in the strokes.  I'd just
	use the "bold" variety of the font when this happens but you might
	feel like adjusting the penwidth for the basic font.

	4.  I didn't like the spacing on most of the fonts so put a provision
	in the select file to adjust the left and right "boundaries" (not
	really side-bearings as the character origin isn't given and had
	to be divined) of a character.  These are the third and fourth fields
	on the character selection line when present.  You may feel like
	adjusting them again.  The Gothic fonts probably could use some
	tuning, too, but I haven't done them.

Author:
	Guy Riddle
	AT&T Bell Laboratories
	184 Liberty Corner Road
	Liberty Corner, NJ  07938

	<allegra!nomad!ggr> or <ggr@btl.csnet>
SHAR_EOF
fi # end of overwriting check
if test -f 'Makefile'
then
	echo shar: will not over-write existing file "'Makefile'"
else
cat << \SHAR_EOF > 'Makefile'
AFM =	HerGotEng.afm HerGotEngB.afm HerGotEngO.afm HerGotGer.afm \
	HerGotGerB.afm HerGotGerO.afm HerGotIta.afm HerGotItaB.afm \
	HerGotItaO.afm HerPla.afm HerPlaB.afm HerPlaO.afm HerScrCom.afm \
	HerScrComB.afm HerScrComO.afm HerScrSim.afm HerScrSimB.afm \
	HerScrSimO.afm HerTri.afm HerTriB.afm HerTriBI.afm HerTriI.afm

fonts:		$(AFM)
		touch fonts
$(AFM):		hersel hersh.oc
hersh.oc:	hersh.oc1 hersh.oc2 hersh.oc3 hersh.oc4
		cat hersh.oc[1234] >hersh.oc

hersel:		hersel.o
		cc -o hersel hersel.o
hersel.o:	standard.h makefont.h

herps:		herps.o
		cc -o herps herps.o
herps.o:	prolog.h pagestart.h pagefinish.h trailer.h

.SUFFIXES: 	.ps .enc .afm .sel
.ps.h:
		sed -e 's/.*/"&",/' $*.ps >$*.h
.enc.h:
		sed -e 's/.*/{"&"},/' $*.enc >$*.h
.sel.afm:
		hersel $*.sel hersh.oc
SHAR_EOF
fi # end of overwriting check
if test -f 'hersel.c'
then
	echo shar: will not over-write existing file "'hersel.c'"
else
cat << \SHAR_EOF > 'hersel.c'
#include <stdio.h>

/*
 *	hersel -- Make a PostScript Font from Selected Hershey Characters
 *
 * This program takes a "selection file" and a file of Hershey glyphs
 * and creates 3 output files:
 *
 *	a .pro file -- PostScript code that when included in a PostScript
 *		program makes a font that may then be accessed via 'findfont'
 *	a .afm file -- provides the Adobe Font Metrics information needed
 *		by the TranScript shell file 'afmdit' to construct a
 *		troff .out file
 *	a .map file -- used by TranScript software to map the 2-character
 *		troff font name to the internal font name
 *
 * You should be able to deduce the format of the .sel file from the
 * enclosed examples without much trouble.
 *
 * Usage:
 *
 *	hersel font.sel hersh.oc
 *
 * Author:
 *
 *	Guy Riddle
 *	AT&T Bell Laboratories
 *	Liberty Corner, NJ  07938
 *
 *	<attmail!ggr> or <ihnp4!garage!ggr> or <ggr@btl.csnet>
 */


	typedef struct {
		char	*key;
		char	*value;
		short	glyph;
		short	adjleft;
		short	adjright;
	} Tmt;

	int	glyphcount;
	char	*iam;
	FILE	*sel, *font, *map, *afm, *pro;

	char	longname[128], shortname[16], troffname[4];
	char	penwidth[8]	= "1";
	char	italicangle[8]	= "0";

	FILE	*openin(), *openout();
	Tmt	*match();

	Tmt 	keywords[] = {
		{ "longname", longname },
		{ "shortname", shortname },
		{ "troffname", troffname },
		{ "penwidth", penwidth },
		{ "italicangle", italicangle },
		0
	};

	Tmt	encoding[] = {
#include "standard.h"
		0
	};

	char	*makefont[] = {
#include "makefont.h"
		0
	};

main(argc, argv)
	char	*argv[];
{
	iam = argv[0];

	if(argc != 3){
		fprintf(stderr, "Usage:  %s select-file font-file\n", iam);
		exit(64);
	}

	sel = openin(argv[1]);
	font = openin(argv[2]);

	readselect();

	if(troffname[0]){
		map = openout(troffname, "map");
		fprintf(map, "%s\n", longname);
	}

	afm = openout(shortname, "afm");
	pro = openout(shortname, "pro");

	fprintf(afm, "StartFontMetrics 1.0\n");
	fprintf(afm, "Comment Selected characters from the Hershey Fonts\n");
	fprintf(afm, "FontName %s\n", longname);
	fprintf(afm, "Notice Created by the program `hersel'\n");
	fprintf(afm, "Notice Program author Guy Riddle <ihnp4!nomad!ggr>\n");
	fprintf(afm, "Comment The bounding boxes are bogus\n");
	fprintf(afm, "FontBBox 0 0 1000 1000\n");
	fprintf(afm, "StartCharMetrics\n");

	makepro();

	fprintf(afm, "EndCharMetrics\n");
	fprintf(afm, "EndFontMetrics\n");

	exit(0);
}

readselect()
{
	Tmt	*p;
	char	line[128], left[64], right[64], adjleft[8], adjright[8];

	while(fgets(line, sizeof(line), sel)){
		if(line[0] == '#')
			continue;

		adjleft[0] = adjright[0] = '\0';

		sscanf(line, "%s %s %s %s", left, right, adjleft, adjright);

		if(p = match(left, keywords))
			strcpy(p->value, right);
		else if(p = match(left, encoding)){
			p->glyph = atoi(right);
			p->adjleft = atoi(adjleft);
			p->adjright = atoi(adjright);
			glyphcount++;
		}else
			fprintf(stderr, "%s: no keyword or character %s\n", iam, left);
	}
}

makepro()
{
	Tmt	*p;
	int	glyph, xl, xr, wx;
	char	strokes[2048];

	squirt(pro, makefont);

	fprintf(pro, "%d dict dup begin\n", glyphcount);

	while(glyph = hersheyglyph(&xl, &xr, strokes))
		for(p = encoding; p->key; p++)
			if(glyph == p->glyph){
				xl += p->adjleft;
				xr += p->adjright;

				fprintf(pro, "/%s [%d %d (%s)] def\n",
				  p->key, xl, xr, strokes);

				if(p->key[0] != '.'){
					wx = ((xr - xl) * 1000) / 33;
					fprintf(afm, "C %d ; WX %d ; N %s ; B 0 0 1000 1000 ;\n",
					  (p - encoding), wx, p->key);
				}
			}

	fprintf(pro, "end /%s %s %s MakeHersheyFont\n", longname, penwidth, italicangle);
}

hersheyglyph(xlp, xrp, sp)
	int	*xlp, *xrp;
	char	*sp;
{
	int	c, glen;
	char	glyphnum[6], glyphlength[4];
	
	if(fread(glyphnum, 1, sizeof(glyphnum)-1, font) != (sizeof(glyphnum)-1))
		return(0);

	fread(glyphlength, 1, sizeof(glyphlength)-1, font);

	glen = atoi(glyphlength)*2 - 2;

	*xlp = getc(font) - 'R';
	*xrp = getc(font) - 'R';

	while(--glen >= 0)
		switch(c = getc(font)){
		case '\n':
			glen++;
			break;

		case ' ':
			*sp++ = c;
			(void) getc(font);
			glen--;
			break;

		case '\\':
		case '(':
		case ')':
			*sp++ = '\\';
		default:
			*sp++ = c;
		}
	*sp = '\0';

	if(getc(font) != '\n'){
		fprintf(stderr, "%s: font input format botch\n", iam);
		exit(65);
	}
	if((c = getc(font)) != '\n')
		ungetc(c, font);
	return(atoi(glyphnum));
}

squirt(fp, stuff)
	FILE	*fp;
	char	**stuff;
{
	char	*p;

	while(p = *stuff++)
		fprintf(fp, "%s\n", p);
}

	FILE *
openin(name)
	char	*name;
{
	FILE	*fp;

	fp = fopen(name, "r");

	if(fp == NULL){
		fprintf(stderr, "%s: can't open %s\n", iam, name);
		exit(66);
	}

	return(fp);
}

	FILE *
openout(pre, suf)
	char	*pre, *suf;
{
	FILE	*fp;
	char	name[16];

	sprintf(name, "%s.%s", pre, suf);

	fp = fopen(name, "w");

	if(fp == NULL){
		fprintf(stderr, "%s: can't create %s\n", iam, name);
		exit(73);
	}

	return(fp);
}

	Tmt *
match(key, table)
	char	*key;
	Tmt	table[];
{
	Tmt	*p;

	for(p = table; p->key; p++)
		if(strcmp(key, p->key) == 0)
			return(p);
	return(0);
}
SHAR_EOF
fi # end of overwriting check
if test -f 'standard.enc'
then
	echo shar: will not over-write existing file "'standard.enc'"
else
cat << \SHAR_EOF > 'standard.enc'
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
space
exclam
quotedbl
numbersign
dollar
percent
ampersand
quoteright
parenleft
parenright
asterisk
plus
comma
hyphen
period
slash
zero
one
two
three
four
five
six
seven
eight
nine
colon
semicolon
less
equal
greater
question
at
A
B
C
D
E
F
G
H
I
J
K
L
M
N
O
P
Q
R
S
T
U
V
W
X
Y
Z
bracketleft
backslash
bracketright
asciicircum
underscore
quoteleft
a
b
c
d
e
f
g
h
i
j
k
l
m
n
o
p
q
r
s
t
u
v
w
x
y
z
braceleft
bar
braceright
asciitilde
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
exclamdown
cent
sterling
fraction
yen
florin
section
currency
quotesingle
quotedblleft
guillemotleft
guilsinglleft
guilsinglright
fi
fl
.notdef
endash
dagger
daggerdbl
periodcentered
.notdef
paragraph
bullet
quotesinglbase
quotedblbase
quotedblright
guillemotright
ellipsis
perthousand
.notdef
questiondown
.notdef
grave
acute
circumflex
tilde
macron
breve
dotaccent
dieresis
.notdef
ring
cedilla
.notdef
hungarumlaut
ogonek
caron
emdash
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
AE
.notdef
ordfeminine
.notdef
.notdef
.notdef
.notdef
Lslash
Oslash
OE
ordmasculine
.notdef
.notdef
.notdef
.notdef
.notdef
ae
.notdef
.notdef
.notdef
dotlessi
.notdef
.notdef
lslash
oslash
oe
germandbls
.notdef
.notdef
.notdef
.notdef
SHAR_EOF
fi # end of overwriting check
if test -f 'makefont.ps'
then
	echo shar: will not over-write existing file "'makefont.ps'"
else
cat << \SHAR_EOF > 'makefont.ps'
%!
/HersheyBuildDict 10 dict def

/BuildHersheyChar {
	/char exch def
	/fontdict exch def

	/cd fontdict /CharData get fontdict /Encoding get char get get def

	/llx 99 def /lly 99 def /urx -99 def /ury -99 def

	/isx true def

	cd 2 get {
		isx {
			dup 32 eq {
				pop
			} {
				82 sub cd 0 get sub

				dup llx lt {
					dup /llx exch def
				} if
				dup urx gt {
					dup /urx exch def
				} if
				pop

				/isx false def
			} ifelse
		} {
			neg 91 add

			dup lly lt {
				dup /lly exch def
			} if
			dup ury gt {
				dup /ury exch def
			} if
			pop

			/isx true def
		} ifelse
	} forall

	cd 1 get cd 0 get sub 0 llx 1 sub lly 1 sub urx 1 add ury 1 add setcachedevice

	/domove true def
	/isx true def

	cd 2 get {
		isx {
			dup 32 eq {
				pop
				/domove true def
			} {
				82 sub cd 0 get sub
				/isx false def
			} ifelse
		} {
			neg 91 add
			domove {
				moveto
				/domove false def
			} {
				lineto
			} ifelse

			/isx true def
		} ifelse
	} forall


	1 setmiterlimit 1 setlinejoin 1 setlinecap
	fontdict /PenWidth get setlinewidth stroke
} bind def

/MakeHersheyFont {
	10 dict dup begin
	exch /ItalicAngle exch def
	exch /PenWidth exch def
	exch /FontName exch def
	exch /CharData exch def

	/FontType 3 def
	/FontMatrix [1 33 div 0 ItalicAngle neg dup sin exch cos div 33 div 1 33 div 0 0] def

	/Encoding StandardEncoding def
	/BuildChar {HersheyBuildDict begin BuildHersheyChar end} def
	/FontBBox [-10 -10 30 30] def

	FontName end exch definefont
} bind def
SHAR_EOF
fi # end of overwriting check
if test -f 'font.map+'
then
	echo shar: will not over-write existing file "'font.map+'"
else
cat << \SHAR_EOF > 'font.map+'
Hershey-Gothic-English		HerGotEng
Hershey-Gothic-English-Bold	HerGotEngB
Hershey-Gothic-English-Oblique	HerGotEngO
Hershey-Gothic-German		HerGotGer
Hershey-Gothic-German-Bold	HerGotGerB
Hershey-Gothic-German-Oblique	HerGotGerO
Hershey-Gothic-Italian		HerGotIta
Hershey-Gothic-Italian-Bold	HerGotItaB
Hershey-Gothic-Italian-Oblique	HerGotItaO
Hershey-Plain			HerPla
Hershey-Plain-Bold		HerPlaB
Hershey-Plain-Oblique		HerPlaO
Hershey-Script-Complex		HerScrCom
Hershey-Script-Complex-Bold	HerScrComB
Hershey-Script-Complex-Oblique	HerScrComO
Hershey-Script-Simplex		HerScrSim
Hershey-Script-Simplex-Bold	HerScrSimB
Hershey-Script-Simplex-Oblique	HerScrSimO
Hershey-Triplex			HerTri
Hershey-Triplex-Bold		HerTriB
Hershey-Triplex-Bold-Italic	HerTriBI
Hershey-Triplex-Italic		HerTriI
SHAR_EOF
fi # end of overwriting check
if test -f 'morefonts'
then
	echo shar: will not over-write existing file "'morefonts'"
else
cat << \SHAR_EOF > 'morefonts'
MOREFONTS = ht Ht hT HT hp Hp hP ge Ge gE sc Sc sC gg Gg gG gi Gi gI ss Ss sS
SHAR_EOF
fi # end of overwriting check
if test -f 'HerGotEng.sel'
then
	echo shar: will not over-write existing file "'HerGotEng.sel'"
else
cat << \SHAR_EOF > 'HerGotEng.sel'
longname	Hershey-Gothic-English
shortname	HerGotEng
troffname	ge
penwidth	0.6
#
space		3698
.notdef		735
a		3601
b		3602
c		3603
d		3604
e		3605
f		3606
g		3607
h		3608
i		3609
j		3610
k		3611
l		3612
m		3613
n		3614
o		3615
p		3616
q		3617
r		3618
s		3619
t		3620
u		3621
v		3622
w		3623
x		3624
y		3625
z		3626
A		3501
B		3502
C		3503
D		3504
E		3505
F		3506
G		3507
H		3508
I		3509
J		3510
K		3511
L		3512
M		3513
N		3514
O		3515
P		3516
Q		3517
R		3518
S		3519
T		3520
U		3521
V		3522
W		3523
X		3524
Y		3525
Z		3526
zero		3700
one		3701
two		3702
three		3703
four		3704
five		3705
six		3706
seven		3707
eight		3708
nine		3709
period		3710
comma		3711
colon		3712
semicolon	3713
exclam		3714
question	3715
quotesingle	3727
dollar		3719
slash		802
backslash	804
parenleft	3721
parenright	3722
bar		723
hyphen		224
plus		3725
equal		3726
asterisk	3723
periodcentered	729
quoteleft	3716
quoteright	3717
numbersign	733
ampersand	3718
bullet		751
bracketleft	1405
bracketright	1406
braceleft	1407
braceright	1408
asciitilde	2246
asciicircum	2247
less		2241
greater		2242
at		2273
percent		2271
section		2276
quotedbl	3728
tilde		1246
dagger		2277
daggerdbl	2278
SHAR_EOF
fi # end of overwriting check
if test -f 'HerGotEngB.sel'
then
	echo shar: will not over-write existing file "'HerGotEngB.sel'"
else
cat << \SHAR_EOF > 'HerGotEngB.sel'
longname	Hershey-Gothic-English-Bold
shortname	HerGotEngB
troffname	Ge
penwidth	2.0
#
space		3698
.notdef		735
a		3601
b		3602
c		3603
d		3604
e		3605
f		3606
g		3607
h		3608
i		3609
j		3610
k		3611
l		3612
m		3613
n		3614
o		3615
p		3616
q		3617
r		3618
s		3619
t		3620
u		3621
v		3622
w		3623
x		3624
y		3625
z		3626
A		3501
B		3502
C		3503
D		3504
E		3505
F		3506
G		3507
H		3508
I		3509
J		3510
K		3511
L		3512
M		3513
N		3514
O		3515
P		3516
Q		3517
R		3518
S		3519
T		3520
U		3521
V		3522
W		3523
X		3524
Y		3525
Z		3526
zero		3700
one		3701
two		3702
three		3703
four		3704
five		3705
six		3706
seven		3707
eight		3708
nine		3709
period		3710
comma		3711
colon		3712
semicolon	3713
exclam		3714
question	3715
quotesingle	3727
dollar		3719
slash		802
backslash	804
parenleft	3721
parenright	3722
bar		723
hyphen		224
plus		3725
equal		3726
asterisk	3723
periodcentered	729
quoteleft	3716
quoteright	3717
numbersign	733
ampersand	3718
bullet		751
bracketleft	1405
bracketright	1406
braceleft	1407
braceright	1408
asciitilde	2246
asciicircum	2247
less		2241
greater		2242
at		2273
percent		2271
section		2276
quotedbl	3728
tilde		1246
dagger		2277
daggerdbl	2278
SHAR_EOF
fi # end of overwriting check
if test -f 'HerGotEngO.sel'
then
	echo shar: will not over-write existing file "'HerGotEngO.sel'"
else
cat << \SHAR_EOF > 'HerGotEngO.sel'
longname	Hershey-Gothic-English-Oblique
shortname	HerGotEngO
troffname	gE
penwidth	0.9
italicangle	-20
#
space		3698
.notdef		735
a		3601
b		3602
c		3603
d		3604
e		3605
f		3606
g		3607
h		3608
i		3609
j		3610
k		3611
l		3612
m		3613
n		3614
o		3615
p		3616
q		3617
r		3618
s		3619
t		3620
u		3621
v		3622
w		3623
x		3624
y		3625
z		3626
A		3501
B		3502
C		3503
D		3504
E		3505
F		3506
G		3507
H		3508
I		3509
J		3510
K		3511
L		3512
M		3513
N		3514
O		3515
P		3516
Q		3517
R		3518
S		3519
T		3520
U		3521
V		3522
W		3523
X		3524
Y		3525
Z		3526
zero		3700
one		3701
two		3702
three		3703
four		3704
five		3705
six		3706
seven		3707
eight		3708
nine		3709
period		3710
comma		3711
colon		3712
semicolon	3713
exclam		3714
question	3715
quotesingle	3727
dollar		3719
slash		802
backslash	804
parenleft	3721
parenright	3722
bar		723
hyphen		224
plus		3725
equal		3726
asterisk	3723
periodcentered	729
quoteleft	3716
quoteright	3717
numbersign	733
ampersand	3718
bullet		751
bracketleft	1405
bracketright	1406
braceleft	1407
braceright	1408
asciitilde	2246
asciicircum	2247
less		2241
greater		2242
at		2273
percent		2271
section		2276
quotedbl	3728
tilde		1246
dagger		2277
daggerdbl	2278
SHAR_EOF
fi # end of overwriting check
if test -f 'HerGotGer.sel'
then
	echo shar: will not over-write existing file "'HerGotGer.sel'"
else
cat << \SHAR_EOF > 'HerGotGer.sel'
longname	Hershey-Gothic-German
shortname	HerGotGer
troffname	gg
penwidth	0.6
#
space		3698
.notdef		735
a		3401
b		3402
c		3403
d		3404
e		3405
f		3406
g		3407
h		3408
i		3409
j		3410
k		3411
l		3412
m		3413
n		3414
o		3415
p		3416
q		3417
r		3418
s		3419
t		3420
u		3421
v		3422
w		3423
x		3424
y		3425
z		3426
germandbls	3429
A		3301
B		3302
C		3303
D		3304
E		3305
F		3306
G		3307
H		3308
I		3309
J		3310
K		3311
L		3312
M		3313
N		3314
O		3315
P		3316
Q		3317
R		3318
S		3319
T		3320
U		3321
V		3322
W		3323
X		3324
Y		3325
Z		3326
zero		3700
one		3701
two		3702
three		3703
four		3704
five		3705
six		3706
seven		3707
eight		3708
nine		3709
period		3710
comma		3711
colon		3712
semicolon	3713
exclam		3714
question	3715
quotesingle	3727
dollar		3719
slash		802
backslash	804
parenleft	3721
parenright	3722
bar		723
hyphen		224
plus		3725
equal		3726
asterisk	3723
periodcentered	729
quoteleft	3716
quoteright	3717
numbersign	733
ampersand	3718
bullet		751
bracketleft	1405
bracketright	1406
braceleft	1407
braceright	1408
asciitilde	2246
asciicircum	2247
less		2241
greater		2242
at		2273
percent		2271
section		2276
quotedbl	3728
tilde		1246
dagger		2277
daggerdbl	2278
SHAR_EOF
fi # end of overwriting check
if test -f 'HerGotGerB.sel'
then
	echo shar: will not over-write existing file "'HerGotGerB.sel'"
else
cat << \SHAR_EOF > 'HerGotGerB.sel'
longname	Hershey-Gothic-German-Bold
shortname	HerGotGerB
troffname	Gg
penwidth	2.0
#
space		3698
.notdef		735
a		3401
b		3402
c		3403
d		3404
e		3405
f		3406
g		3407
h		3408
i		3409
j		3410
k		3411
l		3412
m		3413
n		3414
o		3415
p		3416
q		3417
r		3418
s		3419
t		3420
u		3421
v		3422
w		3423
x		3424
y		3425
z		3426
germandbls	3429
A		3301
B		3302
C		3303
D		3304
E		3305
F		3306
G		3307
H		3308
I		3309
J		3310
K		3311
L		3312
M		3313
N		3314
O		3315
P		3316
Q		3317
R		3318
S		3319
T		3320
U		3321
V		3322
W		3323
X		3324
Y		3325
Z		3326
zero		3700
one		3701
two		3702
three		3703
four		3704
five		3705
six		3706
seven		3707
eight		3708
nine		3709
period		3710
comma		3711
colon		3712
semicolon	3713
exclam		3714
question	3715
quotesingle	3727
dollar		3719
slash		802
backslash	804
parenleft	3721
parenright	3722
bar		723
hyphen		224
plus		3725
equal		3726
asterisk	3723
periodcentered	729
quoteleft	3716
quoteright	3717
numbersign	733
ampersand	3718
bullet		751
bracketleft	1405
bracketright	1406
braceleft	1407
braceright	1408
asciitilde	2246
asciicircum	2247
less		2241
greater		2242
at		2273
percent		2271
section		2276
quotedbl	3728
tilde		1246
dagger		2277
daggerdbl	2278
SHAR_EOF
fi # end of overwriting check
if test -f 'HerGotGerO.sel'
then
	echo shar: will not over-write existing file "'HerGotGerO.sel'"
else
cat << \SHAR_EOF > 'HerGotGerO.sel'
longname	Hershey-Gothic-German-Oblique
shortname	HerGotGerO
troffname	gG
penwidth	0.9
italicangle	-20
#
space		3698
.notdef		735
a		3401
b		3402
c		3403
d		3404
e		3405
f		3406
g		3407
h		3408
i		3409
j		3410
k		3411
l		3412
m		3413
n		3414
o		3415
p		3416
q		3417
r		3418
s		3419
t		3420
u		3421
v		3422
w		3423
x		3424
y		3425
z		3426
germandbls	3429
A		3301
B		3302
C		3303
D		3304
E		3305
F		3306
G		3307
H		3308
I		3309
J		3310
K		3311
L		3312
M		3313
N		3314
O		3315
P		3316
Q		3317
R		3318
S		3319
T		3320
U		3321
V		3322
W		3323
X		3324
Y		3325
Z		3326
zero		3700
one		3701
two		3702
three		3703
four		3704
five		3705
six		3706
seven		3707
eight		3708
nine		3709
period		3710
comma		3711
colon		3712
semicolon	3713
exclam		3714
question	3715
quotesingle	3727
dollar		3719
slash		802
backslash	804
parenleft	3721
parenright	3722
bar		723
hyphen		224
plus		3725
equal		3726
asterisk	3723
periodcentered	729
quoteleft	3716
quoteright	3717
numbersign	733
ampersand	3718
bullet		751
bracketleft	1405
bracketright	1406
braceleft	1407
braceright	1408
asciitilde	2246
asciicircum	2247
less		2241
greater		2242
at		2273
percent		2271
section		2276
quotedbl	3728
tilde		1246
dagger		2277
daggerdbl	2278
SHAR_EOF
fi # end of overwriting check
if test -f 'HerGotIta.sel'
then
	echo shar: will not over-write existing file "'HerGotIta.sel'"
else
cat << \SHAR_EOF > 'HerGotIta.sel'
longname	Hershey-Gothic-Italian
shortname	HerGotIta
troffname	gi
penwidth	0.6
#
space		3698
.notdef		735
a		3901
b		3902
c		3903
d		3904
e		3905
f		3906
g		3907
h		3908
i		3909
j		3910
k		3911
l		3912
m		3913
n		3914
o		3915
p		3916
q		3917
r		3918
s		3919
t		3920
u		3921
v		3922
w		3923
x		3924
y		3925
z		3926
A		3801
B		3802
C		3803
D		3804
E		3805
F		3806
G		3807
H		3808
I		3809
J		3810
K		3811
L		3812
M		3813
N		3814
O		3815
P		3816
Q		3817
R		3818
S		3819
T		3820
U		3821
V		3822
W		3823
X		3824
Y		3825
Z		3826
zero		3700
one		3701
two		3702
three		3703
four		3704
five		3705
six		3706
seven		3707
eight		3708
nine		3709
period		3710
comma		3711
colon		3712
semicolon	3713
exclam		3714
question	3715
quotesingle	3727
dollar		3719
slash		802
backslash	804
parenleft	3721
parenright	3722
bar		723
hyphen		224
plus		3725
equal		3726
asterisk	3723
periodcentered	729
quoteleft	3716
quoteright	3717
numbersign	733
ampersand	3718
bullet		751
bracketleft	1405
bracketright	1406
braceleft	1407
braceright	1408
asciitilde	2246
asciicircum	2247
less		2241
greater		2242
at		2273
percent		2271
section		2276
quotedbl	3728
tilde		1246
dagger		2277
daggerdbl	2278
SHAR_EOF
fi # end of overwriting check
if test -f 'HerGotItaB.sel'
then
	echo shar: will not over-write existing file "'HerGotItaB.sel'"
else
cat << \SHAR_EOF > 'HerGotItaB.sel'
longname	Hershey-Gothic-Italian-Bold
shortname	HerGotItaB
troffname	Gi
penwidth	2.0
#
space		3698
.notdef		735
a		3901
b		3902
c		3903
d		3904
e		3905
f		3906
g		3907
h		3908
i		3909
j		3910
k		3911
l		3912
m		3913
n		3914
o		3915
p		3916
q		3917
r		3918
s		3919
t		3920
u		3921
v		3922
w		3923
x		3924
y		3925
z		3926
A		3801
B		3802
C		3803
D		3804
E		3805
F		3806
G		3807
H		3808
I		3809
J		3810
K		3811
L		3812
M		3813
N		3814
O		3815
P		3816
Q		3817
R		3818
S		3819
T		3820
U		3821
V		3822
W		3823
X		3824
Y		3825
Z		3826
zero		3700
one		3701
two		3702
three		3703
four		3704
five		3705
six		3706
seven		3707
eight		3708
nine		3709
period		3710
comma		3711
colon		3712
semicolon	3713
exclam		3714
question	3715
quotesingle	3727
dollar		3719
slash		802
backslash	804
parenleft	3721
parenright	3722
bar		723
hyphen		224
plus		3725
equal		3726
asterisk	3723
periodcentered	729
quoteleft	3716
quoteright	3717
numbersign	733
ampersand	3718
bullet		751
bracketleft	1405
bracketright	1406
braceleft	1407
braceright	1408
asciitilde	2246
asciicircum	2247
less		2241
greater		2242
at		2273
percent		2271
section		2276
quotedbl	3728
tilde		1246
dagger		2277
daggerdbl	2278
SHAR_EOF
fi # end of overwriting check
if test -f 'HerGotItaO.sel'
then
	echo shar: will not over-write existing file "'HerGotItaO.sel'"
else
cat << \SHAR_EOF > 'HerGotItaO.sel'
longname	Hershey-Gothic-Italian-Oblique
shortname	HerGotItaO
troffname	gI
penwidth	0.9
italicangle	-20
#
space		3698
.notdef		735
a		3901
b		3902
c		3903
d		3904
e		3905
f		3906
g		3907
h		3908
i		3909
j		3910
k		3911
l		3912
m		3913
n		3914
o		3915
p		3916
q		3917
r		3918
s		3919
t		3920
u		3921
v		3922
w		3923
x		3924
y		3925
z		3926
A		3801
B		3802
C		3803
D		3804
E		3805
F		3806
G		3807
H		3808
I		3809
J		3810
K		3811
L		3812
M		3813
N		3814
O		3815
P		3816
Q		3817
R		3818
S		3819
T		3820
U		3821
V		3822
W		3823
X		3824
Y		3825
Z		3826
zero		3700
one		3701
two		3702
three		3703
four		3704
five		3705
six		3706
seven		3707
eight		3708
nine		3709
period		3710
comma		3711
colon		3712
semicolon	3713
exclam		3714
question	3715
quotesingle	3727
dollar		3719
slash		802
backslash	804
parenleft	3721
parenright	3722
bar		723
hyphen		224
plus		3725
equal		3726
asterisk	3723
periodcentered	729
quoteleft	3716
quoteright	3717
numbersign	733
ampersand	3718
bullet		751
bracketleft	1405
bracketright	1406
braceleft	1407
braceright	1408
asciitilde	2246
asciicircum	2247
less		2241
greater		2242
at		2273
percent		2271
section		2276
quotedbl	3728
tilde		1246
dagger		2277
daggerdbl	2278
SHAR_EOF
fi # end of overwriting check
if test -f 'HerPla.sel'
then
	echo shar: will not over-write existing file "'HerPla.sel'"
else
cat << \SHAR_EOF > 'HerPla.sel'
longname	Hershey-Plain
shortname	HerPla
troffname	hp
penwidth	0.6
#
space		2698
.notdef		735
a		2601	+1 -1
b		2602	+1 -1
c		2603	+1 -1
d		2604	+1 -1
e		2605	+1 -1
f		2606	+1 -1
g		2607	+1 -1
h		2608	+1 -1
i		2609	+1 -1
j		2610	+1 -1
k		2611	+1 -1
l		2612	+1 -1
m		2613	+1 -1
n		2614	+1 -1
o		2615	+1 -1
p		2616	+1 -1
q		2617	+1 -1
r		2618	+1 -0
s		2619	+1 -1
t		2620	+0 -1
u		2621	+1 -1
v		2622	+1 -1
w		2623	+1 -1
x		2624	+1 -1
y		2625	+1 -1
z		2626	+1 -1
A		2501	+1 -1
B		2502	+1 -1
C		2503	+1 -1
D		2504	+1 -1
E		2505	+1 -1
F		2506	+1 -1
G		2507	+1 -1
H		2508	+1 -1
I		2509	+1 -1
J		2510	+1 -1
K		2511	+1 -1
L		2512	+1 -1
M		2513	+1 -1
N		2514	+1 -1
O		2515	+1 -1
P		2516	+1 -1
Q		2517	+1 -1
R		2518	+1 -1
S		2519	+1 -1
T		2520	+1 -1
U		2521	+1 -1
V		2522	+1 -1
W		2523	+1 -1
X		2524	+1 -1
Y		2525	+1 -1
Z		2526	+1 -1
zero		2700
one		2701
two		2702
three		2703
four		2704
five		2705
six		2706
seven		2707
eight		2708
nine		2709
period		2710
comma		2711
colon		2712
semicolon	2713
exclam		2714
question	2715
quotesingle	2727
dollar		2719
slash		802
backslash	804
parenleft	2721	+0 -2
parenright	2722	+2 -0
bar		723
hyphen		224
plus		2725
equal		2726
asterisk	2723
periodcentered	729
quoteleft	2716
quoteright	2717
numbersign	733
ampersand	2718
bullet		751
bracketleft	1405
bracketright	1406
braceleft	1407
braceright	1408
asciitilde	2246
asciicircum	2247
less		2241
greater		2242
at		2273
percent		2271
section		2276
quotedbl	2728
tilde		1246
dagger		2277
daggerdbl	2278
SHAR_EOF
fi # end of overwriting check
if test -f 'HerPlaB.sel'
then
	echo shar: will not over-write existing file "'HerPlaB.sel'"
else
cat << \SHAR_EOF > 'HerPlaB.sel'
longname	Hershey-Plain-Bold
shortname	HerPlaB
troffname	Hp
penwidth	2.2
#
space		2698
.notdef		735
a		2601	+1 -1
b		2602	+1 -1
c		2603	+1 -1
d		2604	+1 -1
e		2605	+1 -1
f		2606	+1 -1
g		2607	+1 -1
h		2608	+1 -1
i		2609	+1 -1
j		2610	+1 -1
k		2611	+1 -1
l		2612	+1 -1
m		2613	+1 -1
n		2614	+1 -1
o		2615	+1 -1
p		2616	+1 -1
q		2617	+1 -1
r		2618	+1 -0
s		2619	+1 -1
t		2620	+0 -1
u		2621	+1 -1
v		2622	+1 -1
w		2623	+1 -1
x		2624	+1 -1
y		2625	+1 -1
z		2626	+1 -1
A		2501	+1 -1
B		2502	+1 -1
C		2503	+1 -1
D		2504	+1 -1
E		2505	+1 -1
F		2506	+1 -1
G		2507	+1 -1
H		2508	+1 -1
I		2509	+1 -1
J		2510	+1 -1
K		2511	+1 -1
L		2512	+1 -1
M		2513	+1 -1
N		2514	+1 -1
O		2515	+1 -1
P		2516	+1 -1
Q		2517	+1 -1
R		2518	+1 -1
S		2519	+1 -1
T		2520	+1 -1
U		2521	+1 -1
V		2522	+1 -1
W		2523	+1 -1
X		2524	+1 -1
Y		2525	+1 -1
Z		2526	+1 -1
zero		2700
one		2701
two		2702
three		2703
four		2704
five		2705
six		2706
seven		2707
eight		2708
nine		2709
period		2710
comma		2711
colon		2712
semicolon	2713
exclam		2714
question	2715
quotesingle	2727
dollar		2719
slash		802
backslash	804
parenleft	2721	+0 -2
parenright	2722	+2 -0
bar		723
hyphen		224
plus		2725
equal		2726
asterisk	2723
periodcentered	729
quoteleft	2716
quoteright	2717
numbersign	733
ampersand	2718
bullet		751
bracketleft	1405
bracketright	1406
braceleft	1407
braceright	1408
asciitilde	2246
asciicircum	2247
less		2241
greater		2242
at		2273
percent		2271
section		2276
quotedbl	2728
tilde		1246
dagger		2277
daggerdbl	2278
SHAR_EOF
fi # end of overwriting check
if test -f 'HerPlaO.sel'
then
	echo shar: will not over-write existing file "'HerPlaO.sel'"
else
cat << \SHAR_EOF > 'HerPlaO.sel'
longname	Hershey-Plain-Oblique
shortname	HerPlaO
troffname	hP
penwidth	0.8
italicangle	-20
#
space		2698
.notdef		735
a		2601	+1 -1
b		2602	+1 -1
c		2603	+1 -1
d		2604	+1 -1
e		2605	+1 -1
f		2606	+1 -1
g		2607	+1 -1
h		2608	+1 -1
i		2609	+1 -1
j		2610	+1 -1
k		2611	+1 -1
l		2612	+1 -1
m		2613	+1 -1
n		2614	+1 -1
o		2615	+1 -1
p		2616	+1 -1
q		2617	+1 -1
r		2618	+1 -0
s		2619	+1 -1
t		2620	+0 -1
u		2621	+1 -1
v		2622	+1 -1
w		2623	+1 -1
x		2624	+1 -1
y		2625	+1 -1
z		2626	+1 -1
A		2501	+1 -1
B		2502	+1 -1
C		2503	+1 -1
D		2504	+1 -1
E		2505	+1 -1
F		2506	+1 -1
G		2507	+1 -1
H		2508	+1 -1
I		2509	+1 -1
J		2510	+1 -1
K		2511	+1 -1
L		2512	+1 -1
M		2513	+1 -1
N		2514	+1 -1
O		2515	+1 -1
P		2516	+1 -1
Q		2517	+1 -1
R		2518	+1 -1
S		2519	+1 -1
T		2520	+1 -1
U		2521	+1 -1
V		2522	+1 -1
W		2523	+1 -1
X		2524	+1 -1
Y		2525	+1 -1
Z		2526	+1 -1
zero		2700
one		2701
two		2702
three		2703
four		2704
five		2705
six		2706
seven		2707
eight		2708
nine		2709
period		2710
comma		2711
colon		2712
semicolon	2713
exclam		2714
question	2715
quotesingle	2727
dollar		2719
slash		802
backslash	804
parenleft	2721	+0 -2
parenright	2722	+2 -0
bar		723
hyphen		224
plus		2725
equal		2726
asterisk	2723
periodcentered	729
quoteleft	2716
quoteright	2717
numbersign	733
ampersand	2718
bullet		751
bracketleft	1405
bracketright	1406
braceleft	1407
braceright	1408
asciitilde	2246
asciicircum	2247
less		2241
greater		2242
at		2273
percent		2271
section		2276
quotedbl	2728
tilde		1246
dagger		2277
daggerdbl	2278
SHAR_EOF
fi # end of overwriting check
if test -f 'HerScrCom.sel'
then
	echo shar: will not over-write existing file "'HerScrCom.sel'"
else
cat << \SHAR_EOF > 'HerScrCom.sel'
longname	Hershey-Script-Complex
shortname	HerScrCom
troffname	sc
penwidth	0.5
#
space		2748
.notdef		735
a		2651	+1 -0
b		2652
c		2653	+1 -0
d		2654
e		2655
f		2656
g		2657
h		2658
i		2659	+1 -0
j		2660
k		2661
l		2662
m		2663
n		2664
o		2665	+1 -0
p		2666
q		2667
r		2668
s		2669
t		2670
u		2671	+1 -0
v		2672	+1 -0
w		2673
x		2674
y		2675	+1 -0
z		2676
A		2551
B		2552
C		2553
D		2554
E		2555
F		2556
G		2557
H		2558
I		2559
J		2560
K		2561
L		2562
M		2563
N		2564
O		2565
P		2566
Q		2567
R		2568
S		2569
T		2570
U		2571
V		2572
W		2573
X		2574
Y		2575
Z		2576
zero		2750
one		2751
two		2752
three		2753
four		2754
five		2755
six		2756
seven		2757
eight		2758
nine		2759
period		2760
comma		2761
colon		2762
semicolon	2763
exclam		2764
question	2765
quotesingle	2777
dollar		2769
slash		802
backslash	804
parenleft	2771	+0 -1
parenright	2772	+1 -0
bar		723
hyphen		224
plus		2725
equal		2726
asterisk	2773
periodcentered	729
quoteleft	2766
quoteright	2767
numbersign	733
ampersand	734
bullet		751	
bracketleft	1405
bracketright	1406
braceleft	1407
braceright	1408
asciitilde	2246
asciicircum	2247
less		2241
greater		2242
at		2273
percent		2271
section		2276
quotedbl	2778
tilde		1246
dagger		2277
daggerdbl	2278
SHAR_EOF
fi # end of overwriting check
if test -f 'HerScrComB.sel'
then
	echo shar: will not over-write existing file "'HerScrComB.sel'"
else
cat << \SHAR_EOF > 'HerScrComB.sel'
longname	Hershey-Script-Complex-Bold
shortname	HerScrComB
troffname	Sc
penwidth	2.2
#
space		2748
.notdef		735
a		2651
b		2652
c		2653
d		2654
e		2655
f		2656
g		2657
h		2658
i		2659
j		2660
k		2661
l		2662
m		2663
n		2664
o		2665
p		2666
q		2667
r		2668
s		2669
t		2670
u		2671
v		2672
w		2673
x		2674
y		2675
z		2676
A		2551
B		2552
C		2553
D		2554
E		2555
F		2556
G		2557
H		2558
I		2559
J		2560
K		2561
L		2562
M		2563
N		2564
O		2565
P		2566
Q		2567
R		2568
S		2569
T		2570
U		2571
V		2572
W		2573
X		2574
Y		2575
Z		2576
zero		2750
one		2751
two		2752
three		2753
four		2754
five		2755
six		2756
seven		2757
eight		2758
nine		2759
period		2760
comma		2761
colon		2762
semicolon	2763
exclam		2764
question	2765
quotesingle	2777
dollar		2769
slash		802
backslash	804
parenleft	2771
parenright	2772
bar		723
hyphen		224
plus		2725
equal		2726
asterisk	2773
periodcentered	729
quoteleft	2766
quoteright	2767
numbersign	733
ampersand	734
bullet		751	
bracketleft	1405
bracketright	1406
braceleft	1407
braceright	1408
asciitilde	2246
asciicircum	2247
less		2241
greater		2242
at		2273
percent		2271
section		2276
quotedbl	2778
tilde		1246
dagger		2277
daggerdbl	2278
SHAR_EOF
fi # end of overwriting check
if test -f 'HerScrComO.sel'
then
	echo shar: will not over-write existing file "'HerScrComO.sel'"
else
cat << \SHAR_EOF > 'HerScrComO.sel'
longname	Hershey-Script-Complex-Oblique
shortname	HerScrComO
troffname	sC
penwidth	1.0
italicangle	-30
#
space		2748
.notdef		735
a		2651
b		2652
c		2653
d		2654
e		2655
f		2656
g		2657
h		2658
i		2659
j		2660
k		2661
l		2662
m		2663
n		2664
o		2665
p		2666
q		2667
r		2668
s		2669
t		2670
u		2671
v		2672
w		2673
x		2674
y		2675
z		2676
A		2551
B		2552
C		2553
D		2554
E		2555
F		2556
G		2557
H		2558
I		2559
J		2560
K		2561
L		2562
M		2563
N		2564
O		2565
P		2566
Q		2567
R		2568
S		2569
T		2570
U		2571
V		2572
W		2573
X		2574
Y		2575
Z		2576
zero		2750
one		2751
two		2752
three		2753
four		2754
five		2755
six		2756
seven		2757
eight		2758
nine		2759
period		2760
comma		2761
colon		2762
semicolon	2763
exclam		2764
question	2765
quotesingle	2777
dollar		2769
slash		802
backslash	804
parenleft	2771
parenright	2772
bar		723
hyphen		224
plus		2725
equal		2726
asterisk	2773
periodcentered	729
quoteleft	2766
quoteright	2767
numbersign	733
ampersand	734
bullet		751	
bracketleft	1405
bracketright	1406
braceleft	1407
braceright	1408
asciitilde	2246
asciicircum	2247
less		2241
greater		2242
at		2273
percent		2271
section		2276
quotedbl	2778
tilde		1246
dagger		2277
daggerdbl	2278
SHAR_EOF
fi # end of overwriting check
if test -f 'HerScrSim.sel'
then
	echo shar: will not over-write existing file "'HerScrSim.sel'"
else
cat << \SHAR_EOF > 'HerScrSim.sel'
longname	Hershey-Script-Simplex
shortname	HerScrSim
troffname	ss
penwidth	0.5
#
space		698
.notdef		735
a		651
b		652
c		653
d		654
e		655
f		656
g		657
h		658
i		659
j		660
k		661
l		662
m		663
n		664
o		665
p		666
q		667
r		668
s		669
t		670
u		671
v		672
w		673
x		674
y		675
z		676
A		551
B		552
C		553
D		554
E		555
F		556
G		557
H		558
I		559
J		560
K		561
L		562
M		563
N		564
O		565
P		566
Q		567
R		568
S		569
T		570
U		571
V		572
W		573
X		574
Y		575
Z		576
zero		700
one		701
two		702
three		703
four		704
five		705
six		706
seven		707
eight		708
nine		709
period		710
comma		711
colon		712
semicolon	713
exclam		714
question	715
quotesingle	716
dollar		719
slash		802
backslash	804
parenleft	721
parenright	722
bar		723
hyphen		224
plus		725
equal		726
asterisk	728
periodcentered	729
quoteleft	730
quoteright	731
numbersign	733
ampersand	734
bullet		751	
bracketleft	1405
bracketright	1406
braceleft	1407
braceright	1408
asciitilde	2246
asciicircum	2247
less		2241
greater		2242
at		2273
percent		2271
section		2276
quotedbl	717
tilde		1246
dagger		2277
daggerdbl	2278
SHAR_EOF
fi # end of overwriting check
if test -f 'HerScrSimB.sel'
then
	echo shar: will not over-write existing file "'HerScrSimB.sel'"
else
cat << \SHAR_EOF > 'HerScrSimB.sel'
longname	Hershey-Script-Simplex-Bold
shortname	HerScrSimB
troffname	Ss
penwidth	2.2
#
space		698
.notdef		735
a		651
b		652
c		653
d		654
e		655
f		656
g		657
h		658
i		659
j		660
k		661
l		662
m		663
n		664
o		665
p		666
q		667
r		668
s		669
t		670
u		671
v		672
w		673
x		674
y		675
z		676
A		551
B		552
C		553
D		554
E		555
F		556
G		557
H		558
I		559
J		560
K		561
L		562
M		563
N		564
O		565
P		566
Q		567
R		568
S		569
T		570
U		571
V		572
W		573
X		574
Y		575
Z		576
zero		700
one		701
two		702
three		703
four		704
five		705
six		706
seven		707
eight		708
nine		709
period		710
comma		711
colon		712
semicolon	713
exclam		714
question	715
quotesingle	716
dollar		719
slash		802
backslash	804
parenleft	721
parenright	722
bar		723
hyphen		224
plus		725
equal		726
asterisk	728
periodcentered	729
quoteleft	730
quoteright	731
numbersign	733
ampersand	734
bullet		751	
bracketleft	1405
bracketright	1406
braceleft	1407
braceright	1408
asciitilde	2246
asciicircum	2247
less		2241
greater		2242
at		2273
percent		2271
section		2276
quotedbl	717
tilde		1246
dagger		2277
daggerdbl	2278
SHAR_EOF
fi # end of overwriting check
if test -f 'HerScrSimO.sel'
then
	echo shar: will not over-write existing file "'HerScrSimO.sel'"
else
cat << \SHAR_EOF > 'HerScrSimO.sel'
longname	Hershey-Script-Simplex-Oblique
shortname	HerScrSimO
troffname	sS
penwidth	0.7
italicangle	-30
#
space		698
.notdef		735
a		651
b		652
c		653
d		654
e		655
f		656
g		657
h		658
i		659
j		660
k		661
l		662
m		663
n		664
o		665
p		666
q		667
r		668
s		669
t		670
u		671
v		672
w		673
x		674
y		675
z		676
A		551
B		552
C		553
D		554
E		555
F		556
G		557
H		558
I		559
J		560
K		561
L		562
M		563
N		564
O		565
P		566
Q		567
R		568
S		569
T		570
U		571
V		572
W		573
X		574
Y		575
Z		576
zero		700
one		701
two		702
three		703
four		704
five		705
six		706
seven		707
eight		708
nine		709
period		710
comma		711
colon		712
semicolon	713
exclam		714
question	715
quotesingle	716
dollar		719
slash		802
backslash	804
parenleft	721
parenright	722
bar		723
hyphen		224
plus		725
equal		726
asterisk	728
periodcentered	729
quoteleft	730
quoteright	731
numbersign	733
ampersand	734
bullet		751	
bracketleft	1405
bracketright	1406
braceleft	1407
braceright	1408
asciitilde	2246
asciicircum	2247
less		2241
greater		2242
at		2273
percent		2271
section		2276
quotedbl	717
tilde		1246
dagger		2277
daggerdbl	2278
SHAR_EOF
fi # end of overwriting check
if test -f 'HerTri.sel'
then
	echo shar: will not over-write existing file "'HerTri.sel'"
else
cat << \SHAR_EOF > 'HerTri.sel'
longname	Hershey-Triplex
shortname	HerTri
troffname	ht
penwidth	0.6
#
space		3198
.notdef		735
a		3101	+1 -1
b		3102	+1 -1
c		3103	+1 -1
d		3104	+1 -0
e		3105	+2 -1
f		3106	+0 -1
g		3107	+1 -1
h		3108	+1 -1
i		3109
j		3110	+2 -1
k		3111
l		3112
m		3113	+0 -1
n		3114	+0 -1
o		3115	+2 -1
p		3116	+0 -1
q		3117	+1 -0
r		3118
s		3119	+1 -1
t		3120	+1 -0
u		3121	+1 -1
v		3122
w		3123
x		3124
y		3125	+1 -0
z		3126
A		3001
B		3002
C		3003
D		3004
E		3005	+0 -1
F		3006
G		3007
H		3008
I		3009
J		3010
K		3011
L		3012
M		3013
N		3014
O		3015	+1 -1
P		3016	+0 -1
Q		3017
R		3018
S		3019	+1 -1
T		3020
U		3021
V		3022
W		3023
X		3024
Y		3025
Z		3026
zero		3200
one		3201
two		3202
three		3203
four		3204
five		3205
six		3206
seven		3207
eight		3208
nine		3209
period		3210
comma		3211
colon		3212
semicolon	3213
exclam		3214
question	3215
quotesingle	3227
dollar		3219
slash		802
backslash	804
parenleft	3221	+0 -1
parenright	3222	+1 -0
bar		723
hyphen		224
plus		3225
equal		3226
asterisk	3223
periodcentered	729
quoteleft	3216
quoteright	3217
numbersign	733
ampersand	3218
bullet		751
bracketleft	1405
bracketright	1406
braceleft	1407
braceright	1408
asciitilde	2246
asciicircum	2247
less		2241
greater		2242
at		2273
percent		2271
section		2276
quotedbl	3228
tilde		1246
dagger		2277
daggerdbl	2278
SHAR_EOF
fi # end of overwriting check
if test -f 'HerTriB.sel'
then
	echo shar: will not over-write existing file "'HerTriB.sel'"
else
cat << \SHAR_EOF > 'HerTriB.sel'
longname	Hershey-Triplex-Bold
shortname	HerTriB
troffname	Ht
penwidth	2.1
#
space		3198
.notdef		735
a		3101	+1 -1
b		3102	+1 -1
c		3103	+1 -1
d		3104	+1 -0
e		3105	+2 -1
f		3106	+0 -1
g		3107	+1 -1
h		3108	+1 -1
i		3109
j		3110	+2 -1
k		3111
l		3112
m		3113	+0 -1
n		3114	+0 -1
o		3115	+2 -1
p		3116	+0 -1
q		3117	+1 -0
r		3118
s		3119	+1 -1
t		3120	+1 -0
u		3121	+1 -1
v		3122
w		3123
x		3124
y		3125	+1 -0
z		3126
A		3001
B		3002
C		3003
D		3004
E		3005	+0 -1
F		3006
G		3007
H		3008
I		3009
J		3010
K		3011
L		3012
M		3013
N		3014
O		3015	+1 -1
P		3016	+0 -1
Q		3017
R		3018
S		3019	+1 -1
T		3020
U		3021
V		3022
W		3023
X		3024
Y		3025
Z		3026
zero		3200
one		3201
two		3202
three		3203
four		3204
five		3205
six		3206
seven		3207
eight		3208
nine		3209
period		3210
comma		3211
colon		3212
semicolon	3213
exclam		3214
question	3215
quotesingle	3227
dollar		3219
slash		802
backslash	804
parenleft	3221	+0 -1
parenright	3222	+1 -0
bar		723
hyphen		224
plus		3225
equal		3226
asterisk	3223
periodcentered	729
quoteleft	3216
quoteright	3217
numbersign	733
ampersand	3218
bullet		751
bracketleft	1405
bracketright	1406
braceleft	1407
braceright	1408
asciitilde	2246
asciicircum	2247
less		2241
greater		2242
at		2273
percent		2271
section		2276
quotedbl	3228
tilde		1246
dagger		2277
daggerdbl	2278
SHAR_EOF
fi # end of overwriting check
if test -f 'HerTriBI.sel'
then
	echo shar: will not over-write existing file "'HerTriBI.sel'"
else
cat << \SHAR_EOF > 'HerTriBI.sel'
longname	Hershey-Triplex-Bold-Italic
shortname	HerTriBI
troffname	HT
penwidth	2.0
italicangle	-20
#
space		3198
.notdef		735
a		3151	+1 -1
b		3152	+1 -1
c		3153	+1 -1
d		3154	+1 -0
e		3155	+1 -1
f		3156	+0 -1
g		3157	+1 -1
h		3158	+1 -1
i		3159
j		3160	+2 -1
k		3161
l		3162	+1 -0
m		3163	+0 -1
n		3164	+0 -1
o		3165	+2 -1
p		3166	+0 -1
q		3167	+1 -0
r		3168
s		3169
t		3170	+1 -0
u		3171	+1 -0
v		3172	+0 -1
w		3173
x		3174
y		3175
z		3176
A		3051	+0 -1
B		3052
C		3053
D		3054
E		3055	+0 -1
F		3056
G		3057
H		3058
I		3059
J		3060
K		3061
L		3062
M		3063
N		3064
O		3065	+1 -1
P		3066	+0 -1
Q		3067
R		3068
S		3069	+1 -1
T		3070
U		3071
V		3072
W		3073
X		3074
Y		3075
Z		3076
zero		3250
one		3251
two		3252
three		3253
four		3254
five		3255
six		3256
seven		3257
eight		3258
nine		3259
period		3260
comma		3261
colon		3262
semicolon	3263
exclam		3264
question	3265
quotesingle	3277
dollar		3269
slash		802
backslash	804
parenleft	3271	+0 -1
parenright	3272	+1 -0
bar		723
hyphen		224
plus		3275
equal		3276
asterisk	3273
periodcentered	729
quoteleft	3266
quoteright	3267
numbersign	733
ampersand	3268
bullet		751
bracketleft	1405
bracketright	1406
braceleft	1407
braceright	1408
asciitilde	2246
asciicircum	2247
less		2241
greater		2242
at		2273
percent		2271
section		2276
quotedbl	3278
tilde		1246
dagger		2277
daggerdbl	2278
SHAR_EOF
fi # end of overwriting check
if test -f 'HerTriI.sel'
then
	echo shar: will not over-write existing file "'HerTriI.sel'"
else
cat << \SHAR_EOF > 'HerTriI.sel'
longname	Hershey-Triplex-Italic
shortname	HerTriI
troffname	hT
penwidth	0.7
#
space		3198
.notdef		735
a		3151	+1 -1
b		3152	+1 -1
c		3153	+1 -1
d		3154	+1 -0
e		3155	+1 -1
f		3156	+0 -1
g		3157	+1 -1
h		3158	+1 -1
i		3159
j		3160	+2 -1
k		3161
l		3162	+1 -0
m		3163	+0 -1
n		3164	+0 -1
o		3165	+2 -1
p		3166	+0 -1
q		3167	+1 -0
r		3168
s		3169
t		3170	+1 -0
u		3171	+1 -0
v		3172	+0 -1
w		3173
x		3174
y		3175
z		3176
A		3051	+0 -1
B		3052
C		3053
D		3054
E		3055	+0 -1
F		3056
G		3057
H		3058
I		3059
J		3060
K		3061
L		3062
M		3063
N		3064
O		3065	+1 -1
P		3066	+0 -1
Q		3067
R		3068
S		3069	+1 -1
T		3070
U		3071
V		3072
W		3073
X		3074
Y		3075
Z		3076
zero		3250
one		3251
two		3252
three		3253
four		3254
five		3255
six		3256
seven		3257
eight		3258
nine		3259
period		3260
comma		3261
colon		3262
semicolon	3263
exclam		3264
question	3265
quotesingle	3277
dollar		3269
slash		802
backslash	804
parenleft	3271	+0 -1
parenright	3272	+1 -0
bar		723
hyphen		224
plus		3275
equal		3276
asterisk	3273
periodcentered	729
quoteleft	3266
quoteright	3267
numbersign	733
ampersand	3268
bullet		751
bracketleft	1405
bracketright	1406
braceleft	1407
braceright	1408
asciitilde	2246
asciicircum	2247
less		2241
greater		2242
at		2273
percent		2271
section		2276
quotedbl	3278
tilde		1246
dagger		2277
daggerdbl	2278
SHAR_EOF
fi # end of overwriting check
#	End of shell archive
exit 0
12-May-86 19:07:57-PDT,1194;000000000001
Mail-From: REULING created at 12-May-86 19:07:19
Return-Path: <@Cs.Ucl.AC.UK,@serc-icf.engineering.cambridge.ac.uk:PH10@phoenix.cambridge.ac.uk>
Received: from Cs.Ucl.AC.UK by SU-SCORE.ARPA with TCP; Fri 9 May 86 07:32:25-PDT
Received: from serc-icf.engineering.cambridge.ac.uk by 44d.Cs.Ucl.AC.UK 
           via Janet with NIFTP  id a004951; 9 May 86 15:04 BST
Date: Friday, 9 May 1986 15:03:16
To: INFO-POSTSCRIPT <@Cs.Ucl.AC.UK,@cs.ucl.ac.uk:INFO-POSTSCRIPT@su-score.arpa>
Subject: LaserWriter
From: "Cambridge Phoenix - CAM.PHX@CAM.ENG-ICF" <PH10%phoenix.cambridge.ac.uk@Cs.Ucl.AC.UK>
Authentic-sender:   MAIL@CAGA
ReSent-Date: Mon 12 May 86 19:07:19-PDT
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12206234248.16.REULING@SU-SCORE.ARPA>

It appears that the character `bar' (ASCII code 124) in the Times-Roman
font in the LaserWriter Plus is not the same as in the original
LaserWriter. The character is shorter and fatter, though its width
is unaltered. This change is not mentioned in the update document
for the LaserWriter Plus, and seems rather gratuitous.
      Philip Hazel
      University of Cambridge
12-May-86 19:08:20-PDT,1048;000000000001
Mail-From: REULING created at 12-May-86 19:07:35
Return-Path: <micropro!kepler!mojo@lll-crg.ARPA>
Received: from lll-crg.ARPA by SU-SCORE.ARPA with TCP; Mon 12 May 86 12:20:37-PDT
Received: by lll-crg.ARPA id AA25310; Mon, 12 May 86 11:43:15 pdt
	id AA25310; Mon, 12 May 86 11:43:15 pdt
Date: Mon, 12 May 86 11:43:15 pdt
Message-Id: <8605121843.AA25310@lll-crg.ARPA>
To: info-postscript@score.stanford.edu
From: micropro!kepler!mojo@lll-crg.ARPA
Subject: Wanted: an image scan
ReSent-Date: Mon 12 May 86 19:07:34-PDT
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12206234296.16.REULING@SU-SCORE.ARPA>

I have a piece of line art for which I need a PostScript image scan.
Is there anyone in the Bay Area who could make one for me?

Mini tanks...
    __  /        __  /        __  /
 __||||/__    __||||/__    __||||/__
(O_O_O_O_O)  (O_O_O_O_O)  (O_O_O_O_O)

Mojo
... Morris Jones, MicroPro Product Development
{lll-crg,ptsfa,dual,well,pyramid}!micropro!kepler!mojo


12-May-86 19:08:47-PDT,960;000000000001
Mail-From: REULING created at 12-May-86 19:08:11
Return-Path: <BILL@CS.COLUMBIA.EDU>
Received: from CS.COLUMBIA.EDU by SU-SCORE.ARPA with TCP; Mon 5 May 86 10:57:43-PDT
Date: Mon 5 May 86 13:28:09-EDT
From: Bill Schilit <BILL@CS.COLUMBIA.EDU>
Subject: QED in postscript
To: scribe-hacks@UTAH-CS.ARPA
cc: info-postscript@SU-SCORE.ARPA
ReSent-Date: Mon 12 May 86 19:08:11-PDT
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12206234406.16.REULING@SU-SCORE.ARPA>


I'm trying to print the QED symbol (a small box) using scribe 1405,
mathematics10 library, and the laserwriter... but scribe tells me the
character is "unavailable".  So I went to add QED to scribe's
pssymb.fon file but, surprise, QED does not exist in the laserwriter
font manuals I have!

Does anyone know if the QED symbol is available in the laserwriter
or if there is a way to make scribe print one?

- Bill
-------
14-May-86 18:26:50-PDT,1022;000000000001
Mail-From: BARCKLAY created at 14-May-86 18:25:38
Return-Path: <robs%tektools.tek.csnet@CSNET-RELAY.ARPA>
Received: from CSNET-RELAY.ARPA by SU-SCORE.ARPA with TCP; Wed 14 May 86 13:05:07-PDT
Received: from tektronix by csnet-relay.csnet id ae00796; 14 May 86 15:45 EDT
Received: by tektronix.TEK (5.31/6.12)
	id AA27064; Wed, 14 May 86 09:08:15 PDT
Received: by tektools (5.31/5.14)
	id AA22400; Wed, 14 May 86 09:07:28 PDT
Message-Id: <8605141607.AA22400@tektools>
To: info-postscript@SU-SCORE.ARPA
Subject: troff font files for LW+
Date: 14 May 86 09:07:26 PDT (Wed)
From: robs%tektools.tek.csnet@CSNET-RELAY.ARPA
ReSent-Date: Wed 14 May 86 18:25:38-PDT
ReSent-From: Bob Barcklay <BARCKLAY@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12206750950.16.BARCKLAY@SU-SCORE.ARPA>


Does anyone have the troff font description files that correspond
to the new fonts available in the LaserWriter Plus, or know where
they can be had ?

				Robert Sleator
				tektronix!tektools!robs
14-May-86 18:28:07-PDT,1677;000000000001
Mail-From: BARCKLAY created at 14-May-86 18:26:02
Return-Path: <wm%tekchips.tek.csnet@CSNET-RELAY.ARPA>
Received: from CSNET-RELAY.ARPA by SU-SCORE.ARPA with TCP; Wed 14 May 86 13:06:11-PDT
Received: from tektronix by csnet-relay.csnet id ag00796; 14 May 86 15:46 EDT
Received: by tektronix.TEK (5.31/6.12)
	id AA29061; Wed, 14 May 86 09:42:52 PDT
Received: by tekchips (5.31/5.14)
	id AA24037; Wed, 14 May 86 09:45:58 PDT
Message-Id: <8605141645.AA24037@tekchips>
To: info-postscript@SU-SCORE.ARPA
Subject: The popular press rides again
Date: 14 May 86 09:45:55 PDT (Wed)
From: Wm Leler <wm%tekchips.tek.csnet@CSNET-RELAY.ARPA>
ReSent-Date: Wed 14 May 86 18:26:02-PDT
ReSent-From: Bob Barcklay <BARCKLAY@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12206751022.16.BARCKLAY@SU-SCORE.ARPA>

The following quote is from the Comdex conference daily newpaper:

 A laser printer development spotted by Camilo Wilson, president
 of Lifetree Software, is that the Hewlett-Packard control
 language is emerging as a de facto standard, ``largely because
 the HP control language is non-proprietary,'' he said.
 PostScript, the control language embedded in Apple's Laserwriter
 printer is proprietary -- a fact that Wilson thinks is
 responsible for few laser printers standardizing on PostScript.

No flames please -- I know the PostScript language is completely
non-proprietary, but apparently many people don't (and some
people don't bother to get their facts straight!).  The above
quote was shown to me by a friend who works for the laser
printer division of HP.  They were showing it around the office
for a good giggle.

Wm
