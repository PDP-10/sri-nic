 8-Nov-85 18:32:13-PST,1226;000000000001
Return-Path: <ANJA@SU-SIERRA.ARPA>
Received: from SU-SIERRA.ARPA by SU-SCORE.ARPA with TCP; Fri 8 Nov 85 18:32:12-PST
Date: Fri 8 Nov 85 18:31:33-PST
From: Angela Baldo <Anja@SU-SIERRA.ARPA>
Subject: Printing Macintosh files on a Laserwriter connected to a mainframe
To: info-postscript@SU-SCORE.ARPA

I don't know if this is the proper place to post this, but I am
willing to give anything a shot.

At EE-CF we have a laserwriter hooked up to Fuji (a vax running Unix).
The connection is ordinary serial line protocol.

My question is this: Is there any way to print MacWrite, MacPaint,
MacChart, etc. files on the laserwriter?  (by putting them into some
form of PostScript that the printer can understand) Printing MacPaint
files which have been untouched since downloading does not work.  I
have not tried MacWrite.

There is a program (on Sierra, called "Macimp") which will take
MacPaint files and translate them into Imprint10 so that they can be
printed on a Canon.  Is there any such analogous program to translate
the files into PostScript?

Several professors who have received Macintoshes have asked this.


Thanks, for any help/enlightenment you are able to give.


		anja
-------
10-Nov-85 17:51:30-PST,1538;000000000000
Return-Path: <ANJA@SU-SIERRA.ARPA>
Received: from SU-SIERRA.ARPA by SU-SCORE.ARPA with TCP; Sun 10 Nov 85 17:51:22-PST
Date: Sun 10 Nov 85 17:51:01-PST
From: Angela Baldo <Anja@SU-SIERRA.ARPA>
Subject: [Angela Baldo <Anja@SU-SIERRA.ARPA>: Printing Macintosh files on a Laserwriter connected to a mainframe]
To: info-postscript@SU-SCORE.ARPA

I have been advised to repost this message, since when I originally sent it
there were few people on the list.  Sorry if you've already seen it.

                ---------------

Subject: Printing Macintosh files on a Laserwriter connected to a mainframe

I don't know if this is the proper place to post this, but I am
willing to give anything a shot.

At EE-CF we have a laserwriter hooked up to Fuji (a vax running Unix).
The connection is ordinary serial line protocol.

My question is this: Is there any way to print MacWrite, MacPaint,
MacChart, etc. files on the laserwriter?  (by putting them into some
form of PostScript that the printer can understand) Printing MacPaint
files which have been untouched since downloading does not work.  I
have not tried MacWrite.

There is a program (on Sierra, called "Macimp") which will take
MacPaint files and translate them into Imprint10 so that they can be
printed on a Canon.  Is there any such analogous program to translate
the files into PostScript?

Several professors who have received Macintoshes have asked this.


Thanks, for any help/enlightenment you are able to give.


		anja
-------
-------
10-Nov-85 23:30:26-PST,1358;000000000000
Return-Path: <reid@glacier>
Received: from glacier by SU-SCORE.ARPA with TCP; Sun 10 Nov 85 23:30:20-PST
Received: by glacier with Sendmail; Sun, 10 Nov 85 23:29:48 pst
Date: 10 Nov 1985 2329-PST (Sunday)
From: Brian Reid <reid@glacier>
To: Angela Baldo <Anja@SU-SIERRA.ARPA>
Cc: info-postscript@SU-SCORE.ARPA
Subject: Re: Printing Macintosh files on a Laserwriter connected to ...
In-Reply-To: Angela Baldo <Anja@SU-SIERRA.ARPA> / Sun 10 Nov 85 17:51:01-PST.

This is not so much a Postscript problem as it is a Macintosh problem.
The question has been answered several times on the INFO-MAC mailing
list; archives of INFO-MAC are kept online on SUMEX, and I assume that
the moderator of INFO-MAC can make one of the copies of the answer
available to you. The summary of the answer is that it is more or less
possible to print Macintosh output on a laserwriter connected to a
mainframe, but that you have to be very careful because a number of
things don't work very well. The reason that they don't work very well
is that (a) the Macintosh uses 8-bit characters in the Postscript files
that it produces, which don't sit well with many conversion programs,
and (b) the Macintosh uses some proprietary bit-smoothing algorithms,
which it downloads into the LaserWriter in encrypted assembly code, in
printing certain kinds of output.

11-Nov-85 09:18:36-PST,1302;000000000000
Return-Path: <PALLAS@SU-SUSHI.ARPA>
Received: from SU-SUSHI.ARPA by SU-SCORE.ARPA with TCP; Mon 11 Nov 85 09:18:28-PST
Date: Mon 11 Nov 85 09:18:15-PST
From: Joseph I. Pallas <PALLAS@SU-SUSHI.ARPA>
Subject: document inclusions
To: info-postscript@SU-SCORE.ARPA
Message-ID: <12158427728.7.PALLAS@SU-SUSHI.ARPA>

It seems apparent that one of the biggest problems with PostScript is
the lack of any standard way to include one PostScript document within
another.  Part of the problem, I believe, is in the fact that PS is a
page description language rather than an image description language --
hence, explicit instructions must be included for positioning an image
on the page and indicating the end of a page.  These are the two
problems that arise when attempting to nest PS documents.

Has anyone given any thought to this matter or developed any
approaches to dealing with it?  One solution to the end of page
problem is to provide the inclusion with an environment in which
/showpage is bound to a null procedure.  I'd like to hear of any
approaches to either problem.

Those of us who would like to use PS printers for all our document
needs will need to solve these problems if we want to use a variety of
non-integrated tools in producing our documents.

joe
-------
11-Nov-85 13:16:53-PST,958;000000000000
Return-Path: <EVAN@SU-CSLI.ARPA>
Received: from SU-CSLI.ARPA by SU-SCORE.ARPA with TCP; Mon 11 Nov 85 13:16:43-PST
Date: Mon 11 Nov 85 11:20:14-PST
From: Evan Kirshenbaum <evan@SU-CSLI.ARPA>
Subject: Re: document inclusions
To: PALLAS@SU-SUSHI.ARPA
cc: info-postscript@SU-SCORE.ARPA, evan@SU-CSLI.ARPA
In-Reply-To: Message from "Joseph I. Pallas <PALLAS@SU-SUSHI.ARPA>" of Mon 11 Nov 85 09:39:04-PST

We faced this problem (of nesting documents) when writing a header for
printing generalized postscript files in landscape (two to a page).  The
best solution we found (which seems workable) is simply to get the current
deffinition for showpage out of the dictionary stack, save it in your own
dictionary as OLDSHOWPAGE, and redefine showpage to do what you want (calling
the saved procedure when necessary).  Since the version of showpage you saved
was the last one that anyone defined, this should allow arbitrary nesting.

evan
-------
11-Nov-85 14:11:35-PST,1854;000000000000
Return-Path: <trewitt@su-amadeus.arpa>
Received: from su-amadeus.arpa by SU-SCORE.ARPA with TCP; Mon 11 Nov 85 14:11:18-PST
Received: by su-amadeus.arpa with TCP; Mon, 11 Nov 85 14:16:00 pst
Date: 11 Nov 1985 1415-PST (Monday)
From: Glenn Trewitt <trewitt@su-amadeus.arpa>
To: scribe-hacks@utah-cs, info-postscript@su-score
Cc: Glenn Trewitt <trewitt@su-amadeus.arpa>
Subject: Scribe access to PostScript Accented characters

I have generated the required Scribe database files to get PostScript's
accented characters.  What I did is:
	Generate a new encoding vector that maps the accented
	characters into the ASCII alphabetic slots.  (all but two,
	since there's 28 accented characters and only 26 letters)
	This bit of PostScript gets appended to the Scribe
	DeviceInitialization string.

	Defined strings ala SpecialCharacters for the new characters.

	Defined .raw font files for the accented fonts.

	Added the facecode "A" to get to the accented fonts,
	appropriate for BodyFont and HeadingFont.

The new header is about 2000 bytes longer than the original 870-byte
header.  The new fonts use up about 7K of PostScript VM, about 4% of
the available VM on a LaserWriter.

This will allow accents in regular text and headings.  I could not
figure out a way to get bolding and italic to work.  (One approach
would have been to fill in the ASCII characters from 0-31 with the
accented characters, but 32 isn't enough slots for the 56 available
accented characters.)  As it is, the CAPITALIZE environment attribute
will raise the case of all but two of the accented characters.  Sigh!

I will post these files one at a time.
	accent.lib	@string defs and DeviceInitialization
	accent.raw	width information
	xxx.fon		.fon modifications to include facecode A

	- Glenn

P.S. Sorry about the earlier mis-posting.
11-Nov-85 19:41:45-PST,2964;000000000000
Return-Path: <reid@glacier>
Received: from glacier by SU-SCORE.ARPA with TCP; Mon 11 Nov 85 19:41:34-PST
Received: by glacier with Sendmail; Mon, 11 Nov 85 19:40:56 pst
Date: 11 Nov 1985 1940-PST (Monday)
From: Brian Reid <reid@glacier>
To: info-postscript@score
Cc: 
Subject: diagnostic PS hack

Here's a PostScript hack for diagnosing complex documents. If you drop
it into any environment, anywhere, it figures out the current
coordinate system and prints a grid overlaying the page that labels the
page in the current coordinate system. I've been meaning to integrate
it with an errorhandler so that it can be automatically invoked if
something goes wrong. 

I call this file PScoords.ps. I don't have a %! on it because I usually
use it by inserting it into a file that didn't print and then printing
the file a second time.

% This PS file defines some functions that look around, find the current
% coordinate system and clipping region, and draw a coordinate grid
% for it. Just drop it in to any PS context and it will cope.
%
% Brian Reid, Stanford
% April 1985

/Gdict 50 dict def Gdict begin
/Courier findfont 7 scalefont setfont
/rawshow {gsave
   currentpoint translate 0 0 transform
   /cm matrix currentmatrix def
   /ang 1 0 dtransform neg exch atan def
   initmatrix ang rotate itransform translate
   show
grestore} def

/rawstroke {
   /cm matrix currentmatrix def
   initmatrix stroke
   cm setmatrix
} def

/showgrid
{gsave
  2 setlinecap  0 setgray
  /y ymin def
  /ycount ymax ymin sub yincr idiv 1 add def
  ycount {newpath
    [3 3] 0 setdash
    y 0.0 eq {2 setlinewidth}{0.5 setlinewidth} ifelse
    xmin y moveto
    xmax y lineto rawstroke
    xorg y yincr 20 div add moveto y 20 string cvs rawshow
    /y y yincr add def
  } repeat
  /x xmin def
  /xcount xmax xmin sub xincr idiv 1 add def
  xcount {newpath
    x ymin moveto
    [10 5] 5 setdash
    x 0.0 eq {2 setlinewidth}{0.5 setlinewidth} ifelse
    x ymin moveto
    x ymax lineto rawstroke
    gsave x xincr 20 div add yorg  translate -90 rotate
        x 20 string cvs 0 0 moveto rawshow
    grestore
    /x x xincr add def
  } repeat
grestore} def

/findgrid {
    clippath pathbbox
    /ymax exch def /xmax exch def /ymin exch def /xmin exch def

    xmax xmin sub 10 div log 0.5 add truncate 10 exch exp /xincr exch def
    ymax ymin sub 10 div log 0.5 add truncate 10 exch exp /yincr exch def
    xincr 1 gt {/xincr xincr round def} if
    yincr 1 gt {/yincr yincr round def} if
    xmin xincr div dup 0 lt {2}{1} ifelse sub truncate
	xincr mul /xmin exch def
    ymin yincr div dup 0 lt {2}{1} ifelse sub truncate
	yincr mul /ymin exch def
} def

/findcenter {
  /xorg xmax xmin sub 2 div xmin add xincr div
	round xincr mul xincr 20 div add def
  /yorg ymax ymin sub 2 div ymin add yincr div
	round yincr mul yincr -20 div add def
} def

findgrid
findcenter
showgrid
end
11-Nov-85 20:26:00-PST,1450;000000000000
Return-Path: <reid@glacier>
Received: from glacier by SU-SCORE.ARPA with TCP; Mon 11 Nov 85 20:25:51-PST
Received: by glacier with Sendmail; Mon, 11 Nov 85 20:25:24 pst
Date: 11 Nov 1985 2025-PST (Monday)
From: Brian Reid <reid@glacier>
To: info-postscript@SU-SCORE
Subject: Re: document inclusions
In-Reply-To: Evan Kirshenbaum <evan@SU-CSLI.ARPA> / 
		Mon 11 Nov 85 11:20:14-PST.

The way I've always looked at this issue is that if it has a "showpage"
operator in it, it's a page description, and if it doesn't have a
"showpage" operator in it, it's an image description. If you want to
traffic in images instead of pages, then you need a program that will
put images onto pages so that they can be printed. If you want to
traffic in pages instead of images, then you need a scheme (such as the
one suggested by Kirshenbaum) for disabling the "showpage" in a page
description so that it can be used as an image description.

If you want to store images instead of pages, then you can define a
Unix command called "ppr", "page print", that works like this:

alias ppr echo " showpage " | cat \!\* - | lpr

You use this just like "lpr", except that it tacks a "showpage" at the
end of every image on its way to the printer. Since by definition an
image is always just one page, a single "showpage" will suffice.
If you believe in other brands of Unix besides BSD, you can do ppr with
a shell script instead of an alias.
12-Nov-85 09:22:31-PST,908;000000000000
Return-Path: <hplabs!allegra!bentley!topaz!uwvax!uwmacc!sumacc@glacier>
Received: from glacier by SU-SCORE.ARPA with TCP; Tue 12 Nov 85 09:22:15-PST
Received: by glacier with Sendmail; Tue, 12 Nov 85 09:20:43 pst
Received: by HP-VENUS id AA12691; Tue, 12 Nov 85 03:13:34 pst
Date: Mon, 11 Nov 85 12:41:42 cst
From: hplabs!allegra!bentley!topaz!uwvax!uwmacc!sumacc@glacier (Rick Keir)
Subject: please add me to this list
Message-Id: <8511111841.AA21831@maccunix.UUCP>
Received: by topaz.rutgers.edu; Mon, 11 Nov 85 19:31:36 est
Received: from uwmacc.UUCP by rsch.wisc.edu; Mon, 11 Nov 85 13:02:51 CST
Received: by maccunix.UUCP (4.12/4.7)
	id AA21831; Mon, 11 Nov 85 12:41:42 cst
Received: from topaz.UUCP by py/garage/bentley.DK; 8511120649
To: allegra!hplabs!glacier!info-postscript@glacier
Cc: sumacc@glacier


My address is {ihnp4,seismo,topaz,allegra}!uwvax!uwmacc!sumacc

Thank you.
12-Nov-85 16:26:00-PST,1490;000000000000
Return-Path: <PALLAS@SU-SUSHI.ARPA>
Received: from SU-SUSHI.ARPA by SU-SCORE.ARPA with TCP; Tue 12 Nov 85 16:25:43-PST
Date: Tue 12 Nov 85 16:25:25-PST
From: Joseph I. Pallas <PALLAS@SU-SUSHI.ARPA>
Subject: Re: document inclusions
To: info-postscript@SU-SCORE.ARPA
In-Reply-To: Message from "Brian Reid <reid@glacier>" of Mon 11 Nov 85 20:25:00-PST
Message-ID: <12158767636.35.PALLAS@SU-SUSHI.ARPA>

The argument that page descriptions and image descriptions are
complementary, while valid, doesn't move us any closer to a solution
to the problem I posed.  As users of PostScript, we need a {\em standard} 
for the inclusion of images within documents.

Also, don't forget about the translation issue.  Brian's
recommendation for an image-to-page translator (tack on a showpage)
assumes that the image is already positioned someplace reasonable
relative to the default coordinate system (which probably includes an
assumption about the page size).  To be included in another document,
an image would need some kind of reference point [everybody that
remembers PressEdit's "solution" to this problem raise your
airsickness bag].

Furthermore, we've seen that the first thing everyone does when
adapting their favorite text or graphics system to produce PostScript
output is to implement an embedded language.  How can we merge these
things together?  The existing file format standards don't go far
enough in this respect, I believe.

Comments?

joe
-------
15-Nov-85 17:32:08-PST,629;000000000000
Return-Path: <primerd!bobsun!bob@mit-eddie.MIT.EDU>
Received: from mit-eddie by SU-SCORE.ARPA with TCP; Fri 15 Nov 85 17:31:36-PST
Received: by mit-eddie (4.12/4.7)
	id AA24405; Fri, 15 Nov 85 20:28:39 est
Received: from bobsun.primerd.uucp by primerd.uucp (2.0/SMI-2.0)
	id AA03342; Fri, 15 Nov 85 19:27:55 est
Return-Path: <bob@bobsun>
Received: by bobsun.primerd.uucp (2.0/SMI-2.0)
	id AA27054; Fri, 15 Nov 85 19:18:33 est
Date: Fri, 15 Nov 85 19:18:33 est
From: primerd!bobsun!bob@mit-eddie.MIT.EDU (Bob Pellegrino)
Message-Id: <8511160018.AA27054@bobsun.primerd.uucp>
To: info-postscript@su-score.arpa

hi,

17-Nov-85 03:23:17-PST,664;000000000000
Return-Path: <unc!brock%unc.csnet@CSNET-RELAY.ARPA>
Received: from CSNET-RELAY.ARPA by SU-SCORE.ARPA with TCP; Sun 17 Nov 85 03:23:05-PST
Received: from unc by csnet-relay.csnet id as10976; 17 Nov 85 6:17 EST
Received: from unc by thorin (4.12/4.7)
	id AA10529; Sat, 16 Nov 85 18:59:52 est
Received: by unc (4.12/4.7)
	id AA11525; Sat, 16 Nov 85 19:00:12 est
Date: Sat, 16 Nov 85 19:00:12 est
From: "J. Dean Brock" <unc!brock%unc.csnet@CSNET-RELAY.ARPA>
Message-Id: <8511170000.AA11525@unc>
To: info-postscript@su-score.arpa
Subject: Request
Cc: brock@unc.CSNET

Could you add
	post-postscript@unc
(on the csnet) to the postscript mailing list.

19-Nov-85 07:59:47-PST,652;000000000000
Return-Path: <cak@Purdue.EDU>
Received: from merlin.Purdue.EDU by SU-SCORE.ARPA with TCP; Tue 19 Nov 85 07:59:30-PST
Message-Id: <8511191559.AA20586@merlin.Purdue.EDU>
Received: by merlin.Purdue.EDU; Tue, 19 Nov 85 10:59:12 EST
To: info-postscript@su-score.arpa
Subject: Two-up troff?
National-Indulgence-Of-The-Day: Baklava
Date: 19 Nov 85 10:59:08 EST (Tue)
From: "Christopher A. Kent" <cak@Purdue.EDU>

Has anyone out there thought about hacking up a ditroff translator that
prints two-up rotated output (like enscript -2r)? I'd like this a lot;
there are times when using nroff | enscript isn't quite nice enough.

chris
----------
20-Nov-85 05:41:42-PST,4350;000000000000
Return-Path: <cak@Purdue.EDU>
Received: from merlin.Purdue.EDU by SU-SCORE.ARPA with TCP; Wed 20 Nov 85 05:41:21-PST
Message-Id: <8511201341.AA00443@merlin.Purdue.EDU>
Received: by merlin.Purdue.EDU; Wed, 20 Nov 85 08:41:10 EST
To: info-postscript@su-score.arpa
Subject: failed mail (lots of it!)
National-Indulgence-Of-The-Day: Baklava
Date: 20 Nov 85 08:41:05 EST (Wed)
From: "Christopher A. Kent" <cak@Purdue.EDU>

Could you check these out, and perhaps arrange the list so that *you*
get these messages?

chris

--------------------
From: enea!erix!erisun!MAILER-DAEMON@seismo.CSS.GOV (Mail Delivery Subsystem)
Subject: Returned mail: User unknown
To: cak@Purdue.EDU
Date: 19 Nov 85 10:59:08 EST (Tue)

   ----- Transcript of session follows -----
550 info-postscript... User unknown

   ----- Unsent message follows -----
Received: by erisun.uucp (2.0/3.14)
	id AA16325; Tue, 19 Nov 85 20:35:03 -0100
Received: by erix.UUCP (4.40/4.7)
	id AA29385; Tue, 19 Nov 85 20:34:13 -0100
Received: by enea.UUCP; Tue, 19 Nov 85 20:19:26 -0100 (MET)
Received: from SU-SCORE.ARPA by seismo.CSS.GOV with SMTP; Tue, 19 Nov 85 11:02:03 EST
Received: from merlin.Purdue.EDU by SU-SCORE.ARPA with TCP; Tue 19 Nov 85 07:59:30-PST
Message-Id: <8511191559.AA20586@merlin.Purdue.EDU>
Received: by merlin.Purdue.EDU; Tue, 19 Nov 85 10:59:12 EST
To: info-postscript@su-score.arpa
Subject: Two-up troff?
National-Indulgence-Of-The-Day: Baklava
Date: 19 Nov 85 10:59:08 EST (Tue)
From: "Christopher A. Kent" <erix!enea!seismo!Purdue.EDU!cak>

Has anyone out there thought about hacking up a ditroff translator that
prints two-up rotated output (like enscript -2r)? I'd like this a lot;
there are times when using nroff | enscript isn't quite nice enough.

chris
----------
From: Mail Delivery Subsystem <gatech!MAILER-DAEMON@seismo.CSS.GOV>
Subject: Returned mail: Host unknown
To: seismo!cak@Purdue.EDU@seismo.CSS.GOV
Date: 19 Nov 85 10:59:08 EST (Tue)
Posted-Date: 19 Nov 85 10:59:08 EST (Tue)

   ----- Transcript of session follows -----
Mailer at "gatech": Unable to find path to any host in pathname.
550 pwd!pwd... Host unknown

   ----- Unsent message follows -----
Received: from seismo by gatech.GTNET with UUCP (4.14.GT/6.0.GT)
	id AA26284; Tue, 19 Nov 85 14:43:53 est
Posted-Date: 19 Nov 85 10:59:08 EST (Tue)
Received-Date: Tue, 19 Nov 85 14:43:53 est
Received: from SU-SCORE.ARPA by seismo.CSS.GOV with SMTP; Tue, 19 Nov 85 11:02:03 EST
Received: from merlin.Purdue.EDU by SU-SCORE.ARPA with TCP; Tue 19 Nov 85 07:59:30-PST
Message-Id: <8511191559.AA20586@merlin.Purdue.EDU>
Received: by merlin.Purdue.EDU; Tue, 19 Nov 85 10:59:12 EST
To: info-postscript@su-score.arpa.UUCP
Subject: Two-up troff?
National-Indulgence-Of-The-Day: Baklava
Date: 19 Nov 85 10:59:08 EST (Tue)
From: "Christopher A. Kent" <seismo!Purdue.EDU!cak>

Has anyone out there thought about hacking up a ditroff translator that
prints two-up rotated output (like enscript -2r)? I'd like this a lot;
there are times when using nroff | enscript isn't quite nice enough.

chris
----------
From: bdmrrr!potomac!MAILER-DAEMON@seismo.CSS.GOV (Mail Delivery Subsystem)
Subject: Returned mail: User unknown
To: bdmrrr!seismo!cak%Purdue.EDU@seismo.CSS.GOV
Date: 19 Nov 85 10:59:08 EST (Tue)

   ----- Transcript of session follows -----
550 info-postscript... User unknown

   ----- Unsent message follows -----
Received: by potomac.uucp (4.24/3.14)
	id AA00362; Tue, 19 Nov 85 12:16:20 est
Received: by bdmrrr.uucp (2.0/SMI-2.0)
	id AA01048; Tue, 19 Nov 85 11:46:47 est
Received: from SU-SCORE.ARPA by seismo.CSS.GOV with SMTP; Tue, 19 Nov 85 11:02:03 EST
Received: from merlin.Purdue.EDU by SU-SCORE.ARPA with TCP; Tue 19 Nov 85 07:59:30-PST
Message-Id: <8511191559.AA20586@merlin.Purdue.EDU>
Received: by merlin.Purdue.EDU; Tue, 19 Nov 85 10:59:12 EST
To: info-postscript%su-score.arpa
Subject: Two-up troff?
National-Indulgence-Of-The-Day: Baklava
Date: 19 Nov 85 10:59:08 EST (Tue)
From: "Christopher A. Kent" <bdmrrr!seismo!Purdue.EDU!cak>

Has anyone out there thought about hacking up a ditroff translator that
prints two-up rotated output (like enscript -2r)? I'd like this a lot;
there are times when using nroff | enscript isn't quite nice enough.

chris
----------

----------
20-Nov-85 06:32:29-PST,1051;000000000000
Return-Path: <cak@Purdue.EDU>
Received: from merlin.Purdue.EDU by SU-SCORE.ARPA with TCP; Wed 20 Nov 85 06:32:08-PST
Message-Id: <8511201431.AA01596@merlin.Purdue.EDU>
Received: by merlin.Purdue.EDU; Wed, 20 Nov 85 09:31:26 EST
To: mccrudden%cipher.DEC@decwrl.DEC.COM (Steve  MKO1-2/J07  264-7635)
Cc: info-postscript@su-score.arpa
Subject: Re: junk mail
In-Reply-To: Your message of 20-Nov-1985 0858.
	     <8511201355.AA16116@decwrl.DEC.COM>
Date: 20 Nov 85 09:31:22 EST (Wed)
From: "Christopher A. Kent" <cak@Purdue.EDU>

	From: mccrudden%cipher.DEC@decwrl.DEC.COM  (Steve  MKO1-2/J07  264-7635)
	Subject: junk mail
	To: cak@Purdue.EDU, mccrudden%cipher.DEC@decwrl.DEC.COM
	Date: 20-Nov-1985 0858

	forward your problem to info-postscript-request, not to info postscript.

	info-postscript is just a mailing list!

	/swm

My apologies to all -- that's what I intended to do, and in my
sleepiness this morning, I forgot the -request. (Jeez, how embarrassing!)

Mea culpa, mea culpa, mea maxima culpa,
chris

----------
20-Nov-85 09:35:30-PST,838;000000000000
Date: Wed 20 Nov 85 09:35:30-PST
From: John Reuling <Reuling@SU-SCORE.ARPA>
Subject: INFO-POSTSCRIPT Administrative Changes
To: INFO-POSTSCRIPT: ;
Stanford: 206 Margaret Jacks Hall, +1 (415) 497-3549
Message-ID: <12160790164.23.REULING@SU-SCORE.ARPA>

I am now manually screening all messages to INFO-POSTSCRIPT.
This will have two advantages:

	1) Messages that should have been addressed to 
	   INFO-POSTSCRIPT-REQUEST will not be sent out to
	   the entire list.

	2) "Failed Mail" messages will return to me rather
	   than to the sender of the message, making it
	   easier for me to keep the list up to date.

You should still use the -REQUEST address for all messages
concerning list maintenance.

-John Reuling, Info-PostScript-REQUEST@SU-SCORE.ARPA
               glacier!info-postscript-request
-------
21-Nov-85 08:02:26-PST,1271;000000000000
Date: Thu 21 Nov 85 08:02:26-PST
From: John Reuling <Reuling@SU-SCORE.ARPA>
Subject: [INFO-POSTSCRIPT] Re: Two-up troff?
To: INFO-POSTSCRIPT: ;
Stanford: 206 Margaret Jacks Hall, +1 (415) 497-3549
Message-ID: <12161035367.19.REULING@SU-SCORE.ARPA>

Date: Wed, 20 Nov 85 11:00:34 est
From: ned%UPenn-Grasp%upenn.csnet@CSNET-RELAY.ARPA
To: info-postscript@su-score.arpa
Subject: Re: Two-up troff?

Do you mean ditroff or enscript? You seemed to be discussing both.
I've been thinking recently that it should be possible to design a PostScript
prelude which would do 4-up (or 2-up or n-up) printing of any PostScript
file. By modifying enough of the standard operators, like showpage, initclip,
etc., it should be possible to do this sort of printing in a completely
transparent way. After all, as the PostScript Language Manual states:

	The design of PostScript encourages building pieces ... that
	are used and reused to build up a page image. Not only can
	pieces be used in exactly their original form, but with ...
	translation, rotation and scaling, previously defined pieces
	can serve in a myriad of ways for making new composite pages.

Has anyone out there been thinking along these lines?

--Ned Batchelder (ned@UPenn.CSnet)
-------
21-Nov-85 09:11:36-PST,1131;000000000000
Return-Path: <cak@Purdue.EDU>
Received: from merlin.Purdue.EDU by SU-SCORE.ARPA with TCP; Thu 21 Nov 85 09:09:26-PST
Message-Id: <8511211709.AA08423@merlin.Purdue.EDU>
Received: by merlin.Purdue.EDU; Thu, 21 Nov 85 12:09:03 EST
To: info-postscript@su-score.arpa
Subject: Re: [INFO-POSTSCRIPT] Re: Two-up troff?
In-Reply-To: Your message of Thu 21 Nov 85 08:02:26-PST.
	     <12161035367.19.REULING@SU-SCORE.ARPA>
Date: 21 Nov 85 12:08:56 EST (Thu)
From: "Christopher A. Kent" <cak@Purdue.EDU>
ReSent-Date: Thu 21 Nov 85 09:11:36-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12161047958.19.REULING@SU-SCORE.ARPA>

I mean ditroff. I'd like to be able to take ditroff input and produce
output that is similar in style to what enscript -r2 does for plain
text files. It actually seems that the easiest way to do this is to use
multi-column stuff in troff and set the page up for landscape
proportions (not particularly easy with -ms) and munge the prelude to
do a rotation of 90 degrees. That *seems* reasonable; I haven't tried
it.

chris
----------
21-Nov-85 12:38:01-PST,3459;000000000000
Return-Path: <primerd!bobsun!bob@mit-eddie.MIT.EDU>
Received: from mit-eddie by SU-SCORE.ARPA with TCP; Thu 21 Nov 85 12:33:13-PST
Received: by mit-eddie (4.12/4.7)
	id AA25799; Thu, 21 Nov 85 15:29:33 est
Received: from bobsun.primerd.uucp by primerd.uucp (2.0/SMI-2.0)
	id AA15840; Thu, 21 Nov 85 14:45:05 est
Return-Path: <bob@bobsun>
Received: by bobsun.primerd.uucp (2.0/SMI-2.0)
	id AA01857; Thu, 21 Nov 85 14:44:21 est
Message-Id: <8511211944.AA01857@bobsun.primerd.uucp>
Date: Thu 21 Nov 1985 14:27:38 EST
From: Bob Pellegrino <primerd!bobsun!bob@mit-eddie.MIT.EDU>
Subject: N-up in Postscript
To: info-postscript@su-score.arpa
ReSent-Date: Thu 21 Nov 85 12:38:01-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12161085534.27.REULING@SU-SCORE.ARPA>


Here at Prime Computer, we've addressed this problem already.  The
following is the PostScript header taken from our scribe device file
for doing N-up on a page.  (NUP must be set to 2, 4, 8, or 16)  Don't
forget the device finalization string.

Bob Pellegrino
Prime Computer, Inc.

ARPA: Pellegrino@bbna
UUCP: decvax!genrad!mit-eddie!primerd!bobsun!bob
-----------------------------------------------------------------------

@Declare(GenericDevice="ScaleableLaser",
     DeviceTitle="PostScript, 16-up",
     FinalName="#.ps")
@Declare(Driver PostScript,Hunits Inch,Hraster 7200,Vunits inch,Vraster 7200)

@declare(DeviceInitialization
"%%EndComments
% PostScript Prelude for Scribe, n-up.

/PN 0 def
/NUP where {pop NUP 2 eq {/NUPI 0 def}{NUP 4 eq {/NUPI 1 def}{NUP 8 eq
 {/NUPI 2 def}{NUP 16 eq {/NUPI 3 def}{/NUP 1 def}ifelse}ifelse}ifelse}ifelse}
 {/NUP 1 def} ifelse
NUP 1 eq
{/BS {/SV save def} def
 /ES {showpage SV restore} def}
{/NUPP NUP 4 eq NUP 16 eq or def
 /PW [357 272 178.5 136] NUPI get def /PH [462 352 231 176] NUPI get def
 /NPW [2 2 4 4] NUPI get def /SCL [0.58333 0.44444 0.29167 0.22222] NUPI get def
 NUPP {/TPW 544 def /TPH 704 def} {/TPW 714 def /TPH 462 def} ifelse
 /BS {PN 0 eq {NUPP {34 44 translate} {537 39 translate 90 rotate} ifelse
      newpath 0.3 setlinewidth 0 PH TPH {0 exch moveto TPW 0 rlineto} for
      0 PW TPW {0 moveto 0 TPH rlineto} for stroke 0 0 moveto} if
  /SV save def
  PN NPW mod PW mul TPH PN NPW idiv 1 add PH mul sub translate SCL dup scale
 } def
 /ES {SV restore /PN PN 1 add def PN NUP eq {showpage /PN 0 def} if} def
} ifelse
/NOFF where {pop NOFF 1 eq {BS ES} if} if

/SC {setrgbcolor} def
/RST {100 div} def
/CVTXY {RST 792 sub abs exch RST exch} def
/RDF {WFT findfont SLT 0 eq
  {SSZ scalefont}
  {[SSZ 0 SLT sin SLT cos div SSZ mul SSZ 0 0]makefont}
  ifelse
  setfont} def
/SLT 0 def
/SI { /SLT exch def RDF } def
/WFT /Courier def
/SF { /WFT exch def RDF } def
/SSZ 10 def
/SS { /SSZ exch def RDF } def
/MT { CVTXY moveto } def
/XM {RST currentpoint exch pop moveto} def
/UL {gsave newpath CVTXY moveto RST dup 2 div 0 exch rmoveto
   setlinewidth RST 0 rlineto stroke grestore} def
/PB {/PV save def CVTXY translate pop}def
/PE {PV restore}def
/SH{show}def
/MSS {SSW RST 0 rmoveto} def
/SNS { SSW add /SSW exch def MSS} def
/MX {/SSW exch def SH MSS} def
/M2 {SH MSS MSS} def
/M {SH MSS} def
/M+ {SH 1  SNS} def
/M- {SH -1 SNS} def
%%EndProlog
")
@Declare(DeviceFinalization "PN 0 gt {showpage} if")

------------------------------------------------------------------------

21-Nov-85 19:35:05-PST,1847;000000000000
Return-Path: <BILL@CS.COLUMBIA.EDU>
Received: from CS.COLUMBIA.EDU by SU-SCORE.ARPA with TCP; Thu 21 Nov 85 19:04:59-PST
Date: Thu 21 Nov 85 22:04:30-EST
From: Bill Schilit <BILL@CS.COLUMBIA.EDU>
Subject: Dataproducts LNZ-2660?
To: info-postscript@SU-SCORE.ARPA
ReSent-Date: Thu 21 Nov 85 19:35:05-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12161161459.18.REULING@SU-SCORE.ARPA>

Has anyone seen, or does anyone have an LNZ-2660?  This is a
PostScript printer made by Dataproducts, and mentioned a while back on
this list.

Does anyone know if the 10MHZ clock cycle of the LNZ 68000 vs. the
LaserWriter's 12MHZ cycle makes a difference?  Or the effect of 2MB
RAM on the LNZ vs the 1.5MB on the LaserWriter?

A number of companies are OEM'ing the Dataproducts machine under a
different name -- like Apollo computer's Domain/Laser-26 -- has anyone
seen any of these?

At $20,900 the LNZ-2660 is about equal to 4.5 LaserWriters.  It is
only 3 times as fast (max speed is said to be 26 pgs/min) but has a
duty cycle 10 times the LaserWriter (LNZ rated at 40-50K pages/month
the LaserWriter at 4K).  

The capacity (duty cycle) of the machine seems to be a major buying
reason.  Can anyone think of other reasons -- or perhaps why a handful
of LaserWriters would be preferable?

The Dataproducts LNZ-2660 was scheduled for production deliveries in
November when I sent away for information last September.  Now
deliveries are scheduled for January, but the people I talked to said
OEM shipments are going out and there are a few evaluation models
available.

As far as I can tell Dataproduct's LNZ machine (and OEM versions) are
the only PostScript printers near delivery, or being delivered, aside
from the Apple LaserWriter...  

- Bill
-------
22-Nov-85 07:33:44-PST,1681;000000000000
Return-Path: <cak@Purdue.EDU>
Received: from merlin.Purdue.EDU by SU-SCORE.ARPA with TCP; Fri 22 Nov 85 05:32:47-PST
Message-Id: <8511221332.AA23490@merlin.Purdue.EDU>
Received: by merlin.Purdue.EDU; Fri, 22 Nov 85 08:32:16 EST
To: Bill Schilit <BILL@CS.COLUMBIA.EDU>
Cc: info-postscript@su-score.arpa
Subject: Re: Dataproducts LNZ-2660?
In-Reply-To: Your message of Thu 21 Nov 85 22:04:30-EST.
	     <8511220420.AA23341@arthur.Purdue.EDU>
Date: 22 Nov 85 08:32:11 EST (Fri)
From: "Christopher A. Kent" <cak@Purdue.EDU>
ReSent-Date: Fri 22 Nov 85 07:33:44-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12161292285.16.REULING@SU-SCORE.ARPA>

I haven't seen one here, but I'd love to.

	As far as I can tell Dataproduct's LNZ machine (and OEM versions) are
	the only PostScript printers near delivery, or being delivered, aside
	from the Apple LaserWriter...  

We have two QMS 800PS printers here; I don't know under what
arrangement. They look like just about any other Canon-based small
printer, and work about the same. Have the same three-LED controls as
the LaserWriter. 

As for the decision about one large printer or many small printers, it
depends on how dispersed your users are. If you can distribute the
printers, it seems worthwhile to have many small printers. If you want
a central output facility, get a big printer; otherwise, it's a pain to
try to balance the load on the gaggle of little guys huddling in a
room. (That's the situation we're in right now.)

I sure hope someone else gets their act together soon. We need a
high-capacity PS printer.

chris
----------
22-Nov-85 08:38:29-PST,2113;000000000000
Return-Path: <primerd!bobsun!bob@mit-eddie.MIT.EDU>
Received: from mit-eddie by SU-SCORE.ARPA with TCP; Fri 22 Nov 85 08:35:38-PST
Received: by mit-eddie (4.12/4.7)
	id AA10987; Fri, 22 Nov 85 11:35:26 est
Received: from bobsun.primerd.uucp by primerd.uucp (2.0/SMI-2.0)
	id AA22249; Fri, 22 Nov 85 11:20:11 est
Return-Path: <bob@bobsun>
Received: by bobsun.primerd.uucp (2.0/SMI-2.0)
	id AA02543; Fri, 22 Nov 85 11:19:04 est
Message-Id: <8511221619.AA02543@bobsun.primerd.uucp>
Date: Fri 22 Nov 1985 11:05:24 EST
From: Bob Pellegrino <primerd!bobsun!bob@mit-eddie.MIT.EDU>
Subject: RE:Dataproducts LNZ-2660?
To: info-postscript@su-score.arpa
ReSent-Date: Fri 22 Nov 85 08:38:29-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12161304071.30.REULING@SU-SCORE.ARPA>

We have a Beta release LNZ-2660 here at Prime.  First the bad news...

There is a difference between ENGINE speed and CONTROLLER speed.  Yes,
the engine is capable of spitting out 26 pages/minute.  But the
controller on this printer cannot go nearly that fast.  In fact, in all
but one special case, this printer turns out to be SLOWER than an Apple
laserwriter!  The one exception is the case when the text in memory has
already been proccessed and you are simply printing multiple copies of
the same text. (Of course. The controller is already done.)  In all
other tests, from simple text to grayscale, the Data Products printer
is slower.  In fairness it should be restated that we have a Beta
release version.

However, it is not true that Data Products is the only one making
Postscript printers on the high end.  We also happen to have some Beta
printers from QMS (Quality Micro Systems).  The people who poisoned us
with that *awful* QUIC language have a full line of Postscript printers
from laserwriter size to a 24 page/minute model.   

By the way, is Adobe on the net?  I'm surprised not to hear anything
from them...

Bob Pellegrino
Prime Computer, Inc.

ARPA: Pellegrino@bbna
UUCP: decvax!genrad!mit-eddie!primerd!bobsun!bob



26-Nov-85 10:08:25-PST,903;000000000000
Return-Path: <mirror!rs%cca-unix.arpa@cca-unix.arpa>
Received: from UCI.EDU by SU-SCORE.ARPA with TCP; Tue 26 Nov 85 09:51:48-PST
Received: from cca-unix.arpa by UCI.EDU id a013056; 26 Nov 85 9:49 PST
Received: by CCA-UNIX.ARPA (4.12/4.7)
	id AA08968; Mon, 25 Nov 85 14:34:16 est
Received: by mirror.UUCP (4.12/4.7) id AA04133; Mon, 25 Nov 85 14:29:09 est
Date: Mon, 25 Nov 85 14:29:09 est
From: Rich Salz <mirror!rs%cca-unix.arpa@cca-unix.arpa>
Message-Id: <8511251929.AA04133@mirror.UUCP>
To: info-postscript%uci@cca-unix.arpa, laser-lovers%maryland@cca-unix.arpa
Subject: Varian -> PostScript
ReSent-Date: Tue 26 Nov 85 10:08:25-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12162369019.14.REULING@SU-SCORE.ARPA>


Is there any kind of Varian -> PostScript translator around?
Is such a thing feasible?

tnx,
	/rich $alz
26-Nov-85 15:53:07-PST,848;000000000000
Return-Path: <RSanders.Pascalx@USGS2-MULTICS.ARPA>
Received: from USGS2-MULTICS.ARPA by SU-SCORE.ARPA with TCP; Tue 26 Nov 85 15:24:23-PST
Date:  Tue, 26 Nov 85 16:23 MST
From:  RSanders@USGS2-MULTICS.ARPA
Subject:  CalComp -> PostScript package wanted
To:  info-postscript@SU-SCORE.ARPA
Message-ID:  <851126232308.040397@USGS2-MULTICS.ARPA>
ReSent-Date: Tue 26 Nov 85 15:53:07-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12162431771.22.REULING@SU-SCORE.ARPA>

Has anyone written a CalComp-compatible plotting subroutine package for
PostScript yet?  I will do it in 1-2 months if no-one else will, but
don't want to re-invent the wheel.

PS - I don't have TranScript source code, so it's not "a trivial mod to
the Unix plot routines".

-- Rex
   RSanders@denver.arpa
26-Nov-85 15:54:24-PST,1453;000000000000
Return-Path: <reid@glacier>
Received: from glacier by SU-SCORE.ARPA with TCP; Tue 26 Nov 85 15:34:16-PST
Received: by glacier with Sendmail; Tue, 26 Nov 85 15:33:45 pst
Date: 26 Nov 1985 1533-PST (Tuesday)
From: Brian Reid <reid@glacier>
Subject: get rich quick?
To: info-postscript@glacier
ReSent-Date: Tue 26 Nov 85 15:54:24-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12162432005.22.REULING@SU-SCORE.ARPA>

I just got a phone call from Susan Lammers of Microsoft publishing
(or was it Micropro publishing?). (206) 828-8080. She is looking for
somebody to do "A PostScript Book".

Now I thought this was pretty curious because I think that the existing
PostScript books (the red and blue Addison-Wesley books) are pretty good.

However, it seems that in her mind those books are inadequate and poorly
written, because they use words like "matrix" and "polynomial", and are
therefore not written for ordinary people.

I get the feeling that they are looking for somebody to write a quick
"PostScript Revealed" or "Everything you ever wanted to know about
PostScript but couldn't understand because you flunked Calculus in college"
book, and make a lot of money.

If you always wanted to be a pulp author, and sell hundreds of thousands of
books to people who don't know what a matrix is, this might be your big
chance. Call her, not me.

Brian Reid
Stanford
27-Nov-85 16:30:44-PST,2554;000000000000
Return-Path: <primerd!bobsun!bob@mit-eddie.MIT.EDU>
Received: from mit-eddie by SU-SCORE.ARPA with TCP; Wed 27 Nov 85 09:34:25-PST
Received: by mit-eddie (4.12/4.7)
	id AA15753; Wed, 27 Nov 85 12:31:38 est
Received: from bobsun.primerd.uucp by primerd.uucp (2.0/SMI-2.0)
	id AA01434; Wed, 27 Nov 85 11:31:55 est
Return-Path: <bob@bobsun>
Received: by bobsun.primerd.uucp (2.0/SMI-2.0)
	id AA06462; Wed, 27 Nov 85 11:27:51 est
Message-Id: <8511271627.AA06462@bobsun.primerd.uucp>
Date: Wed 27 Nov 1985 10:41:22 EST
From: Bob Pellegrino <primerd!bobsun!bob@mit-eddie.MIT.EDU>
Subject: Re: RE:Dataproducts LNZ-2660?
To: Bill Schilit <mit-eddie!BILL@CS.COLUMBIA.EDU>
Cc: info-postscript@su-score.arpa
ReSent-Date: Wed 27 Nov 85 16:30:44-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12162700764.32.REULING@SU-SCORE.ARPA>

> Bob,
> You mentioned you have QMS printers on the "high end" -- these are not
> the PS800 right?  Do you know the model number?  Is this 24 ppm model
> you mention really 24 ppm or is it another situation where the postscript
> controller cannot keep up and does only as well as a LaserWriter?
> - Bill
>  Acting Director of Facilities
>  Department of Computer Science
>  Columbia University

Bill,

There was never a Postscript version of an Lg2400.  The only "high end"
printer that had Postscript was the Lg1200. (12 pages per minute)  Since
this printer used the old controller, throughput measurements would be 
irrelevant now.  It was this printer that they decided to redesign.  We
still have an Lg1200a in everyday use though.  

Now the plan is to get the new Beta PS800A debugged, and then move it up
to an Lg2400.  (not the 1200 first.)  For this reason I had us buy
Lg2400's for the time being, with the understanding that they will be
upgraded either for free or for nominal charge next quarter. 

By the way, I discovered something interesting last night as I was
printing an 800 (!!) page document on a Laserwriter.  Remember that n-up
on a page utility that I posted here last week?  Well as it turns out,
the overhead for doing the processing is low enough that the effective
page throughput (at 4-up) is 16 pages/minute.  For listings on an 800, that's
pretty good!  

I don't know what 16-up gives you, but it is really only appropriate for
document layout proofing at that size anyway.

Bob Pellegrino
Prime Computer, Inc.

ARPA: Pellegrino@bbna
UUCP: decvax!genrad!mit-eddie!primerd!bobsun!bob

27-Nov-85 16:31:34-PST,1354;000000000000
Return-Path: <primerd!bobsun!bob@mit-eddie.MIT.EDU>
Received: from mit-eddie by SU-SCORE.ARPA with TCP; Wed 27 Nov 85 14:32:34-PST
Received: by mit-eddie (4.12/4.7)
	id AA17910; Wed, 27 Nov 85 17:29:51 est
Received: from bobsun.primerd.uucp by primerd.uucp (2.0/SMI-2.0)
	id AA01656; Wed, 27 Nov 85 16:45:51 est
Return-Path: <bob@bobsun>
Received: by bobsun.primerd.uucp (2.0/SMI-2.0)
	id AA06655; Wed, 27 Nov 85 16:41:46 est
Message-Id: <8511272141.AA06655@bobsun.primerd.uucp>
Date: Wed 27 Nov 1985 15:26:54 EST
From: Bob Pellegrino <primerd!bobsun!bob@mit-eddie.MIT.EDU>
Subject: RE: Dataproducts printer
To: info-postscript@su-score.arpa
ReSent-Date: Wed 27 Nov 85 16:31:34-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12162700914.32.REULING@SU-SCORE.ARPA>

A few days ago I posted some speed comparisons between the LNZ-2660 with the 
Redstone controller and the Apple Laserwriter.  The comparisons were
correct, but what wasn't correct was that the LNZ was a "beta" printer.
In fact it was only an "experimental" printer, not something that they
had intended to ship as a product.  Dataproducts has a revised
controller which we hope to see soon.

Bob Pellegrino
Prime Computer, Inc.

ARPA: Pellegrino@bbna
UUCP: decvax!genrad!mit-eddie!primerd!bobsun!bob

27-Nov-85 19:55:56-PST,5812;000000000000
Return-Path: <reid@glacier>
Received: from glacier by SU-SCORE.ARPA with TCP; Wed 27 Nov 85 17:31:34-PST
Received: by glacier with Sendmail; Wed, 27 Nov 85 17:30:12 pst
Date: 27 Nov 1985 1730-PST (Wednesday)
From: Brian Reid <reid@glacier>
To: Bob Pellegrino <primerd!bobsun!bob@mit-eddie.MIT.EDU>
Cc: info-postscript@su-score.ARPA
Subject: Printer speeds
In-Reply-To: Bob Pellegrino <primerd!bobsun!bob@mit-eddie.MIT.EDU> / 
		Wed 27 Nov 1985 15:26:54 EST.
             <8511272141.AA06655@bobsun.primerd.uucp>
ReSent-Date: Wed 27 Nov 85 19:55:56-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12162738118.10.REULING@SU-SCORE.ARPA>

Whenever you are looking at the speed of a printer much faster than the
Apple LaserWriter, you must take the speed of the communication link
into account. It is also worthwhile to take the controller architecture
into account. Let me give you an example.

If a printer is being used to emulate a line printer, that means that
it will be printing 63 lines per page and (say) 80 characters per page.
That gives 5040 characters per page. Often pages printed are not full;
let's suppose, in fact, that the average line-length is 40 characters. 
That would give us about 2500 characters per average simulated line
printer page.

A 9600-baud link sends roughly 1000 characters per second. It's
actually a bit lower than that, and many small-computer CPUs have
trouble sustaining a 1000-character-per-second output rate over a port
that is not DMA. I know that my Vax 750, even when it's lightly loaded,
has trouble keeping up with 1000 characters/second over a DZ-11 port
when there is other terminal activity going on. Nevertheless, let's use
1000 characters/second as the transfer rate.

It takes 2.5 seconds at 1000 characters/second to ship our sample page
image at this rate.

Now, my measurements of the Apple LaserWriter show me that its
PostScript interpreter can write about 700 characters per second into
the frame buffer if they are all in the cache. At this speed it takes
3.5 seconds per page to fill the frame buffer once all of the
characters are in the machine.

If these two could be overlapped, then 9600 baud would be a very nice
transfer rate for the LaserWriter, because there would be little point
in getting data to the machine much faster than it can be imaged.
However, my understanding of the architecture of the LaserWriter is
that it does not overlap input with page image generation, so in fact
those two times must be added and not maxed. Even when adding them, the
cost of character-writing dominates the cost of communication.

Now let's put a much faster image generator on a printer. In fact,
let's put an infinitely fast image generator on it, so that the speed
at which pages can be printed is limited only by the rate at which data
can be gotten into the printer and the rate at which the frame buffer
can be dumped. If the page could be imaged instantly, and if the frame
buffer could be dumped instantly, the 9600-baud link would limit the
printing speed to 24 pages/minute. However, the page cannot be dumped
instantly, and furthermore, the dumping of the page cannot be
overlapped with the inputting of the next page unless there are two
frame buffers. I don't know the timing info on the Dataproducts
printer, but let's hypothesize that it takes 1/30 of a minute to print
one page, so that a 24 page/minute rate is achieved by printing for
1/30 minute and then 1/120 of a minute to do other things. 1/30 minute
is 2 seconds, and 1/120 minute is half a second. That half a second can
probably be overlapped with the communication time, but the 2 seconds
cannot. This means that unless the controller has 2 frame buffers, a
printer whose hardware can print one page in 1/30 minute can only run
at 60/(2.5 + 2) = 13.33 pages per minute. And that's with an infinitely
fast image generator. If we are willing to grant the image generator 1
second per page of computation time to compute the image (that's mighty
fast), then we are suddenly down to 60/(2.5 + 2 + 1) = 10.9 pages/minute
on this printer whose marking engine and image generator are both 2.5
times faster than the LaserWriter.

If the communication cost could be eliminated completely, the printer
about which we've made these assumptions could be run at 20 pages per
minute (1 second to fill the frame buffer and 2 seconds to dump it; the
1-second fill time can overlap with the half-second "breather" time).
If we kept the 2.5 seconds of communication time but put in two frame
buffers so that they can be double-buffered, then we can print 13.3
pages/minute. If we manage to overlap the communication time and ALSO
use two frame buffers, then we can suddenly jump to 24 pages/minute,
which is the rated speed of the printer. If we manage to reduce the
cmmunication time to under 2 seconds, and also overlap it, and also
have 2 frame buffers, then we can print 30 pages/minute.

All of these numbers that I'm giving you here are just
back-of-the-envelope scribbles; I don't have any real measured data
from real printers. I guess the message I'm trying to get across is
that you can't do much worthwhile discussion of the speed of a
PostScript printer (or any other printer using a frame buffer) unless
you disclose the nature of the communication line with the printer and
the nature of the I/O timing. They also show me that nobody can build a
24 page/minute frame-buffer printer that uses a 9600-baud serial line
unless the I/O can be completely overlapped with computation and also
unless there are 2 frame buffers. Even with those it is going to
require a very fast image generator to keep up.


Brian Reid
Stanford
 2-Dec-85 08:14:29-PST,2034;000000000000
Return-Path: <bzs%buit4%bostonu.csnet@CSNET-RELAY.ARPA>
Received: from CSNET-RELAY.ARPA by SU-SCORE.ARPA with TCP; Sun 1 Dec 85 13:09:36-PST
Received: from bostonu by csnet-relay.csnet id aa16484; 1 Dec 85 15:12 EST
Received: from buit4.ARPA by bu-cs.ARPA (4.12/4.7)
	id AA13420; Sun, 1 Dec 85 14:58:14 est
Return-Path: <bzs@buit4>
Received: by buit4.ARPA (2.2/4.7)
	id AA10289; Sun, 1 Dec 85 14:58:38 est
Date: Sun, 1 Dec 85 14:58:38 est
From: Barry Shein <bzs%buit4%bostonu.csnet@CSNET-RELAY.ARPA>
Message-Id: <8512011958.AA10289@buit4.ARPA>
To: primerd!bobsun!bob@mit-eddie.ARPA, reid@su-glacier.ARPA
Subject: Re:  Printer speeds
Cc: info-postscript@su-score.ARPA
ReSent-Date: Mon 2 Dec 85 08:14:29-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12163921144.14.REULING@SU-SCORE.ARPA>


Although I agree with the basic calculations which indicate that
a 9600b serial line will be a bottleneck ultimately in a printer,
Brian Reid's calculations conclude with 'Even with those [ie. more
efficient I/O rates] it is going to require a vary fast image gen-
erator to keep up' (comment mine.) The implication seeming to be
that the technology seems to top out due to various factors at around
24/pages-per-minute, the further implication being such speeds are
not likely to be much of a win as in most applications sustained
throughput will be much lower (do I read too much into this?)

Yet, one cannot deny that, for example, our Xerox8700 (channel attached
to our IBM3081) seems to zip along at around 60 or more pages per
minute, and I hear the 9700 is a bit faster (and, I believe, the
IBM3800 still faster though I suspect a bit dumb about documents.)
The upshot is that unless you are using a very small computer and
a very small link significant increases in speed are already in use
and well within reach, tho admittedly costly (that is, it's not a
matter of technology, it's a matter of price.)

	-Barry Shein, Boston University

 2-Dec-85 08:15:37-PST,2330;000000000000
Return-Path: <reid@glacier>
Received: from glacier by SU-SCORE.ARPA with TCP; Sun 1 Dec 85 15:14:52-PST
Received: by glacier with Sendmail; Sun, 1 Dec 85 15:14:07 pst
Date:  1 Dec 1985 1514-PST (Sunday)
From: Brian Reid <reid@glacier>
To: Barry Shein <bzs%buit4%bostonu.csnet@CSNET-RELAY.ARPA>
Cc: info-postscript@su-score.ARPA
Subject: Re:  Printer speeds
In-Reply-To: Barry Shein <bzs%buit4%bostonu.csnet@CSNET-RELAY.ARPA> / 
		Sun, 1 Dec 85 14:58:38 est.
             <8512011958.AA10289@buit4.ARPA>
ReSent-Date: Mon 2 Dec 85 08:15:37-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12163921350.14.REULING@SU-SCORE.ARPA>

Please read what I said:

    "...nobody can build a 24 page/minute frame-buffer printer
    that uses a 9600-baud serial line unless the I/O can be
    completely overlapped with computation and also unless
    there are 2 frame buffers. ..."

This comment has nothing to do with machines like the 8700 that are
attached to a megabit-per-second data channel and that do not have
significant graphics capabilities. I don't mean to denigrate the 8700 and
thee 9700, but they are not graphics printers, they are character printers;
printing graphics is a lot more difficult. (Yes, I know that the 9700 has a
certain limited graphics capability, but is is not at all general).

On the other hand, the 9700 has some fairly impressive performance
statistics: it can print 120 pages per minute, with 8000 characters on each
page. That is a character writing rate of 16000 characters per second, about
22 times the speed of the LaserWriter. However, to achieve that speed, the
9700 used a lot of special-purpose hardware for doing character image
generation; even if the 9700 could print graphics, it couldn't print them at
that kind of speed.

I know that INFO-POSTSCRIPT is for discussing Postscript, not 9700's, but I
think it is important for people to make sure, when they are making
comparisons, that they are comparing apples with apples. A PostScript
printer with the speed of the 9700 would be an impressive beast, indeed. I
shudder to think of the number of frame buffers it would need, the image
generation speed it would need, etc. The 9700 does not eve have a frame
buffer.

Brian Reid
Stanford
 2-Dec-85 11:24:26-PST,961;000000000000
Return-Path: <JAlrich.es@Xerox.ARPA>
Received: from Xerox.ARPA by SU-SCORE.ARPA with TCP; Mon 2 Dec 85 09:36:49-PST
Received: from CheninBlanc.ms by ArpaGateway.ms ; 02 DEC 85 09:34:05 PST
Date: Mon, 2 Dec 85 09:17 PST
From: JAlrich.es@Xerox.ARPA
Subject: Re: Printer speeds
In-reply-to: "reid@SU-GLACIER.ARPA's message of 27 Nov 85 17:30 PST
 (Wednesday)"
To: Brian Reid <reid@SU-GLACIER.ARPA>
cc: Bob Pellegrino <primerd!bobsun!bob@EDDIE.MIT.EDU>,
 info-postscript@su-score.ARPA
Message-ID: <851202-093405-2480@Xerox>
ReSent-Date: Mon 2 Dec 85 11:24:26-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12163955723.14.REULING@SU-SCORE.ARPA>

I don't think things are quite as bleak as Brian indicates.  Brian's
example assumed only one copy per page;  as soon as multiple copies per
page are thrown into the equation, the higher print rates become much
more interesting.

//John 

 2-Dec-85 11:28:09-PST,1584;000000000000
Return-Path: <primerd!bobsun!bob@mit-eddie.MIT.EDU>
Received: from mit-eddie by SU-SCORE.ARPA with TCP; Mon 2 Dec 85 10:33:03-PST
Received: by mit-eddie (4.12/4.7)
	id AA06209; Mon, 2 Dec 85 13:32:49 est
Received: from bobsun.primerd.uucp by primerd.uucp (2.0/SMI-2.0)
	id AA05682; Mon, 2 Dec 85 12:52:20 est
Return-Path: <bob@bobsun>
Received: by bobsun.primerd.uucp (2.0/SMI-2.0)
	id AA09401; Mon, 2 Dec 85 12:47:56 est
Message-Id: <8512021747.AA09401@bobsun.primerd.uucp>
Date: Mon 2 Dec 1985 12:04:23 EST
From: Bob Pellegrino <primerd!bobsun!bob@mit-eddie.MIT.EDU>
Subject: Re:Printer speeds
To: Brian Reid <reid@glacier.ARPA>
Cc: info-postscript@su-score.arpa
In-Reply-To: Brian Reid's message of 27 Nov 1985 1730-PST (Wednesday)
ReSent-Date: Mon 2 Dec 85 11:28:09-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12163956399.14.REULING@SU-SCORE.ARPA>

Brian,

You are quite right that raw speed measurements can be misleading if
the speed of the communications link is unknown.  Speed
@i(comparisons), however, are still valid given the speed of the
communications link and the buffer sizes are kept constant.  The
printer's I/O strategy is fair game, and not to be discounted.  (Like
saying: "Car A is faster than Car B, but only because it has a bigger
engine. Right.  But Car A is still faster.)

By the way, we are driving our laser printers with 9600 baud serial
lines.

Bob Pellegrino
Prime Computer, Inc.

UUCP: decvax!genrad!mit-eddie!primerd!bobsun!bob
ARPA: Pellegrino@bbna
 2-Dec-85 18:09:47-PST,1450;000000000000
Return-Path: <oakhill!eifert@sally.LOCAL>
Received: from sally.UTEXAS.EDU by SU-SCORE.ARPA with TCP; Mon 2 Dec 85 16:01:05-PST
Posted-Date: Mon, 2 Dec 85 17:26:02 cst
Received: by sally.UTEXAS.EDU (4.22/4.22)
	id AA21031; Mon, 2 Dec 85 17:28:32 cst
Received: by oakhill.UUCP (4.12/4.7)
	id AA04937; Mon, 2 Dec 85 17:26:02 cst
Date: Mon, 2 Dec 85 17:26:02 cst
From: oakhill!eifert@sally.LOCAL (Jim Eifert)
Message-Id: <8512022326.AA04937@oakhill.UUCP>
To: ut-sally!info-postscript@SU-SCORE.ARPA
Subject: Printing LaserWriter Files
ReSent-Date: Mon 2 Dec 85 18:09:47-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12164029515.16.REULING@SU-SCORE.ARPA>




We have just obtained a laserprinter (postscript) from Apollo
which claims to print 26 pages per minute.  We are a Beta
test site.  Right now, the printer is connected to an Apollo
using a 19200 baud serial line.

	We would like to be able print files that have
been generated on the Macintosh for the LaserWriter.
We can get the Mac to generate a postscript file,
but the Apple laserwriter is initialized so that it
retains some basic graphics routines internally.
Can someone send me or tell me how to obtain the Mac
postscript file which defines some of the graphics
routines so that we can use it to print on our Apollo
laserprinter?

Thanks,

			Jim Eifert

			oakhill!eifert@ut-sally.arpa


 4-Dec-85 08:29:01-PST,1335;000000000000
Return-Path: <ned%UPenn-Grasp%upenn.csnet@CSNET-RELAY.ARPA>
Received: from CSNET-RELAY.ARPA by SU-SCORE.ARPA with TCP; Tue 3 Dec 85 21:10:06-PST
Received: from upenn by csnet-relay.csnet id ay02967; 3 Dec 85 23:25 EST
Received: by UPenn-Grasp.CSNET
	id AA22733; Tue, 3 Dec 85 11:58:35 est
Date: Tue, 3 Dec 85 11:58:35 est
From: ned%UPenn-Grasp%upenn.csnet@CSNET-RELAY.ARPA
To: info-postscript@su-score.arpa
Subject: Path values
Received: from UPenn-Grasp by UPenn; Tue, 3 Dec 85 12:01 EST
ReSent-Date: Wed 4 Dec 85 08:29:01-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12164448078.9.REULING@SU-SCORE.ARPA>

Is there some good reason that PostScript doesn't allow a path as an object
type? Obviously there are provisions for the maintenance of more than one path
at a time (the current path and the clipping boundary), so why not allow a lot
more, and pass them around as values? A lot more interesting operators on them
could be defined, and the current ones generalized to take a path on the stack.

As a workaround, has anyone done anything with converting the path to another
representation and back so that they can be stored some other way? (Another
case where the pathforall & charpath restriction is a real pain! :-( )

--Ned
ned@UPenn.CSnet
18-Dec-85 11:16:15-PST,3795;000000000000
Return-Path: <primerd!bobsun!bob@mit-eddie.MIT.EDU>
Received: from mit-eddie by SU-SCORE.ARPA with TCP; Tue 17 Dec 85 12:33:29-PST
Received: by mit-eddie (4.12/4.7)
	id AA13428; Tue, 17 Dec 85 15:33:42 est
Received: from bobsun.primerd.uucp by primerd.uucp (2.0/SMI-2.0)
	id AA03361; Tue, 17 Dec 85 14:14:54 est
Return-Path: <bob@bobsun>
Received: by bobsun.primerd.uucp (2.0/SMI-2.0)
	id AA01144; Tue, 17 Dec 85 14:14:29 est
Message-Id: <8512171914.AA01144@bobsun.primerd.uucp>
Date: Tue 17 Dec 1985 14:02:30 EST
From: Bob Pellegrino <primerd!bobsun!bob@mit-eddie.MIT.EDU>
Subject: Postscript Misc.
To: info-postscript@su-score.arpa
ReSent-Date: Wed 18 Dec 85 11:16:15-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12168148537.16.REULING@SU-SCORE.ARPA>

	 
We at Prime have had experience with preliminary versions of
several PostScript printers, communicating over the serial interface.  
We have posted notices	previously giving speed comparisons.  It 
should be noted that nobody other than Apple or Allied has brought a
product to market, so	comparisons with the LaserWriter and Linotronic
machines should not be	thought indicative of the manufacturers' 
relative merits.
		 
The fact remains that the LaserWriter is approaching its first
birthday, and I (DWB) for one remain astounded at the resilience and
bugfree-ness of the first reasonably-priced PostScript printer.
Experience and common-sense teach that the first implementation of
anything should be the one with the most problems.  The LaserWriter is,
simply, magic.  Thank goodness -- I'd hate to be the Apple manager who
orders the first ROM replacement.
			 
It even prints, beautifully, a 5-megabyte grayscale image -- portions
of the Mandelbrot Set (See Scientific American, November, p31).  It
takes 90 minutes to produce one page, which is the time taken to ship
the data at 9600 baud.  No overhead for actually forming the image.
			 
Of course, there are bugs in addition to those reported in "Apple
LaserWriter Supplement" and the PostScript Reference Manual.  After a
lot of printing of multifont documents, it can get suddenly confused
and pick the right characters out of entirely the wrong font.  The only
cure is to reboot (write your printer management software to stand for
unsolicited reboots!).  And an attempt to shear a large grayscale
picture breaks it.
					 
One unpleasant feature concerns software selection of onboard Diablo
emulation.  We would like to run our printer in a standard spooling
environment, where each job is independent and the printer runs
unattended.  If one job wants to use the Diablo emulation, it has a
problem.  Either (a) you can get the printer into Diablo mode, but you
can't get it out again or (b) you can call on the emulation in such a
way that the server still notices and interprets control-C, control-D
and control-T.  Since these are valid arguments to Diablo commands, the
job pretty soon aborts.  Anybody found a way round this?
						 
One other complaint.  Some of you folks are writing Mac-LaserWriter
software to use the full 8-bit bandwidth capability of AppleTalk.  We
like to capture your PostScript file, forward it (via our EXCELLENT
link software) to a host, and then print from the host either as is, or
pasted into another document.  This works with most MacDraw/Paint
files.  But if you use the 8-bit bandwidth, the serial input protocol
strips the top bit and makes a mess -- that's if our own host software
hasn't done so for itself by then.
							
Happy PostScript hacking!
							
  Bob Pellegrino
  David W. Brooks
Prime Computer, Inc.							

UUCP: decvax!genrad!mit-eddie!primerd!bobsun!bob
ARPA: Pellegrino@bbna
18-Dec-85 14:45:58-PST,2114;000000000000
Return-Path: <thomas%utah-gr@utah-cs.arpa>
Received: from utah-cs.ARPA by SU-SCORE.ARPA with TCP; Wed 18 Dec 85 13:37:03-PST
Received: from utah-gr.ARPA by utah-cs.ARPA (5.5/4.40.2)
	id AA06138; Wed, 18 Dec 85 14:40:02 MST
Received: by utah-gr.ARPA (4.42/4.40.2)
	id AA23652; Wed, 18 Dec 85 14:39:59 MST
Message-Id: <8512182139.AA23652@utah-gr.ARPA>
Date: 18 Dec 85 14:39:57 MST (Wed)
To: Bob Pellegrino <pellegrino@bbna.arpa>, info-postscript@su-score.arpa
Subject: Re: Postscript Misc.
In-Reply-To: Your message of Tue 17 Dec 1985 14:02:30 EST.
	     <8512171914.AA01144@bobsun.primerd.uucp>
From: =Spencer   ({ihnp4,decvax}!utah-cs!thomas, thomas@utah-cs.ARPA) <thomas%utah-gr@utah-cs.arpa>
ReSent-Date: Wed 18 Dec 85 14:45:58-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12168186716.44.REULING@SU-SCORE.ARPA>

You write:
>But if you use the 8-bit bandwidth, the serial input protocol
>strips the top bit and makes a mess -- that's if our own host software
>hasn't done so for itself by then.

I have two comments:
1. It's very hard to avoid generating 8-bit characters, without
rewriting the laserwriter printer driver on the Mac.  If you use any
'option' characters, these will come out with all 8 bits significant.

2. It's trivial to write a program that translates 8-bit characters into
the appropriate \nnn notation.  I enclose one below.

=Spencer

/* 
 * xlw.c - Fix up Mac PostScript files to send to LaserWriter.
 * 
 * Author:	Spencer W. Thomas
 * 		Computer Science Dept.
 * 		University of Utah
 * Date:	Wed Jun  5 1985
 */

#include "stdio.h"

main( argc, argv )
char **argv;
{
    FILE * f;
    int i;

    printf( "%%!\n" );

    if ( argc == 1 )
    {
	f = stdin;
	goto once;
    }

    for ( --argc, ++argv; argc > 0; argc--, argv++ )
    {
	if ( (f = fopen( *argv, "r" ) ) == NULL )
	{
	    perror( *argv );
	    continue;
	}
once:
	while ( (i = getc(f)) != EOF )
	    if ( i & 0200 )		/* meta char? */
		printf( "\\%03o", i );
	    else
		putchar(i);
    }
}
20-Dec-85 08:01:02-PST,1159;000000000000
Return-Path: <decwrl!allegra!utzoo!aesat!jalsop@glacier>
Received: from glacier by SU-SCORE.ARPA with TCP; Fri 20 Dec 85 03:16:08-PST
Received: by glacier with Sendmail; Fri, 20 Dec 85 03:17:38 pst
From: decwrl!allegra!utzoo!aesat!jalsop@glacier
Received: by decwrl.DEC.COM (4.22.01/4.7.34)
	id AA01338; Fri, 20 Dec 85 02:36:50 pst
Date: Fri, 20 Dec 85 02:36:50 pst
Message-Id: <8512201036.AA01338@decwrl.DEC.COM>
To: utzoo!allegra!decwrl!glacier!info-postscript@glacier
Subject: Error handling, etc.
ReSent-Date: Fri 20 Dec 85 08:01:02-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12168637286.14.REULING@SU-SCORE.ARPA>


Would anyone care to share their thoughts on the best ways to deal with
Postscipt printer error conditions?

For example, in designing a spooler for a Laserwriter, what is the best way
to recognize and deal with Postscript programming errors in individual
print jobs? How can power failure, paper jam, and other physical printer
problems be recognized and recovered from?

John Alsop @ AES Data Inc.
{allegra,ihnp4,linus,decvax}!utzoo!aesat!jalsop


20-Dec-85 13:17:37-PST,5095;000000000000
Return-Path: <adobe!shore@glacier>
Received: from glacier by SU-SCORE.ARPA with TCP; Fri 20 Dec 85 13:16:06-PST
Received: by glacier with Sendmail; Fri, 20 Dec 85 13:17:31 pst
Received: by adobe.UUCP (4.12/4.7)
	id AA08710; Fri, 20 Dec 85 13:16:45 pst
From: adobe!shore@glacier (Andrew Shore)
Message-Id: <8512202116.AA08710@adobe.UUCP>
Date: 20 Dec 1985 1316-PST (Friday)
To: glacier!info-postscript@glacier
Subject: Re: Error handling, etc.
In-Reply-To: glacier!decwrl!allegra!utzoo!aesat!jalsop / 
		Fri, 20 Dec 85 02:36:50 pst.
             <8512201036.AA01338@decwrl.DEC.COM>
ReSent-Date: Fri 20 Dec 85 13:17:37-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12168694918.31.REULING@SU-SCORE.ARPA>

I'm going to attempt a fairly general answer since I'm not 
exactly sure what John wanted to know.

The execution of a PostScript print job may result in arbitrary
output over the communications stream back to the host that is
sending the job.  In serial communications with a LaserWriter,
there is only one output stream which may contain:
  user output (arbitrary "print" or "write*" output)
  printer error messages (see below)
  PostScript execution error messages (see below)
  "out of band" status messages (response to ^T requests)
  job control/synchronization messages (^S/^Q flow control and ^D end of job)

Within a single print job, printer stream output may be (WILL be)
unsynchronized with stream input (i.e., the sending of that job).
The TranScript spooler interfaces use two processes -- one for
sending the PostScript job (followed by a ^D) to the printer, and
one for listening to the printer for any stream output (it
terminates when it hears the printer's ^D in response).  Flow
control is handled by the UNIX tty device driver.

Under serial (RS232) communication, when the LaserWriter power fails or
some disastrous situation causes a hard PostScript reboot.  The
Data Terminal Ready (DTR) signal goes away.  On UNIX systems, this
can be detected by noticing a hard end-of-file on the tty device
(getc returns -1).

Note that other communications protocols may have different
properties.  AppleTalk, for example, allows full 8-bit data to be
passed, as flow control, job status, and job start and end are not
embedded in the data stream.  Other network protocols may have
several output streams. One for user output, and one for errors,
etc.


Printer Errors
--------------

Printer error conditions are fairly machine-specific.  Some printer
interfaces can return detailed status information about how and
where a printer has failed, other can simply note that a generic
failure occurred.

The representation and handling of printer error and printer status
conditions is not strictly part of the PostScript Language
definition.  Rather, these are relegated to the area we call
"statusdict", of product-specific operators and extensions to the
PostScript base language.  

Physical printer problems are detected by the PostScript
interpreter.  On failure of the Canon engine during execution of a
showpage or copypage operator, the PostScript interpreter calls a
procedure named "printererror" in statusdict.  The default
operation of printererror is to send a message over the output
communications stream.  These messages are of the form:

	%%[ PrinterError: <reason> ]%%

Where <reason> is usually (but not always) some reasonable string
representation of the error condition.  Unfortunately, the Canon
interface sometimes reports bogus status information when the
printer state is in transition. For example, when the paper tray is
removed and reinserted, some untrue or undecipherable <reason>s may
appear in new messages.  Untrue being things like "service call"
and undecipherable being short strings of hex digits.  This is a
not-too-terrible problem with the LaserWriter.

Execution of the job in progress (and the showpage in progress) is
suspended until the error condition is cleared, and then the
showpage is "resumed" (and repeated until it succeeds).

TranScript parses PrinterError messages and (on 4.2 systems) 
posts a notice in the spooler "status" file (so that it can be
seen in lpq and lpc status requests).


PostScript Execution Errors
---------------------------

PostScript job execution errors are handled as described in the
PostScript Language Reference Manual.  On the LaserWriter, these
save some state information about the error and execute a "stop"
which, if uncaught, sends an error message over the output stream
and  aborts the current job.  Adobe has distributed a downloadable
"error handler" package which also prints some information about
the error on the current page.

TranScript records the error message output in the printer log file,
but performs no special functions on a PostScript error.


I can say more about all of these things if there is interest,
but I've gone on long enough.

Happy Holidays,
--Andy Shore 
  Adobe Systems Incorporated

23-Dec-85 20:30:25-PST,15107;000000000000
Return-Path: <FURUTA@WASHINGTON.ARPA>
Received: from WASHINGTON.ARPA by SU-SCORE.ARPA with TCP; Sat 21 Dec 85 18:16:03-PST
Return-Path: <decvax!utzoo!dciem!nrcaer!grpthry!rap@seismo.CSS.GOV>
Received: from seismo.CSS.GOV by WASHINGTON.ARPA with TCP; Sat 14 Dec 85 02:45:11-PST
Return-Path: <decvax!utzoo!dciem!nrcaer!grpthry!rap>
Received: from decvax.UUCP by seismo.CSS.GOV with UUCP; Sat, 14 Dec 85 05:02:42 EST
Message-Id: <8512141002.AA26775@seismo.CSS.GOV>
To: Info-Postscript@SU-SCORE.ARPA
Originally-To: nrcaer!dciem!utzoo!decvax!seismo!laser-lovers-request@washington.arpa
From: decvax!J.Rapaport@S.ARPA, decvax!Grouptheory.Systems.Inc.@seismo.CSS.GOV
Sender: decvax!rap@seismo.CSS.GOV
Date: Thu Dec  5 11:17:09 EST 1985
Subject: Plot (3) filter to PostScript
ReSent-Date: Sat 21 Dec 85 18:16:36-PST
ReSent-From: Richard Furuta <Furuta@WASHINGTON.ARPA>
ReSent-To: info-postscript@SU-SCORE.ARPA
ReSent-Date: Mon 23 Dec 85 20:30:25-PST
ReSent-From: Bob Barcklay <BARCKLAY@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12169560141.15.BARCKLAY@SU-SCORE.ARPA>

--------------

Dear Richard:  I am sending you a copy of the source for a bridge to 
the apple LaserWriter (and any other PostScript engine) that will take
output from any C program using the plot(3) library.   Full documentation
is included in the comments.  If you think this might be of help to others
on the net, feel welcome to post it.   It is called "tlw", to match the
naming convention of the other tplot filters.

In addition, I have included a small C program ("margtest.c") for testing tlw.
It draws a box around the page, near the margin that the LaserWriter 
imposes.  Since tlw likes to know the location of this margin, which differs
from machine to machine, "margtest" is an aid to determining the margin
on a given laserwriter (and perhaps, toner cartridge).  There are
#define's in the source of tlw that can be altered to indicate the location
of your margins.  See the comments in the source.

Thanks,

Steve Rapaport
{decvax, etc...} !utzoo!dciem!nrcaer!grpthry!rap

"Bottom-up Programming: If it was good enough for God..."

First, the test program, margtest.c:
------------------------- cut here ----------------------------------------


/* this is just a test program to find out where the margins are on your 
 * laserwriter.  Run it and send the output through tlw to the laserwriter.
 * it should draw a (perfectly) square box with dashed diagonals. 
 * Adjust MARGX and MARGY in tlw until the edges of the box are just visible.
 */

#include <stdio.h>
#define  BLEFT	0, 0
#define  TLEFT  0, 4096
#define  BRIGHT	4096, 0
#define  TRIGHT 4096, 4096
main ()
{
	openpl ();
	space (BLEFT, TRIGHT);
	linemod ("longdashed");
	line (BLEFT, TRIGHT);
	linemod ("shortdashed");
	line (BRIGHT, TLEFT);
	linemod ("solid");
	move (BLEFT);
	cont (TLEFT);
	cont (TRIGHT);
	cont (BRIGHT);
	cont (BLEFT);
	closepl ();
}

------------------------- cut here ----------------------------------------
Then, the bridge (tlw.c):
------------------------- cut here ----------------------------------------

/* The following program may be used, copied, and modified by anyone at will,
 * so long as this message is not removed or altered.
 * 'tlw' was written by Steve Rapaport at grouptheory systems inc., October 85.
 * {decvax, etc...}!utzoo!dciem!nrcaer!grpthry!rap
 * Copyright 1985 grouptheory systems inc.  Permission to reproduce & update
 * granted.
 */

/*
 *
 * tlw -- a filter to turn output from plot(3) library routines into postscript
 *        instructions for the Apple LaserWriter.   (or any PostScript device).
 *        Compatible with all Berkeley 4.2 PLOT(5) files.  (I think!)
 *        To install, just compile it with the math library (-lm), and
 *        put it somewhere that everyone can get at.  (e.g. /usr/bin/tlw).
 *
 *        Bugs: until end of Dec '85, mail me at utzoo!dciem!nrcaer!grpthry!rap
 *        After that, you're on your own....
 *
 *        Example of use:  Let 'plotter' be a C program containing 
 *        calls to plot(3) routines.  The following command will
 *        put the output of 'plotter' on the laserwriter:
 *
 *        plotter | tlw | <whatever you use to send PostScript to the lw>
 *
 *        In addition, tlw may be added as a 'terminal' filter to the 
 *        plot(1G) shell script (tplot(1G) in system 3) 
 *        by adding the following line to plot (or tplot):
 *
 *           -Tlw)  exec /usr/bin/tlw $* ;;
 *
 *        (or wherever you put this program)  and using -Tlw as plot option.
 *
 *        Portability:  This program has only been tested on a Plexus P/60
 *        running System 3.  It uses no fancies, though, and outputs plain
 *        ascii.  The only problem I can foresee involves the input of
 *        plot(5) files.  
 *
 *        I am using (int) variables to hold the
 *        integer parameters; if your C thinks (int) is less than 16 bits,
 *        change that declaration to (long) in main() and readswpd().
 *
 *        Customization:  The program takes no options, but certain macros 
 *        may be changed in the source to customize for your installation.
 *
 *            DEFXSCALE, DEFYSCALE:  These are the size of the laserwriter
 *            raster area, in points.  Legal size paper will require
 *            DEFYSCALE to change to 14.0 * 72.0.  
 *            to use another PostScript device (e.g., some Linotron typesetters)
 *            change these to match the raster area for your machine.  
 *            *Note* that they are (float). (If these constants are defined 
 *            without decimals, the program will behave *strangely*)
 *
 *            MARGX, MARGY:  compensate for the clipping boundaries of
 *            the laserwriter.  They are measured in points, and their
 *            effect is to reduce the page size to fit within the lw's
 *            raster area.  The numbers given here work okay on my machine,
 *            you may wish to change them to fit yours.
 *            MARGX refers to the amount that the short dimension differs
 *            from 8.5 inches (612 points), and MARGY refers to the 
 *            analagous difference from 11 inches (792 points).
 *            Note that these constants are (float).
 *
 *            FLIP:  For the sake of most graphs, defining FLIP 
 *            flips the x and y axes to make the page wider than it is tall.
 *            To reverse this effect, undefine FLIP (comment out the #define).
 *            You may want to keep two versions of the filter in your library,
 *            named, say, tlwh and tlwv, one with FLIP defined, one not.
 *
 *            FONT, PITCH:  These are the parameters that postscript takes.
 *            10 point letters seem to fit well with what the standard
 *            programs expect.  You may wish to change them, though.  If
 *            you prefer, say, Helvetica to Times Roman, you might change FONT
 *            to "/Helvetica".  PITCH is assumed integer.
 *
 *            LINEWIDTH :  This linewidth (.2 of a point) suits my taste.
 *            You may have your own opinions.  Note that the width is
 *            independent of the scale of the space.  Assumed (float).
 *
 */



/* 
 installation-dependent constants: 
 (change these at will)
 */

/* if you want plots to come out vertical on the page, comment out next line: */
#define FLIP

#define DEFXSCALE	612.0
#define DEFYSCALE	792.0
#define MARGX		39.0
#define MARGY		20.0
#define FONT        "/Times-Roman"
#define PITCH		10
#define LINEWIDTH	.2

/* 
 * change the following at your own peril: 
 */

#include <stdio.h>
#include <math.h>
#define FOREVER		1
#define DEGREES		* 180.0 / 3.141592654
#define DOTS		/ scale
#define min(a,b)   ( (a < b) ? a : b )
#define MARGSCALE   min(( DEFXSCALE - MARGX )/DEFXSCALE,  \
					    ( DEFYSCALE - MARGY )/DEFYSCALE)

main()  
/*  hacker's notes:  (if you're reading this far, you are probably one such.)
 *
 *  Program assumes you may use the 'space' scaling function once, many times,
 *  or not at all.  This creates some extra (dumb-looking) PostScript output.
 *  If you try to optimize, keep this assumption in mind.
 *
 *  Upon finding errors in the input, my version skips up to the next newline
 *  and continues reading.  This is good if you want to put comments into your
 *  plot (5) files.  If not, just making the default case in the switch a
 *  null switch (comment out the one executable statement in it) will
 *  ignore each invalid character.
 *  
 *  You may notice a strange moveto in the label section.  This is my 
 *  (trial-and-error determined) kludge to make the first letter of the
 *  label come out CENTERED on the current point.  Plot seems to expect that.
 *
 *  Erase just erases the current page without printing.  I think that's how
 *  it's supposed to work.  If you want it to flush instead, change the 
 *  printf("erasepage\n") to printf("showpage\n");
 *
 */
{
	int x, y, x2, y2, xc, yc;  /* or whatever 16 bits is in your C    */
									 /* if a short int is less than 16 bits */
									 /* this program won't work unless you  */
									 /* change this declaration.            */
	float r, ang1, ang2;
	float xscale, yscale;
	float scale = 1.0;
	float newpitch = (float) PITCH;
	float newlinew = LINEWIDTH;
	char command;
	char *dashstyle;
	char string [257];

	printf ("%% -------------------------------------------------- %%\n");
	printf ("%% This is a PostScript (TM) program produced by tlw,\n");
	printf ("%% from standard plot(5) output. \n");
	printf ("%% (S.J. Rapaport, grouptheory systems, 1985)\n");

	printf ("\n\n");
	printf ("/tlwcontext save def\n");
	printf ("%f setlinewidth\n", LINEWIDTH);
	printf ("%s findfont %d scalefont setfont\n",FONT, PITCH);

	initcoords ();

	do {
		command = getchar();
		switch (command)
		{
			default:   /* if invalid command char, skip rest of line */

				/* This is good if you want to put comments into your
				   plot (5) files.  If not, just commenting out the 
				   next line will ignore each invalid character.
				 */

				if (! gets(string)) fin (0);
			break;

			case 'm':   /*   move (x, y)   */
				readswpd (&x, stdin);
				readswpd (&y, stdin);
				printf ("%d %d moveto\n",x, y); 
			break;

			case 'n':   /*   cont (x, y)   */
				readswpd (&x, stdin);
				readswpd (&y, stdin);
				printf ("%d %d lineto\n", x, y);
				printf ("currentpoint   stroke   moveto\n");
			break;

			case 'p':   /*   point (x, y)  */
				readswpd (&x, stdin);
				readswpd (&y, stdin);
				printf ("gsave \n");
				printf ("1 setlinecap\n");
				printf ("currentlinewidth 2 mul setlinewidth\n");
				printf ("%d %d moveto\n", x, y);
				printf ("0 0  rlineto\n");
				printf ("stroke\n");
				printf ("grestore\n");
			break;

			case 'a':   /*   arc (xc, yc, x, y, x2, y2)   */
				readswpd (&xc, stdin);
				readswpd (&yc, stdin);
				readswpd (&x, stdin);
				readswpd (&y, stdin);
				readswpd (&x2, stdin);
				readswpd (&y2, stdin);
				r = sqrt ((float) ((x-xc) * (x-xc) + (y-yc) * (y-yc)));
				ang1 = atan ( (float) (y-yc) / (float) (x-xc) ) DEGREES;
				ang2 = atan ( (float) (y2-yc) / (float) (x2-xc) ) DEGREES;
				if ((x - xc) < 0) ang1 = 180.0 + ang1;
				if ((x2 - xc) < 0) ang2 = 180.0 + ang2;
				printf ("newpath \n");
				printf ("%d %d %6.3f %6.3f %6.3f arc\n", xc, yc, r, ang1, ang2);
				printf ("currentpoint   stroke   moveto\n");
			break;

			case 'c':   /*   circle (xc, yc, r)   */
				readswpd (&xc, stdin);
				readswpd (&yc, stdin);
				readswpd (&x, stdin);
				printf ("newpath \n");
				printf ("%d %d %d 0 360 arc\n", xc, yc, x);
				printf ("currentpoint   stroke   moveto\n");
			break;

			case 'l':   /*   line (x, y, x2, y2)   */
				readswpd (&x, stdin);
				readswpd (&y, stdin);
				readswpd (&x2, stdin);
				readswpd (&y2, stdin);
				printf ("%d %d moveto\n", x, y); 
				printf ("%d %d lineto\n", x2, y2);
				printf ("currentpoint   stroke   moveto\n");
			break;

			case 't':   /*   label ( string )   */
				if (! gets(string) ) fin (0);
				printf ("%6.3f %6.3f rmoveto\n", -newpitch/4, -newpitch/4);
				printf ("\t(%s) show\n", string);
				printf ("%6.3f %6.3f rmoveto\n", newpitch/4, newpitch/4);
			break;

			case 'e':    /*  erase ()   */
					printf ("erasepage\n");  /* just erase current page */
			break;

			case 'f':    /*  linemod(dashstyle)   */
				if (! gets(string) ) fin (0);
				dashstyle = string;

				if (strcmp (dashstyle, "dotted") == 0) {
				printf("[%6.3f %6.3f] 0 setdash\n", 1 DOTS, 4 DOTS);
				}
				else if (strcmp (dashstyle, "solid") == 0) {
				printf("[] 0 setdash\n");
				}
				else if (strcmp (dashstyle, "longdashed") == 0) {
				printf("[%6.3f %6.3f] 0 setdash\n", 4 DOTS, 1 DOTS);
				}
				else if (strcmp (dashstyle, "shortdashed") == 0) {
				printf("[%6.3f %6.3f] 0 setdash\n", 2 DOTS, 3 DOTS);
				}
				else if (strcmp (dashstyle, "dotdashed") == 0) {
				printf("[%6.3f %6.3f %6.3f %6.3f] 0 setdash\n",5 DOTS, 2 DOTS, 1 DOTS, 2 DOTS);
				}
				else break;   /* ignore any other styles */
			break;

			case 's':   /*   space (x, y, x2, y2)   */
				readswpd (&x, stdin);
				readswpd (&y, stdin);
				readswpd (&x2, stdin);
				readswpd (&y2, stdin);

				xscale =  DEFXSCALE / (float) (x2 - x);
				yscale =  DEFYSCALE / (float) (y2 - y);
				scale = (xscale < yscale) ? xscale : yscale;  /* min */
				newlinew = LINEWIDTH / scale;
				newpitch = PITCH / scale;

				initcoords();
				printf ("%d %d translate\n", -x, -y);
				printf ("%6.3f %6.3f scale\n", scale, scale);
				printf ("%6.3f setlinewidth\n", newlinew);
				printf ("%s findfont ", FONT);
				printf ("%6.3f scalefont ", newpitch);
				printf ("setfont\n");
			break;

		} /* end of switch */

	} while (FOREVER);      
}

initcoords ()  /* set up coordinate system default  (before scaling) */
{
#ifdef FLIP
	printf("initmatrix\n");
	printf("90 rotate\n");
	printf("0 %f translate \n", -DEFXSCALE);
	printf("%4.1f %4.1f translate \n", MARGY / 2, MARGX / 2);
	printf("%f %f scale \n", MARGSCALE, MARGSCALE);
#else
	printf("initmatrix\n");
	printf("%4.1f %4.1f translate \n", MARGX / 2, MARGY / 2);
	printf("%f %f scale \n", MARGSCALE, MARGSCALE);
#endif
}

readswpd (location, stream) 
int *location;
FILE *stream;
{
	int nextch;

	nextch = getc(stream);
	*location = getc(stream);
	*location = ((0377 & (*location)) << 8) + (0377 & nextch);
}


fin (error)  /* end of input file */
int error;
{
	if (! error)  /* flush output at end of file */ {
		printf ("\nshowpage\n");
		printf ("\ntlwcontext restore\n");
	}
	else    /* fatal error (none provided in original source) */
		printf ("%% fatal error in input file: no page produced.\n");
	exit (error);
}
---------------




 3-Jan-86 13:34:06-PST,1192;000000000000
Return-Path: <holtz%cascade.carleton.cdn%ubc.csnet@CSNET-RELAY.ARPA>
Received: from glacier by SU-SCORE.ARPA with TCP; Thu 2 Jan 86 11:33:49-PST
Received: from CSNET-RELAY.ARPA by glacier with Sendmail; Thu, 2 Jan 86 11:35:31 pst
Received: from ubc by csnet-relay.csnet id ad00676; 2 Jan 86 14:22 EST
Date: Thu, 2 Jan 86 11:01:55 pst
Received: by ubc.csnet id AA09032; Thu, 2 Jan 86 11:01:55 pst
From: Neal Holtz <holtz%cascade.carleton.cdn%ubc.csnet@CSNET-RELAY.ARPA>
To: Info-Postscript <info-postscript@su-glacier.ARPA>
Message-Id: <62:holtz@cascade.carleton.cdn>
Subject: HP 7475 emulator??
ReSent-Date: Fri 3 Jan 86 13:34:06-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12172367936.25.REULING@SU-SCORE.ARPA>

Does anyone have postscript code to emulate any of the small HP
plotters, that they would be willing to give out?
Preferably HP 7475, though I don't know what difference there
might be from other HP's.

We have some masochists here that use PC clones, and Autocad,
and I suppose that is one way of getting output on our LaserWriter.
Or does anyone know if Autocad will soon support PostScript?

 8-Jan-86 11:50:49-PST,1512;000000000000
Return-Path: <decwrl!allegra!utzoo!aesat!jalsop@glacier>
Received: from glacier by SU-SCORE.ARPA with TCP; Tue 7 Jan 86 08:53:39-PST
Received: by glacier with Sendmail; Tue, 7 Jan 86 08:55:31 pst
From: decwrl!allegra!utzoo!aesat!jalsop@glacier
Received: by decwrl.DEC.COM (4.22.01/4.7.34)
	id AA23245; Tue, 7 Jan 86 07:41:29 pst
Date: Tue, 7 Jan 86 07:41:29 pst
Message-Id: <8601071541.AA23245@decwrl.DEC.COM>
To: utzoo!allegra!decwrl!glacier!info-postscript@glacier
Subject: LaserWriter Courier-Oblique
ReSent-Date: Wed 8 Jan 86 11:50:49-PST
ReSent-From: Bob Barcklay <BARCKLAY@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12173659854.18.BARCKLAY@SU-SCORE.ARPA>


Perhaps someone can tell me what I am doing wrong! The following code, when
sent to the Laserwriter, prints fine, except that I don't get the Courier-
Oblique font. Instead I get what looks like a 10 pt. Courier font.

The BoldOblique works fine.

-----------------------------------------------------------------------

30 600 moveto
/s (ABCDEFGhijklmnop 0123456789) def
/nl {s show currentpoint 18 sub exch pop 30 exch moveto} def

/Courier findfont 12 scalefont setfont
nl

/Courier-Oblique findfont 12 scalefont setfont
nl 

/Courier-BoldOblique findfont 12 scalefont setfont
nl


showpage

----------------------------------------------------------------------


Thanks in advance for any help,

John Alsop @ AES Data Inc.
{allegra,ihnp4,linus,decvax}!utzoo!aesat!jalsop


 9-Jan-86 09:16:12-PST,857;000000000000
Return-Path: <ned%UPenn-Grasp%upenn.csnet@CSNET-RELAY.ARPA>
Received: from CSNET-RELAY.ARPA by SU-SCORE.ARPA with TCP; Thu 9 Jan 86 06:02:22-PST
Received: from upenn by csnet-relay.csnet id ag03625; 9 Jan 86 8:58 EST
Received: by UPenn-Grasp.CSNET
	id AA00230; Wed, 8 Jan 86 10:26:13 est
Date: Wed, 8 Jan 86 10:26:13 est
From: ned%UPenn-Grasp%upenn.csnet@CSNET-RELAY.ARPA
To: info-postscript@su-score.arpa
Subject: LaserWriter II
Received: from UPenn-Grasp by UPenn; Wed, 8 Jan 86 10:29 EST
ReSent-Date: Thu 9 Jan 86 09:16:11-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12173893848.22.REULING@SU-SCORE.ARPA>

Apparently, Apple is getting ready to introduce the LaserWriter II, which is
said to run an "extended PostScript". Can anyone clarify how it has been
extended?

--Ned.
 9-Jan-86 19:30:04-PST,841;000000000000
Return-Path: <reid@glacier>
Received: from glacier by SU-SCORE.ARPA with TCP; Thu 9 Jan 86 19:07:41-PST
Received: by glacier with Sendmail; Thu, 9 Jan 86 19:09:17 pst
Date: Thu, 9 Jan 86 19:09:17 pst
From: Brian Reid <reid@glacier>
Subject: PostScript printer in Amsterdam?
To: info-postscript@score
ReSent-Date: Thu 9 Jan 86 19:30:04-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12174005601.20.REULING@SU-SCORE.ARPA>

I'm trying to get a paper to an editor in Amsterdam ASAP.
Is there anybody in Amsterdam, preferably at CWI, who has
a LaserWriter and who would be willing to print a 10-page
paper on it for me? I'd happily reimburse all of your 
expenses or else bring you some exotic contraband from
California the next time I am there.

Brian Reid
Stanford
10-Jan-86 15:20:24-PST,1461;000000000000
Return-Path: <ned%UPenn-Grasp%upenn.csnet@CSNET-RELAY.ARPA>
Received: from CSNET-RELAY.ARPA by SU-SCORE.ARPA with TCP; Thu 9 Jan 86 21:16:13-PST
Received: from upenn by csnet-relay.csnet id ar11059; 9 Jan 86 23:56 EST
Received: by UPenn-Grasp.CSNET
	id AA10474; Thu, 9 Jan 86 13:40:46 est
Date: Thu, 9 Jan 86 13:40:46 est
From: ned%UPenn-Grasp%upenn.csnet@CSNET-RELAY.ARPA
To: info-postscript@su-score.arpa
Subject: 2-up on any PostScript file.
Received: from UPenn-Grasp by UPenn; Thu, 9 Jan 86 13:43 EST
ReSent-Date: Fri 10 Jan 86 15:20:23-PST
ReSent-From: Bob Barcklay <BARCKLAY@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12174222292.23.BARCKLAY@SU-SCORE.ARPA>

    Here at Penn, we solved the 2-up problem by writing a prelude and
postlude that can be wrapped around any PostScript file to make it print
2-up (or 4-up or 8-up, etc). The design was guided by the reference manual,
so I think any PostScript code which follows the rules laid out there will
work. It has been tested successfully on output from pscat, psdit, Scribe,
dvips (although it can do 2-up itself), enscript, and even examples from the
cookbook (bigprint.ps (the poster) is interesting!). Everything is taken
care of, including clipping.
    If anyone out there would like a copy, drop me a line.

Ned Batchelder		University of Pennsylvania
(ned@UPenn.CSnet)	CIS Dept, 200 South 33rd Street
(215) 898-5617		Philadelphia, PA, 19104-6389
16-Jan-86 10:58:49-PST,1451;000000000000
Return-Path: <mcvax!lasso!ralph@seismo.CSS.GOV>
Received: from seismo.CSS.GOV by SU-SCORE.ARPA with TCP; Thu 16 Jan 86 09:35:58-PST
Return-Path: <mcvax!lasso!ralph>
Received: from mcvax.UUCP by seismo.CSS.GOV with UUCP; Thu, 16 Jan 86 12:28:46 EST
Received: by mcvax.UUCP; Thu, 16 Jan 86 16:26:25 +0100 (MET)
Received: by mcvax.UUCP; Thu, 16 Jan 86 16:26:04 +0100 (MET)
Received: by inria.UUCP; Thu, 16 Jan 86 15:54:05 -0100 (MET)
Message-Id: <8601161454.AA03195@inria.UUCP>
Date: Thu Jan 16 15:38:43 GMT+1:00 1986
From: mcvax!lasso!ralph@seismo.CSS.GOV	(Ralph Sobek)
To: laser-lovers@washington.ARPA, info-postscript@su-score.ARPA
Subject: Postscript Print Server
ReSent-Date: Thu 16 Jan 86 10:58:49-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12175747539.44.REULING@SU-SCORE.ARPA>

Does anybody have (or have considered) a Postcript machine (e.g., Laserwriter) 
hooked up as a print server on an Ethernet either directly or through something
like a Bridge CS/1 ?  How (un)worthwhile is such a venture?  It should allow
the laser printer to run closer to its capacity!?  For example, a Laserwriter
should be able to go way above 9600 bauds to something like 230 Kbauds(?) (in 
the documentation that I could get hold of).

Reply to me directly, and if there is enough interest I'll post a summary
to the net.

	Ralph P. Sobek

	UUCP:	mcvax!inria!lasso!ralph

16-Jan-86 17:37:50-PST,1411;000000000000
Return-Path: <allegra!phri!roy@seismo.CSS.GOV>
Received: from seismo.CSS.GOV by SU-SCORE.ARPA with TCP; Thu 16 Jan 86 16:50:14-PST
Return-Path: <allegra!phri!roy>
Received: from allegra.UUCP by seismo.CSS.GOV with UUCP; Thu, 16 Jan 86 19:45:58 EST
Received: by phri.UUCP (4.12/4.7)
	id AA21518; Thu, 16 Jan 86 19:11:10 est
Date: Thu, 16 Jan 86 19:11:10 est
From: allegra!phri!roy@seismo.CSS.GOV (Roy Smith)
Message-Id: <8601170011.AA21518@phri.UUCP>
To: allegra!seismo!su-score.arpa!INFO-POSTSCRIPT@seismo.CSS.GOV
Subject: High-res PS typesetting
ReSent-Date: Thu 16 Jan 86 17:37:50-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12175820178.12.REULING@SU-SCORE.ARPA>

	There was some discussion a while ago about typesetting shops that
would print PostScript files on high-res devices (i.e. Mergs).  I ran
across an ad in the NY Times which I though some people might be interested
in.  It reads:

	Electronic Publishing -- APPLE LASERWRITER.  Typesetting - Word
	Processing - Desk-top Publishing - Newsletters - 2540 DPI avail -
	IBM to Apple conversion.

	I take this to mean that if you give them a Mac disk (or maybe 1/2
inch tape?) they will run your PS stuff through a Merg for a price.  I have
no idea what that price might be, or any other details.  The only name
given is "PCMS" with a phone number (212)-222-9336.
20-Jan-86 15:11:41-PST,1322;000000000000
Return-Path: <ned%UPenn-Grasp%upenn.csnet@CSNET-RELAY.ARPA>
Received: from CSNET-RELAY.ARPA by SU-SCORE.ARPA with TCP; Fri 17 Jan 86 21:55:26-PST
Received: from upenn by csnet-relay.csnet id an07080; 18 Jan 86 0:51 EST
Received: by UPenn-Grasp.CSNET
	id AA22048; Fri, 17 Jan 86 12:45:22 est
Date: Fri, 17 Jan 86 12:45:22 est
From: ned%UPenn-Grasp%upenn.csnet@CSNET-RELAY.ARPA
To: info-postscript@su-score.arpa
Subject: Error handler and timeout
Received: from UPenn-Grasp by UPenn; Fri, 17 Jan 86 12:48 EST
ReSent-Date: Mon 20 Jan 86 15:11:41-PST
ReSent-From: Bob Barcklay <BARCKLAY@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12176842147.8.BARCKLAY@SU-SCORE.ARPA>

We have two LaserWriters running from VMS under custom spooling software.
When we tried downloading ehandler.ps (from the TranScript package), it
worked fine, except that when the LaserWriter fell idle, it printed a break
page for the 'timeout' error. We consider this unreasonable. The question
is: Is there something the spooler can do to keep the printer idle without
having it execute the timeout error operator? Alternately, can anyone help
with a modification to ehandler.ps either to keep it from responding to
timeout errors, or to allow it be downloaded on a per-job basis?

Profuse thanks,

--Ned.
20-Jan-86 20:34:15-PST,1280;000000000000
Return-Path: <hitchens@uo.UTEXAS.EDU>
Received: from uo.UTEXAS.EDU by SU-SCORE.ARPA with TCP; Mon 20 Jan 86 17:15:47-PST
Received: by uo.UTEXAS.EDU (LucasFilm SM); Mon, 20 Jan 86 19:12:10 CST
From: hitchens@uo.UTEXAS.EDU (Ron Hitchens, TP Repairman)
To: BARCKLAY@su-score
Subject: Re:  Error handler and timeout
Cc: info-postscript@su-score
ReSent-Date: Mon 20 Jan 86 20:34:14-PST
ReSent-From: Bob Barcklay <BARCKLAY@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12176900868.11.BARCKLAY@SU-SCORE.ARPA>

  Re: timeout errors after a job causing an error page to be sent:

  No problem, just be sure a ^D is sent as the last character of the
job.  A timeout error occurs when a job is in progress and nothing is
recieved in a given amount of time.  The ^D is end-of-file and signals
the completion of the job, at which point the LW goes idle.  Timeouts
don't occur while idle, so the LW will sit there contentedly until
something else comes down the line.  

  We drive a LW from a Unix spooler and have no problems with timeouts,
I set the tr (trailer) field of the printcap to ^D to be sure one is 
always sent after a job is finished.

  It's also important that a ^D seperate jobs because that's when 
memory reclaims are done.  

20-Jan-86 20:35:09-PST,1825;000000000000
Return-Path: <adobe!shore@glacier>
Received: from glacier by SU-SCORE.ARPA with TCP; Mon 20 Jan 86 18:11:57-PST
Received: by glacier with Sendmail; Mon, 20 Jan 86 18:13:52 pst
Received: by adobe.UUCP (4.12/4.7)
	id AA20480; Mon, 20 Jan 86 18:08:43 pst
From: adobe!shore@glacier (Andrew Shore)
Message-Id: <8601210208.AA20480@adobe.UUCP>
Date: 20 Jan 1986 1808-PST (Monday)
To: glacier!info-postscript@glacier
Subject: Re: Error handler and timeout
In-Reply-To: glacier!ned%UPenn-Grasp%upenn.csnet@CSNET-RELAY.ARPA / 
		Fri, 17 Jan 86 12:45:22 est.
             <8601202319.AA16782@adobe.UUCP>
ReSent-Date: Mon 20 Jan 86 20:35:08-PST
ReSent-From: Bob Barcklay <BARCKLAY@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12176901032.11.BARCKLAY@SU-SCORE.ARPA>

The behavior you report sounds absolutely correct and is indeed
unreasonable.  I suspect that you were getting a timeout all along, but
never knew it until the error handler was present.

Remember that the LaserWriter consumes a sequence of "jobs".
Over serial I/O, a job is terminated by a control-D.
My guess is that your spooler is not sending a control D
after it is done sending the user's file.  PostScript
thinks it is still waiting for input from the current job
and eventually times out when none is forthcoming.

The control D serves several purposes.  It sends the PostScript
interpreter around its "server loop" thus doing a restore which
reclaims any VM your job may have consumed but not freed.  It
also makes the printer go truly idle (assuming another job isn't
following immediately).  This allows the idle time scan conversion
to kick in.  See the PostScript Language Reference Manual appendix D,
especially sections 3 and 4 for more information.

--Andy Shore
  Adobe Systems Incorporated


21-Jan-86 08:17:39-PST,1060;000000000000
Return-Path: <jenny@renoir.berkeley.edu>
Received: from ucbvax.berkeley.edu by SU-SCORE.ARPA with TCP; Mon 20 Jan 86 22:21:25-PST
Received: by ucbvax.berkeley.edu (5.44/1.7)
	id AA05803; Mon, 20 Jan 86 21:46:34 PST
Received: by renoir.berkeley.edu (5.44/5.16)
	id AA17044; Mon, 20 Jan 86 21:46:29 PST
Date: Mon, 20 Jan 86 21:46:29 PST
From: jenny@renoir.berkeley.edu (Kathryn Hargreaves)
Message-Id: <8601210546.AA17044@renoir.berkeley.edu>
To: info-postscript@su-score.arpa
Subject: font names.
ReSent-Date: Tue 21 Jan 86 08:17:39-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12177028921.20.REULING@SU-SCORE.ARPA>

Hello,
   The cookbook for PostScript says that it's possible to
write a PostScript program to find out what the fonts
are that are loaded on a device. (The fonts' names, that is.)

Unfortunately, they don't bother to tell you what the
program is. Can someone tell me what it is?

Please reply by mail.

Thanks,

ucbvax!jenny   jenny@ucbvax.berkeley.edu

22-Jan-86 14:46:01-PST,793;000000000000
Return-Path: <CC.JOSEPH@A20.UTEXAS.EDU>
Received: from A20.UTEXAS.EDU by SU-SCORE.ARPA with TCP; Wed 22 Jan 86 14:43:38-PST
Date: Wed 22 Jan 86 16:45:13-CST
From: Mildred <cc.joseph@A20.UTEXAS.EDU>
Subject: PostScript print program
To: info-postscript@SU-SCORE.ARPA
cc: joseph@A20.UTEXAS.EDU
Message-ID: <12177361619.11.CC.JOSEPH@A20.UTEXAS.EDU>
ReSent-Date: Wed 22 Jan 86 14:46:01-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12177361765.50.REULING@SU-SCORE.ARPA>

Does anyone know of a public domain or vendor supplied program to allow a
Scribe PostScript file, to be printed on an Apple LaserWriter that is connected
to the user's terminal through the printer port?  Any information would
be appreciated.
-------
22-Jan-86 17:16:03-PST,1709;000000000000
Return-Path: <trewitt@su-amadeus.arpa>
Received: from su-amadeus.arpa by SU-SCORE.ARPA with TCP; Wed 22 Jan 86 15:37:24-PST
Received: by su-amadeus.arpa with TCP; Wed, 22 Jan 86 15:38:41 pst
Date: 22 Jan 1986 1538-PST (Wednesday)
From: Glenn Trewitt <trewitt@su-amadeus.arpa>
To: Mildred <cc.joseph@A20.UTEXAS.EDU>, info-postscript@score
Cc: Glenn Trewitt <trewitt@amadeus>
Subject: Re: PostScript print program
In-Reply-To: Mildred <cc.joseph@A20.UTEXAS.EDU> / Wed 22 Jan 86 16:45:13-CST.
             <12177361619.11.CC.JOSEPH@A20.UTEXAS.EDU>
ReSent-Date: Wed 22 Jan 86 17:16:03-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12177389077.17.REULING@SU-SCORE.ARPA>

It depends on your terminal.  Terminals that have printer ports have one
escape sequence to start sending all characters to the printer port and
another to stop it.  The exact sequence will vary between terminals.
DEC VT1xx's can do this, but I don't know any of the escape codes.

The first thing to try is to cause your computer to send (to your
terminal) the "PrinterOn" sequence, the PostScript file, and then the
"PrinterOff" sequence.

If you are sending data too fast, the printer may send a ^S to stop
transmission and ^Q to restart it later.  "Too fast" is totally
dependent upon the document being printed.  If your terminal sends the
^S/^Q from the printer to your computer and you have XON/XOFF handling
turned on at the computer, you are in good shape.  If the terminal
doesn't pass through ^S/^Q (quite possible), you will have to lower the
speed.

There is nothing special about PostScript files generated by Scribe.

	- Glenn Trewitt
22-Jan-86 19:15:14-PST,1342;000000000000
Return-Path: <harrison@renoir.berkeley.edu>
Received: from ucbvax.berkeley.edu by SU-SCORE.ARPA with TCP; Wed 22 Jan 86 16:58:13-PST
Received: by ucbvax.berkeley.edu (5.44/1.7)
	id AA15380; Wed, 22 Jan 86 16:23:21 PST
Received: by renoir.berkeley.edu (5.44/5.16)
	id AA27735; Wed, 22 Jan 86 16:23:06 PST
From: harrison@renoir.berkeley.edu (Michael Harrison)
Message-Id: <8601230023.AA27735@renoir.berkeley.edu>
To: Mildred <cc.joseph@a20.utexas.edu>
Cc: info-postscript@su-score.arpa, joseph@a20.utexas.edu,
        harrison@renoir.berkeley.edu
Subject: Re: PostScript print program
In-Reply-To: Your message of Wed 22 Jan 86 16:45:13-CST.
	     <12177361619.11.CC.JOSEPH@A20.UTEXAS.EDU>
Date: 22 Jan 86 16:23:02 PST (Wed)
ReSent-Date: Wed 22 Jan 86 19:15:14-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12177410772.13.REULING@SU-SCORE.ARPA>

While waiting for my home computer (SUN III) to be delivered, I ran a
laser-writer from a concept-108 connected to Berkleley UNIX systems
running transcript.
I printed all kinds of files (including dvi files) with this arrangement.
I even hacked programs to do mailing labels and envelopes.
	It was so slow (1200 baud) that it was like a mule towing a
car but it worked. Anyone who needs the program can have it.
23-Jan-86 00:00:35-PST,2211;000000000000
Return-Path: <allegra!phri!roy@seismo.CSS.GOV>
Received: from seismo.CSS.GOV by SU-SCORE.ARPA with TCP; Wed 22 Jan 86 23:48:49-PST
Return-Path: <allegra!phri!roy>
Received: from allegra.UUCP by seismo.CSS.GOV with UUCP; Thu, 23 Jan 86 02:45:36 EST
Received: by phri.UUCP (4.12/4.7)
	id AA05265; Wed, 22 Jan 86 21:12:59 est
Date: Wed, 22 Jan 86 21:12:59 est
From: allegra!phri!roy@seismo.CSS.GOV (Roy Smith)
Message-Id: <8601230212.AA05265@phri.UUCP>
To: allegra!seismo!su-score.arpa!info-postscript@seismo.CSS.GOV
Subject: Re:  PostScript print program
ReSent-Date: Thu 23 Jan 86 00:00:35-PST
ReSent-From: Bob Barcklay <BARCKLAY@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12177462720.16.BARCKLAY@SU-SCORE.ARPA>

	cc.joseph@A20.UTEXAS.EDU wants to use a LaserWriter on the printer
port of a terminal.  I submit the following Unix shell script I threw
together just yesterday when we got our LW (I'm having a ball with it).
It's grungy, non-portable, and doesn't deal with errors at all.  It does,
however, do the job.

----------------
#
# Shove a PostScript file out the printer port on a X3.64 terminal.  A ^D
# is appended as the PostScript end-of-job marker.  This is a rather stupid
# implementation and doesn't do anything about error or status messages.
#
stty litout
echo -n '<escape>[5i'
cat $1 $2 $3 $4 $5 $6 $7 $8 $9
echo showpage
echo -n '<control-d><escape>[4i'
stty -litout
----------------

	To use it just say "laser file1 file2 file3 ..." or "... | laser".
To really re-constitute the shell file, you have to replace the items
inside the <>'s with the obvious stuff.  The echo'd escape sequences make a
VT-100 clone enter/exit printer-controller mode.  Obviously, you really
want to add those capabilities to your termcap/terminfo data bases like we
did here.  The litout mode allows the ^D to get out.

	I don't imagine it would be hard to translate this to whatever
passes for a shell on TOPS-20 or VMS.  Then again, I've never known
anything to be easy on either of those, so I might be wrong. :-)

Roy Smith <allegra!phri!roy>
System Administrator, Public Health Research Institute
455 First Avenue, New York, NY 10016
23-Jan-86 09:34:50-PST,1692;000000000000
Return-Path: <robinson%chopin.DEC@decwrl.DEC.COM>
Received: from decwrl.DEC.COM by SU-SCORE.ARPA with TCP; Thu 23 Jan 86 06:18:51-PST
Received: from DEC-RHEA.ARPA (dec-rhea) by decwrl.DEC.COM (4.22.01/4.7.34)
	id AA02133; Thu, 23 Jan 86 06:21:42 pst
Message-Id: <8601231421.AA02133@decwrl.DEC.COM>
Date: Thursday, 23 Jan 1986 05:55:42-PST
From: robinson%chopin.DEC@decwrl.DEC.COM  (Scott G. Robinson LTN1-2/B17 DTN 226-6279)
To: info-postscript@su-score.ARPA, robinson%chopin.DEC@decwrl.DEC.COM
Subject: Re: to the REs: PostScript print program
ReSent-Date: Thu 23 Jan 86 09:34:49-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12177567257.41.REULING@SU-SCORE.ARPA>

Before everyone tries to hook up their LWs to printer ports let me
recount my experience.

The LW wants a bi-directional port, some manufacturer's terminals send out the
printer port but only handle ^S/^Q characters from the printer (i.e. you don't
get characters back from the printer port to a program running on the host).
For instance, DEC VT1xx and VT220s are this way. The DEC VT24x, though, does
have a bidirectional mode for its printerport. I had all kinds of problems
sending postscript to the LW through a VT220!

I then switched to a VT240 and it worked about 99% of the time; I was not able
to achieve 100% reliability. To get it mostly reliable I had to run the
printer port at 9600 baud and the computer-to-terminal line at 4800 baud.
It would seem there is some buffer delay in the LW and VT240 which would
cause LW overruns.

I eventually switched over to a direct connection, mostly frustrated.

- Scott Robinson


23-Jan-86 11:54:06-PST,1326;000000000000
Return-Path: <oakhill!eifert@sally.LOCAL>
Received: from sally.UTEXAS.EDU by SU-SCORE.ARPA with TCP; Thu 23 Jan 86 09:00:36-PST
Posted-Date: Thu, 23 Jan 86 09:01:02 cst
Received: by sally.UTEXAS.EDU (4.22/4.22)
	id AA23469; Thu, 23 Jan 86 10:32:11 cst
Received: by oakhill.UUCP (4.12/4.7)
	id AA19814; Thu, 23 Jan 86 09:01:02 cst
Date: Thu, 23 Jan 86 09:01:02 cst
From: oakhill!eifert@sally.LOCAL (Jim Eifert)
Message-Id: <8601231501.AA19814@oakhill.UUCP>
To: ut-sally!info-postscript@SU-SCORE.ARPA
Subject: Mixing Macintosh and Nroff
ReSent-Date: Thu 23 Jan 86 11:54:06-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12177592610.9.REULING@SU-SCORE.ARPA>


	Has anyone worked on including macintosh drawings
in nroff and troff documents?  On our apollo laserprinter,
we can print macintosh documents, or print nroff documents
with a line printer emulator (we are still waiting on ditroff
and ditroff->postscript).  We need to be able to include
the macintosh documents as figures inside the nroff documents
(and troff when we get it).  If anyone has done this,
please let me know how to do it (or what we neet to buy).

Jim Eifert <ut-sally!oakhill!eifert>
Motorola Microcomputer Design
6501 Wm. Cannon Dr. West
Austin, Texas  78735-8598
24-Jan-86 12:14:38-PST,1814;000000000000
Return-Path: <pwong%pixel.DEC@decwrl.DEC.COM>
Received: from decwrl.DEC.COM by SU-SCORE.ARPA with TCP; Fri 24 Jan 86 11:59:26-PST
Received: from DEC-RHEA.ARPA (dec-rhea) by decwrl.DEC.COM (4.22.01/4.7.34)
	id AA29201; Fri, 24 Jan 86 12:02:18 pst
Message-Id: <8601242002.AA29201@decwrl.DEC.COM>
Date: 24-Jan-1986 1435
From: pwong%pixel.DEC@decwrl.DEC.COM  (Paul H. Wong, DPS/Graphics, 264-7918)
To: info-postscript@su-score.ARPA, info_postscript%pixel.DEC@decwrl.DEC.COM,
        pwong%pixel.DEC@decwrl.DEC.COM
Subject: Re: Error handler and timeout
ReSent-Date: Fri 24 Jan 86 12:14:38-PST
ReSent-From: Bob Barcklay <BARCKLAY@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12177858492.17.BARCKLAY@SU-SCORE.ARPA>


I have a LaserWriter set up as a terminal queue under VMS V4.2.
I have tried all the tricks I can imagine to append a Control-D
to my print job but so far have no luck.  What I ended up doing
was hacking the error handler to *NOT* print the timeout message
when the errorname is (timeout).

So, all I did was replacing the line containing the showpage

     systemdict/showpage get exec(%%[ Error: )print

with a conditional statement:

     errorname (timeout) eq
     {systemdict/erasepage get exec systemdict/initgraphics get exec}
     {systemdict/showpage get exec} ifelse (%%[ Error: )print

It seems to be working so far and it is saving me one page after each job.
I still would love to know the *correct* way of sending a end-of-job signal
to the LaserWriter from VMS, though.

- Paul

---------------------------------------------------------------------
Paul H. Wong
Digital Equipment Corp.
Merrimack, NH
(603)-884-7918

ARPA: 	PWong%PIXEL.DEC@decwrl.arpa
USENET:	{allegra|decvax|ihnp4|ucbvax}!decwrl!dec-rhea!dec-pixel!pwong
26-Jan-86 15:34:57-PST,1086;000000000000
Return-Path: <egisin%waterloo.csnet@CSNET-RELAY.ARPA>
Received: from CSNET-RELAY.ARPA by SU-SCORE.ARPA with TCP; Sun 26 Jan 86 13:39:28-PST
Received: from waterloo by csnet-relay.csnet id a017213; 26 Jan 86 16:32 EST
Received: by watmath.UUCP (4.12/4.7)
	id AA25278; Sun, 26 Jan 86 15:47:09 est
Date: Sun, 26 Jan 86 15:47:09 est
From: Eric Gisin <egisin%waterloo.csnet@CSNET-RELAY.ARPA>
To: info-postscript@su-score.ARPA
Subject: Re: Error handler and timeout
ReSent-Date: Sun 26 Jan 86 15:34:56-PST
ReSent-From: Bob Barcklay <BARCKLAY@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12178419246.14.BARCKLAY@SU-SCORE.ARPA>

On a vms queue setup with
$ init/queue /sep=(reset=eof)/lib=apple
does write an EOF, but follows it with a FF.
The LaserWriter times out because it thinks a new job has started.
One way to fix it would be to write a printer symbiont (which should also
collect any output from job and mail it back to the submitter).
A kludgey fix might be something like this for the EOF sequence:
^D{currentfile read {pop} if quit} exec

28-Jan-86 09:45:04-PST,1648;000000000000
Return-Path: <Hess.Unicorn@MIT-MULTICS.ARPA>
Received: from MIT-MULTICS.ARPA by SU-SCORE.ARPA with TCP; Tue 28 Jan 86 09:29:39-PST
Date:  Tue, 28 Jan 86 12:31 EST
From:  Hess@MIT-MULTICS.ARPA
Subject:  Advanced LW info
To:  Info-Postscript@SU-SCORE.ARPA
Message-ID:  <860128173113.315682@MIT-MULTICS.ARPA>
ReSent-Date: Tue 28 Jan 86 09:45:04-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12178879841.28.REULING@SU-SCORE.ARPA>

Hope this isn't the N'th time you've seen this:
 1) New LaserWriters have Postscript 25.0 in them, supposedly.  25.0
features a new data type, a packed array, which they appear to use in
the new font cacheing algorithm, which has a new partially-compressed
font state, as well as the original bitmap-generated state.

 2) How to get a list of fonts out of the printer:
 /foo 100 string def                    % scratch string
 FontDirectory {pop ==} forall flush    % simple font names in ROM
 systemdict /filenameforall known       % complex, font names in file system
   { (fonts/*) {dup length 5 sub 5 exch
     getinterval =} foo filenameforall flush}
   if


 3) Just received the first issue of "Colophon" from Adobe Systems.
Looks real nice, although the information is a little straightforward
for true hackers.  I suppose designers should look at it to learn what
Postscript hacking is all about, and hackers should look at it to see
how somebody designs a decent-looking newsletter.

Brian

All the information above is provided courtesy of some mailings which
Adobe Systems is doing to developers.  Thanks, fellas!
29-Jan-86 08:20:58-PST,1649;000000000000
Return-Path: <kens%tekecs.tektronix.csnet@CSNET-RELAY.ARPA>
Received: from glacier by SU-SCORE.ARPA with TCP; Wed 29 Jan 86 02:03:38-PST
Received: from CSNET-RELAY.ARPA by glacier with Sendmail; Wed, 29 Jan 86 02:05:22 pst
Received: from tektronix by csnet-relay.csnet id ab13206; 29 Jan 86 4:45 EST
From: Ken Serack <kens%tekecs.tektronix.csnet@CSNET-RELAY.ARPA>
To: tektronix!glacier!info-postscript%tekecs.tektronix.csnet@CSNET-RELAY.ARPA
Fcc: Outbox
Return-Path: <kens@tekecs.TEK>
Received: from tekecs.TEK by tektronix with smtp ; 28 Jan 86 08:29:05 PST
Comment: Message received over unauthenticated port at tektronix
Received: by tekecs.TEK (1.230/Tek) ,	id AA03375; Tue, 28 Jan 86 08:28:51 PST
Message-Id: <8601281628.AA03375@tekecs.TEK>
Date: Tue, 28 Jan 86 08:28:45 PST
Subject: Postscript font question.
ReSent-Date: Wed 29 Jan 86 08:20:58-PST
ReSent-From: Bob Barcklay <BARCKLAY@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12179126675.29.BARCKLAY@SU-SCORE.ARPA>

Problem: The Times-Roman font family on the Laser-Writer is smaller
	 than the other font families. This is not normally a problem
	 unless you need to mix families. When you mix Helvetica and
	 Times-Italic, the Times characters are about 1 point smaller.

	 In other words, How do I make one font print larger automatically?

	 I NEED to find a postscript fix for this problem. Would it be
	 possible to put some code in psdit.pro that would scale the
	 font up a certain amount? I would appreciate hearing from
	 anyone about this. 

Ken Serack
Tektronix, Inc.
Wilsonville, OR.
tektronix!tekecs!kens
(503)685-2989
29-Jan-86 10:23:56-PST,2297;000000000000
Return-Path: <reid@glacier>
Received: from glacier by SU-SCORE.ARPA with TCP; Wed 29 Jan 86 10:21:57-PST
Received: by glacier with Sendmail; Wed, 29 Jan 86 10:23:23 pst
Date: 29 Jan 1986 1023-PST (Wednesday)
From: Brian Reid <reid@glacier>
To: Ken Serack <kens%tekecs.tektronix.csnet@CSNET-RELAY.ARPA>
Cc: info-postscript@score
Subject: Re: Postscript font question.
In-Reply-To: Ken Serack <kens%tekecs.tektronix.csnet@CSNET-RELAY.ARPA> / 
		Tue, 28 Jan 86 08:28:45 PST.
             <8601281628.AA03375@tekecs.TEK>
ReSent-Date: Wed 29 Jan 86 10:23:56-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12179149060.19.REULING@SU-SCORE.ARPA>

The usual solution adopted by graphic-arts professionals is to avoid
mixing Times and Helvetica in the same line; they are not in general
considered to be visually compatible.

The "size" of a font is only dimly related to the size of the
letterforms. The size of a font is the size, as measured by vernier
calipers, of the metal slug on which the letters were carved. A
10-point font has metal slugs that are 10 points high. In a font like
Baskerville, the 10-point lowercase letters are about 60% of the size
of the 10-point lowercase letters in, say, Optima.

One of the joys of PostScript printers is that they let you do anything
you want, even if you shouldn't. If you must put Times on the rack and
stretch it to be bigger than its natural size, you can use the
"makefont" operator to give it a Y-axis scaling that is larger than
its X-axis scaling. You could try this redefinition of "F", which
increases the vertical size by a factor of 1.1 while leaving the
horizontal size alone.

/TimesStretch [1 0 0 1.1 0 0] def 
/F{fontheight 0 le {/fontheight fontsize def}if
   fonts fontnum get fontsize point 0 0 fontheight point neg 0 0 m1 astore
   fontslant 0 ne{1 0 fontslant tan 1 0 0 m2 astore m3 concatmatrix}if
   fontnum ???? eq {TimesStretch m4 concatmatrix} if
   makefont setfont .04 fontsize point mul 0 dround pop setlinewidth}def

Replace the ???? with the ditroff font number of Times Roman.

I really should ask you for some ID to make sure you are over 21 before
telling you how to do this. I think it's illegal in 13 states.

Brian
29-Jan-86 14:17:01-PST,1440;000000000000
Return-Path: <danny%hugo%israel.csnet@CSNET-RELAY.ARPA>
Received: from CSNET-RELAY.ARPA by SU-SCORE.ARPA with TCP; Wed 29 Jan 86 14:13:53-PST
Received: from israel by csnet-relay.csnet id a019586; 29 Jan 86 17:18 EST
Received: from hugo by huji.arpa (4.12/IL-1.3)
	id AA19670; Wed, 29 Jan 86 23:03:09 jst
Message-Id: <8601292103.AA19670@huji.arpa>
To: info-postscript@su-score.ARPA
Subject: vgrind
Date: 29 Jan 86 23:03:06 JST (Wed)
From: Danny Braniss <danny%hugo%israel.csnet@CSNET-RELAY.ARPA>
ReSent-Date: Wed 29 Jan 86 14:17:01-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12179191493.12.REULING@SU-SCORE.ARPA>

We have a LaseWriter now for almost two months, and thoroughly enjoying it.
Does anyone out there have a program that does what vgrind tries to do, but
generate straight postscript?

Since we have 4.2Bsd, but are running a local version of a spooler, I had
to re-write most of the spooler stuff.
So far I have two problems:
1- It seems that when the LW is warming up, it sets DTR, but ignores data
   sent to it (ie, does not send an XOFF), so that the first print out of the
   morning goest into limbo. If this is correct, it seems that the fix will
   to poll the LW till the 'idle' message is received.
2- i get random timeout messages, sometimes, with no apparent reason, and
   i don't think i can blame it on the xon/xoff.
danny
 3-Feb-86 15:40:47-PST,1321;000000000000
Return-Path: <CET1%PHOENIX.CAMBRIDGE.AC.UK%SERC-ICF.ENGINEERING.CAMBRIDGE.AC.UK@Cs.Ucl.AC.UK>
Received: from Cs (CS.UCL.AC.UK.#Internet) by SU-SCORE.ARPA with TCP; Mon 3 Feb 86 08:49:19-PST
Received: from serc-icf.engineering.cambridge.ac.uk by 44d.Cs.Ucl.AC.UK 
           via Janet with NIFTP  id a001920; 3 Feb 86 16:11 GMT
Date: Monday, 3 February 1986 16:18:16
To: info-postscript <@cs.ucl.ac.uk,@cs.ucl.ac.uk:info-postscript@su-score.arpa>
Subject: Re: Advanced LW info
From: "Cambridge Phoenix - CAM.PHX@CAM.ENG-ICF" <CET1%phoenix.cambridge.ac.uk@cs.ucl.ac.uk>
Authentic-sender:   MAIL@CAGA
ReSent-Date: Mon 3 Feb 86 15:40:47-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12180517461.26.REULING@SU-SCORE.ARPA>

>  1) New LaserWriters have Postscript 25.0 in them, supposedly.  25.0
> features a new data type, a packed array, which they appear to use in
> the new font cacheing algorithm, which has a new partially-compressed
> font state, as well as the original bitmap-generated state.
 
Can anyone tell us more about this "packed array" business? Are we
to expect other changes to PostScript? Will we have to trade in our
PostScript Language Reference Manuals and buy new ones?
 
Chris Thompson
CET1%PHX.CAM.AC.UK@UCL-CS.ARPA

 4-Feb-86 15:06:59-PST,931;000000000000
Return-Path: <adobe!shore@glacier>
Received: from glacier by SU-SCORE.ARPA with TCP; Tue 4 Feb 86 14:44:02-PST
Received: by glacier with Sendmail; Tue, 4 Feb 86 14:47:33 pst
Received: by adobe.UUCP (4.12/4.7)
	id AA14586; Tue, 4 Feb 86 14:43:47 pst
From: adobe!shore@glacier (Andrew Shore)
Message-Id: <8602042243.AA14586@adobe.UUCP>
Date:  4 Feb 1986 1443-PST (Tuesday)
To: glacier!info-postscript@glacier, glacier!laser-lovers@washington.ARPA
Subject: TranScript on a PDP11?
ReSent-Date: Tue 4 Feb 86 15:06:59-PST
ReSent-From: Bob Barcklay <BARCKLAY@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12180773454.7.BARCKLAY@SU-SCORE.ARPA>

Anyone out there ported TranScript (all or part)
to a PDP11 (running 2.9BSD)?

If so, would you be willing to share your experiences
with another interested party?  A potential customer
wants to know.

Thanks in advance,
--Andy Shore
  Adobe Systems
 4-Feb-86 15:57:31-PST,631;000000000000
Mail-From: BILLW created at  4-Feb-86 15:39:57
Date: Tue 4 Feb 86 15:39:57-PST
From: William "Chops" Westfield <BILLW@SU-SCORE.ARPA>
Subject: interactive Postscript interpreters...
To: info-postscript@SU-SCORE.ARPA
Message-ID: <12180779454.15.BILLW@SU-SCORE.ARPA>
ReSent-Date: Tue 4 Feb 86 15:57:30-PST
ReSent-From: Bob Barcklay <BARCKLAY@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12180782650.36.BARCKLAY@SU-SCORE.ARPA>

Are there any postscript interpreters than run on interactive
or semi-interactive devices like sun workstations or tecktronix
graphics emulators?

Thanks
Bill W
-------
 6-Feb-86 13:56:21-PST,1315;000000000000
Return-Path: <mcvax!lasso!ralph@seismo.CSS.GOV>
Received: from seismo.CSS.GOV by SU-SCORE.ARPA with TCP; Wed 5 Feb 86 09:30:36-PST
Return-Path: <mcvax!lasso!ralph>
Received: from mcvax.UUCP by seismo.CSS.GOV with UUCP; Wed, 5 Feb 86 12:22:37 EST
Received: by mcvax.uucp; Wed, 5 Feb 86 17:18:59 +0100 (MET)
Received: by mcvax.uucp; Wed, 5 Feb 86 17:18:14 +0100 (MET)
Received: by inria.UUCP; Wed, 5 Feb 86 12:25:16 -0100 (MET)
Message-Id: <8602051125.AA10229@inria.UUCP>
Date: Wed Feb  5 12:20:27 GMT+1:00 1986
From: mcvax!lasso!ralph@seismo.CSS.GOV	(Ralph Sobek)
To: mcvax!info-postscript%su-score.ARPA@seismo.CSS.GOV
Subject: Postscript Printer
ReSent-Date: Thu 6 Feb 86 13:56:21-PST
ReSent-From: Bob Barcklay <BARCKLAY@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12181284881.15.BARCKLAY@SU-SCORE.ARPA>

I've already sent the following message to the crowd at Info-1100@sumex-aim
so please excuse me if you get this twice.  It seems that a reasonable
number of people are interested in the question.

Does there exist software on the Xerox 11xx to interface to a Postcript
laser printer?  How well is it interfaced to Xerox's normal Impress/Scribe
software?  If it exists, is it Public Domain?  Who has it?
Thanks.

Ralph P. Sobek

UUCP:	mcvax!inria!lasso!ralph

 6-Feb-86 13:59:01-PST,1788;000000000000
Return-Path: <rhott@NSWC-OAS.ARPA>
Received: from ee00.NSWC-NET.ARPA (NSWC-OAS.ARPA.#Internet) by SU-SCORE.ARPA with TCP; Thu 6 Feb 86 11:55:24-PST
Date: Thu, 6 Feb 86 15:01:57 EST
From: rhott@NSWC-OAS.ARPA
To: info-postscript@su-score
ReSent-Date: Thu 6 Feb 86 13:59:00-PST
ReSent-From: Bob Barcklay <BARCKLAY@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12181285366.15.BARCKLAY@SU-SCORE.ARPA>

Net viewers:
  I have had a request by one of my co-workers for information regarding
available "high speed" printing for a sun 2 system.  She is doing software
development on one of her systems, and would like some form of high volume
printing performed.  Can/has anyone solved this situation?

Attached is her request as it came to me.

forward any comments to laura matthews (lmatthe@nswc-g) or
me (rhott@nswc-g).

thanks.

Bob Hott   Naval Surface Weapons Center, Dahlgren VA  22448
------------------attached message-------------------------------
> 
> Subject: printers and the such
> 
> 
> It has come time for me to add a printer(s) to my Sun 2 system. I need a laser
> writer for high quality printouts, where speed is not really a factor.  I am,
> however, a software developer, and in some cases my printouts are as large as
> 600+ pages.   I also like fanfold paper on days when I am feeling clumsy.
> 
> I figure the laser printer will not be that difficult a problem to satisfy.
> But where do I get the high speed 80-132 column paper printer from? And
> once I've got it, is it going to suck my system down with interrupts to the
> serial tty driver?  Can I get high speed, wide column, fan-fold and DMA all 
> at the same time?
> 
> 				Laura Matthews
>                               (mail:  lmatthe@nswc-g)
> 

 7-Feb-86 15:17:45-PST,1301;000000000000
Return-Path: <decwrl!allegra!utzoo!aesat!jalsop@glacier>
Received: from glacier by SU-SCORE.ARPA with TCP; Fri 7 Feb 86 00:08:18-PST
Received: by glacier with Sendmail; Fri, 7 Feb 86 00:13:17 pst
From: decwrl!allegra!utzoo!aesat!jalsop@glacier
Received: by decwrl.DEC.COM (4.22.01/4.7.34)
	id AA17843; Thu, 6 Feb 86 23:07:29 pst
Date: Thu, 6 Feb 86 23:07:29 pst
Message-Id: <8602070707.AA17843@decwrl.DEC.COM>
To: utzoo!allegra!decwrl!glacier!info-postscript@glacier
Subject: LaserWriter font metrics
ReSent-Date: Fri 7 Feb 86 15:17:45-PST
ReSent-From: Bob Barcklay <BARCKLAY@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12181561846.29.BARCKLAY@SU-SCORE.ARPA>


I have the LaserWriter font metrics information on a Mac disk as included as
part of Inside LaserWriter. I would like to get the information onto my Unix
system for further processing; however I don't want to spend a whole evening 
swapping disks on a single drive Mac in order to transfer them via MacTerminal.

Is there anyone out there (preferably close by), who has the info already on
a Unix system, and could mail it to me?

Please mail me, and I will get in touch with the closest respondent.

Thanks,

John Alsop @ AES Data Inc.
{allegra,ihnp4,linus,decvax}!utzoo!aesat!jalsop


 9-Feb-86 13:41:57-PST,1534;000000000000
Return-Path: <A.JIML@SU-GSB-WHY.ARPA>
Received: from SU-GSB-WHY.ARPA by SU-SCORE.ARPA with TCP; Sat 8 Feb 86 15:50:00-PST
Date: Sat 8 Feb 86 15:56:21-PST
From: Jim Lewinson <a.Jiml@SU-GSB-WHY.ARPA>
Subject: MacWrite Generating Bogus PostScript?
To: Info-Mac-Stanford@SUMEX-AIM.ARPA, Info-Postscript@SU-SCORE.ARPA
ReSent-Date: Sun 9 Feb 86 13:41:57-PST
ReSent-From: Bob Barcklay <BARCKLAY@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12182068693.9.BARCKLAY@SU-SCORE.ARPA>

Someone at our site has a MacWrite document that will not print on the
LaserWriter.  If one inserts a page eject prior to the diagram subtitle,
it will print, however, doing things like changing the font will not help
the situation.  I played with the postscript and found that if I inserted a
"showpage" right before a certain line I would get some output, but if I put
it after I never saw a thing.  Of course, this may not mean much, since I
don't know PostScript.

The files aren't large, but I'm not going to include them since most people
won't want to see them.  I have put them on SU-Score.ARPA for people
to grab if they want to look at them.  The MacWrite document is in
[SU-SCORE.ARPA] PS:<JIML>UNPRINTABLEFILE.HQX (In BinHex 4.0 format),
and the PostScript is in <JIML>UNPRINTABLEPOSTSCRIPT.TXT.  (Text format)
If someone wants me to mail them the files, let me know.

Does anyone see what we are doing wrong, or is it just a bug?

					Thanks,
					Jim Lewinson

ARPA: Jiml@SU-SCORE.ARPA
-------
18-Feb-86 14:26:18-PST,976;000000000001
Return-Path: <egisin%waterloo.csnet@CSNET-RELAY.ARPA>
Received: from glacier by SU-SCORE.ARPA with TCP; Tue 18 Feb 86 14:25:07-PST
Received: from CSNET-RELAY.ARPA by glacier with Sendmail; Tue, 18 Feb 86 14:29:46 pst
Received: from waterloo by csnet-relay.csnet id ad00231; 18 Feb 86 16:35 EST
Received: by watmath.UUCP (4.12/4.7)
	id AA28668; Tue, 18 Feb 86 16:05:42 est
Date: Tue, 18 Feb 86 16:05:42 est
From: Eric Gisin <egisin%waterloo.csnet@CSNET-RELAY.ARPA>
To: info-postscript@su-glacier.ARPA
Subject: postscript V25
ReSent-Date: Tue 18 Feb 86 14:26:18-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12184436063.12.REULING@SU-SCORE.ARPA>

Are there more extensions to PostScript on the LaserWriter+?
For example, is there any control over the serial line protocol?
It's difficult to emulate any real printers when CR is mapped to LF.
Is there a V25 ROM upgrage for the original LaserWriter?

19-Feb-86 08:27:42-PST,723;000000000000
Date: Wed 19 Feb 86 08:27:42-PST
From: John Reuling <Reuling@SU-SCORE.ARPA>
Subject: LaserWriter(s) PostScript Language Update to follow
To: INFO-POSTSCRIPT: ;
Office: 206 Margaret Jacks Hall, Stanford; 415/725-5555
Message-ID: <12184632924.21.REULING@SU-SCORE.ARPA>

The next two messages contain PostScript print files for the new
Apple LaserWriter and LaserWriter Plus PostScript Language Update
documentation.

These messages will be kept on ARPANET site SCORE.STANFORD.EDU in
the directory <INFO-POSTSCRIPT> as files LASERWRITER-1 and
LASERWRITER-2.

Users on the Internet may retrieve these files via anonymous FTP.
(Please don't FTP files from Score between 9am and 5pm weekdays.)

-John
-------
19-Feb-86 08:30:45-PST,63386;000000000000
Return-Path: <adobe!shore@glacier>
Received: from glacier by SU-SCORE.ARPA with TCP; Tue 18 Feb 86 17:22:54-PST
Received: by glacier with Sendmail; Tue, 18 Feb 86 17:10:57 pst
Received: by adobe.UUCP (4.12/4.7)
	id AA09800; Tue, 18 Feb 86 16:47:34 pst
From: adobe!shore@glacier (Andrew Shore)
Message-Id: <8602190047.AA09800@adobe.UUCP>
Date: 18 Feb 1986 1647-PST (Tuesday)
To: glacier!info-postscript@glacier
Subject: New LaserWriter(s) PostScript Language Update (1 of 2)
ReSent-Date: Wed 19 Feb 86 08:30:45-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12184633481.21.REULING@SU-SCORE.ARPA>

Here is a PostScript print file for the first half of the new
Apple LaserWriter and LaserWriter Plus PostScript Language Update
documentation.  It is a complete PostScript print file for the
first 12 pages of the document. A second message contains the
complete print file for the remaining 11 pages.


%!PS-Adobe-1.0
%%Title: lwrev2.mss
%%DocumentFonts: (atend)
%%Creator: Ed Taft and Scribe 4(1400)-4
%%CreationDate: 8 December 1985 12:33
%%Pages: (atend)
%%EndComments
/pica{12 mul}def/inch{72 mul}def/mtx matrix def
/pagewidth 7.375 inch def/pagelength 9.25 inch def
%/pagegrid{0 0 moveto pagewidth 0 lineto pagewidth pagelength lineto
%  0 pagelength lineto 0 0 lineto closepath 0 setlinewidth stroke}def
/shtm 9 def /shtl 12 def
/pagegrid{gsave 0 setlinecap .25 setlinewidth newpath
 0 shtm neg moveto 0 shtl neg rlineto stroke
 shtm neg 0 moveto shtl neg 0 rlineto stroke
 pagewidth shtm add 0 moveto shtl 0 rlineto stroke
 pagewidth shtm neg moveto 0 shtl neg rlineto stroke
 0 pagelength shtm add moveto 0 shtl rlineto stroke
 shtm neg pagelength moveto shtl neg 0 rlineto stroke
 pagewidth shtm add pagelength moveto shtl 0 rlineto stroke
 pagewidth pagelength shtm add moveto 0 shtl rlineto stroke 
 grestore
} def
/PSLogod 20 dict def%PostScriptLogo
/Helvetica findfont{1 index/FID ne{PSLogod 3 1 roll put}{pop pop}ifelse}forall
PSLogod/FontMatrix[0.001 0 0 0.000916667 0 0]put
PSLogod/FontName/PSLogo put/PSLogo PSLogod definefont pop
/BOT{pop gsave currentpoint translate -90 rotate SSZ -.7 mul 0 moveto(^)show
 grestore(^)stringwidth rmoveto}def
% chapter box/fountain
/fstr 128 13 sub string def 128 1 255 13 sub{fstr exch dup
 255 div 180 mul cos neg 2 div .5 add 255 mul cvi exch 128 sub exch put}for
/fountain{/ury exch def/urx exch def/lly exch def/llx exch def
  gsave urx ury translate 180 rotate urx llx sub ury lly sub scale
  128 13 sub 10 8[-128 13 add 0 0 10 128 13 sub 0]{fstr}image grestore}def
%%%%%%%%%%%%%%%%%%%%%%%John's Figure Stuff  %16 Sept 85
/figdict 100 dict def figdict begin
/scl .2157 def %scale of page
/rscl 1 scl div def % inverse scale
/hfpt .5 rscl mul def
/flpt rscl def
/qtpt .25 rscl mul def
/dsh {qtpt setlinewidth [2 rscl mul dup ] 0 setdash}def
/fntsz 8 rscl mul def
/fntoff fntsz .75 mul 2 div def
/hv /Helvetica findfont fntsz scalefont def
/hvs /Helvetica findfont fntsz .75 mul scalefont def
/sym /Symbol findfont fntsz scalefont def
/syms /Symbol findfont fntsz .75 mul scalefont def
/arrow
  {/ye exch def /xe exch def
   /yb exch def /xb exch def
   /xd xe xb sub def /yd ye yb sub def
   /mg xd dup mul yd dup mul add sqrt def
   /ang yd xd atan def
   gsave
   xb yb translate ang rotate
   2 rscl mul 0 moveto mg 2 rscl mul sub 0 lineto 
   qtpt setlinewidth stroke
   mg 0 moveto -4 rscl mul 2 rscl mul rlineto
   0 -4 rscl mul rlineto closepath fill
   grestore
  }def

/2arrow 
  {/ye exch def /xe exch def
   /yb exch def /xb exch def
   /xd xe xb sub def /yd ye yb sub def
   /mg xd dup mul yd dup mul add sqrt def
   /ang yd xd atan def
   gsave
   xb yb translate ang rotate
   2 rscl mul 0 moveto mg 2 rscl mul sub 0 lineto 
   qtpt setlinewidth stroke
   0 0 moveto 4 rscl mul 2 rscl mul lineto
   0 -4 rscl mul rlineto closepath fill
   mg 0 moveto -4 rscl mul 2 rscl mul rlineto
   0 -4 rscl mul rlineto closepath fill
   grestore
  }def

/inch {72 mul}def

/angshow
 {gsave
  /prc exch def
  /rd exch def
  /eang exch def
  /bang exch def
  /ys exch def
  /xs exch def
  /ad 180 rd 3.14159 mul div .75 mul def
  newpath
  xs ys rd bang eang ad sub arc
  qtpt setlinewidth stroke
  gsave xs ys translate
  eang rotate rd 0 translate
  flpt neg flpt 3 mul neg moveto flpt 2 mul 0 rlineto
  0 0 lineto closepath fill
  grestore
  hv setfont
  /mang bang eang add 2 div def
  /prc load
  xs mang cos rd mul 2 rscl mul sub add
  ys mang sin rd mul 4 rscl mul sub add rtext
 grestore
 }def  

/dotrad 1.5 rscl mul def
/dot 
 {gsave 
  translate dotrad 0 moveto 0 0 dotrad 0 359 arc closepath fill 
  grestore
 }def
/shw {show}def

/subscript  
 {gsave 
  hvs setfont subbck suboff rmoveto show
  currentpoint suboff neg add exch subbck neg add exch
  grestore moveto}def

/subbck -.5 rscl mul def
/suboff -4 rscl mul def

/rtext
 {gsave translate /prc exch def
  $ct begin
  0 0 moveto
  prc currentpoint
  end
  /ty exch def /tx exch def
  0 0 moveto
  tx neg 0 rmoveto
  prc 
  grestore
  }def

/ctext
 {gsave translate /prc exch def
  $ct begin
  0 0 moveto
  prc currentpoint
  end
  /ty exch def /tx exch def
  0 0 moveto
  tx 2 div neg 0 rmoveto
  prc 
  grestore
  }def
/wbox
    {gsave
    /ury exch def /urx exch def /lly exch def /llx exch def
    llx lly moveto llx ury lineto urx ury lineto urx lly lineto
    closepath 1 setgray fill grestore}def
/cwtext
 {gsave translate /prc exch def
  $ct begin
  0 0 moveto
  prc currentpoint
  end
  /ty exch def /tx exch def
  tx 2 div neg fntsz neg .25 mul tx 2 div fntsz wbox
  0 0 moveto
  tx 2 div neg 0 rmoveto
  prc 
  grestore
  }def

/ltext
 {gsave translate /prc exch def
  0 0 moveto
  prc 
  grestore
  }def
/$ct 10 dict def
$ct /show {stringwidth rmoveto} put
end %end figdict
%%%%%%%%%%%%%%%%%%%%%%%END John's Stuff
/reencsmalldict 12 dict def /ReEncodeSmall      % oldname newname vector
  {reencsmalldict begin
    /newcodesandnames exch def /newfontname exch def /basefontname exch def
    FontDirectory newfontname known
      {/ReEncodeSmall errordict /fontalreadydefined get exec} if
    /basefontdict basefontname findfont def
    /newfont basefontdict maxlength dict def
    basefontdict {exch dup /FID ne {dup /Encoding eq
        {exch dup length array copy newfont 3 1 roll put}
        {exch newfont 3 1 roll put}ifelse}{pop pop}ifelse}forall
    newfont /FontName newfontname put newcodesandnames aload pop
    newcodesandnames length 2 idiv{newfont /Encoding get 3 1 roll put}repeat
    newfontname newfont definefont pop end}def
/univers[
0/Aacute 1/aacute
2/Acircumflex 3/acircumflex
4/Adieresis 5/adieresis
6/Agrave 7/agrave
8/Aring 9/aring
10/Atilde 11/atilde
12/Ccedilla 13/ccedilla
14/Eacute 15/eacute
16/Ecircumflex 17/ecircumflex
18/Edieresis 19/edieresis
20/Egrave 21/egrave
22/Iacute 23/iacute
24/Icircumflex 25/icircumflex
26/Idieresis 27/idieresis
28/Igrave 29/igrave
30/Ntilde 31/ntilde
128/Oacute 129/oacute
130/Ocircumflex 131/ocircumflex
132/Odieresis 133/odieresis
134/Ograve 135/ograve
136/Otilde 137/otilde
138/Scaron 139/scaron
140/Uacute 141/uacute
142/Ucircumflex 143/ucircumflex
144/Udieresis 145/udieresis
146/Ugrave 147/ugrave
148/Ydieresis 149/ydieresis
150/Zcaron 151/zcaron
]def
/tspecial[
1/Aacute 2/Acircumflex 3/Adieresis 4/Agrave 5/Aring 6/Atilde
7/Ccedilla
8/Eacute 9/Ecircumflex 10/Edieresis 11/Egrave
12/Iacute 13/Icircumflex 14/Idieresis 15/Igrave
16/Ntilde
17/Oacute 18/Ocircumflex 19/Odieresis 20/Ograve 21/Otilde
22/Scaron
23/Uacute 24/Ucircumflex 25/Udieresis 26/Ugrave
27/Ydieresis
28/Zcaron
129/aacute 130/acircumflex 131/adieresis 132/agrave 133/aring 134/atilde
135/ccedilla
136/eacute 137/ecircumflex 138/edieresis 139/egrave
140/iacute 141/icircumflex 142/idieresis 143/igrave 
144/ntilde
145/oacute 146/ocircumflex 147/odieresis 148/ograve 149/otilde
150/scaron
151/uacute 152/ucircumflex 153/udieresis 154/ugrave 
155/ydieresis
156/zcaron
] def
/Times-Roman /Times-Special tspecial ReEncodeSmall
%%%%%%%%%%%%%%%%%%%%%%%
% mostly standard stuff
/BS{/SV save def 40 40 translate}def/ES{pagegrid showpage SV restore}def
/SC{setrgbcolor}def/SLT 0 def/WFT/Courier def/SSZ 10 def
/RST{100 div}def/CVTXY{RST pagelength sub abs exch RST exch}def
/RDF{WFT findfont SLT 0 eq{SSZ scalefont}
  {[SSZ 0 SLT sin SLT cos div SSZ mul SSZ 0 0]makefont}ifelse setfont}def
/SI{/SLT exch def RDF}def/SF{/WFT exch def RDF}def/SS{/SSZ exch def RDF}def
/MT{CVTXY moveto}def/XM{RST currentpoint exch pop moveto}def
/UL{gsave newpath CVTXY transform round exch round exch itransform moveto RST
 dup 2 div round 0 exch rmoveto setlinewidth RST 0 rlineto stroke grestore}def
/PB{/PV save def/showpage{}def 
 /ypos exch def /xpos exch def /sval exch def
  xpos 4985 le {/xpos 4500 def}{xpos 6120 le {/xpos 5400 def}if}ifelse
 xpos ypos CVTXY translate 
%  gsave 0 setlinewidth newpath 
%  -1 0 moveto 1 0 lineto 0 -1 moveto 0 1 lineto stroke grestore
 }def/PE{PV restore}def
/MSS{SSW RST 0 rmoveto}def/SNS{SSW add/SSW exch def MSS}def/SH{show}def
/MX{/SSW exch def SH MSS}def/M2{SH MSS MSS}def/M{SH MSS}def
/M+{SH 1 SNS}def/M-{SH -1 SNS}def
% statusdict /prefeed true put
%%EndProlog
%%Page: 1 1 
BS
0 SI
1 SS 
0 5400 5400 PB %!
% title page
gsave 
0 -5 pica translate  
0 0 36 pica 5 pica fountain
1 setlinewidth -.25 0 moveto 36 pica .5 add 0 rlineto stroke
-.25 5 pica moveto 36 pica .5 add 0 rlineto stroke
.5 setlinewidth 0 -.5 moveto 0 5 pica 1 add rlineto stroke
36 pica -.5 moveto 0 5 pica 1 add rlineto stroke grestore

/Helvetica findfont 12 scalefont setfont
/slength (ADOBE SYSTEMS) stringwidth pop def

/hbig /Helvetica-Bold findfont 30 scalefont def 
hbig setfont
newpath 0 0 moveto
(P) false charpath flattenpath pathbbox exch pop exch sub 
/ph exch def pop
/bl 5 pica ph 16 add sub 2 div ph add def
newpath
18 pica bl neg moveto
gsave
gsave 
(P) false charpath gsave 1 setgray fill grestore
.5 setlinewidth stroke
grestore
(P) stringwidth rmoveto
/hsq /Helvetica-Bold findfont [30 0 0 27 0 0] makefont def 
hsq setfont
gsave
(OST) false charpath gsave 1 setgray fill grestore
.5 setlinewidth stroke
grestore
(OST) stringwidth rmoveto
hbig setfont
gsave
(S) false charpath gsave 1 setgray fill grestore
.5 setlinewidth stroke
grestore
(S) stringwidth rmoveto
hsq setfont
gsave
(CRIPT) false charpath gsave 1 setgray fill grestore
.5 setlinewidth stroke
grestore
grestore

0 -16 rmoveto
/Helvetica findfont 10 scalefont setfont
gsave 
slength (LANGUAGE) stringwidth pop sub 7 div 0
(LANGUAGE) ashow grestore

% 
18 pica -10 pica moveto
/Helvetica findfont 18 scalefont setfont
gsave (UPDATE) show grestore 0 -18 rmoveto
gsave (for the) show grestore 0 -18 rmoveto
gsave (APPLE)show grestore 0 -18 rmoveto
gsave (LASERWRITER)show grestore 0 -18 rmoveto
gsave (and)show grestore 0 -18 rmoveto
gsave (LASERWRITER PLUS)show grestore 0 -18 rmoveto
0 -18 rmoveto
gsave (Revision 2)show grestore 0 -18 rmoveto

0 -9.5 pica rmoveto
/Helvetica findfont 12 scalefont setfont
gsave (ADOBE SYSTEMS) show grestore
0 -14 rmoveto
/Helvetica findfont 8 scalefont setfont
gsave
slength (INCORPORATED) stringwidth pop sub 11 div 0
(INCORPORATED) ashow
grestore


 PE ES
%%Page: 2 2 
BS
0 SI
9 SS 

/Times-Bold SF
24890 18397 MT
(P)SH
7 SS 
(OST)SH
9 SS 
(S)SH
7 SS 
(CRIPT)SH
9 SS 
29743 XM
(Language)
225 MX(Update)SH
24898 19395 MT
(for)
M(the)SH
24898 20393 MT
(Apple)
M(LaserWriter)SH
24898 21391 MT
(and)SH
24898 22389 MT
(LaserWriter)
M(Plus)SH
24898 23387 MT
(Revision)
M(2)SH

/Times-Roman SF
24890 25383 MT
(December)
M(8,)
M(1985)SH
24890 27379 MT
(Copyright)SH

/Symbol SF
28765 XM
(\323)SH
/Times-Roman SF
29701 XM
(1985)
M(by)
M(Adobe)
M(Systems)
M(Incorporated.)SH
24898 28377 MT
(All)
M(rights)
M(reserved.)SH
24890 30373 MT
(P)SH
7 SS 
(OST)SH
9 SS 
(S)SH
7 SS 
(CRIPT)SH
9 SS 
29421 XM
(is)
M(a)
M(trademark)
M(of)
M(Adobe)
M(Systems)
M(Incorporated.)SH
8 SS 
24898 32518 MT
(Helvetica,)
200 MX(Palatino,)
M(and)
M(Times)
M(are)
M(registered)
M(trademarks)
M(of)SH
26098 33416 MT
(Allied)
M(Corporation.)SH
24898 34314 MT
(ITC)
M(Avant)
M(Garde)
M(Gothic,)
M(ITC)
M(Bookman,)
M(ITC)
M(Zapf)
M(Chancery,)
M(and)
M(ITC)SH
26098 35212 MT
(Zapf)
M(Dingbats)
M(are)
M(trademarks)
M(of)
M(International)
M(Typeface)
M(Corporation.)SH
24898 36110 MT
(Apple)
M(and)
M(AppleTalk)
M(are)
M(trademarks)
M(of)
M(Apple)
M(Computer,)
M(Inc.)SH
24898 37008 MT
(Macintosh)
M(is)
M(a)
M(trademark)
M(licensed)
M(to)
M(Apple)
M(Computer,)
M(Inc.)SH
24898 37906 MT
(IBM)
M(is)
M(a)
M(registered)
M(trademark)
M(of)
M(International)
M(Business)
M(Machines)
M(Corporation.)SH
24898 38804 MT
(Diablo)
M(is)
M(a)
M(trademark)
M(of)
M(Xerox)
M(Corporation.)SH
24890 40132 MT
(The)
M(information)
M(in)
M(this)
M(document)
M(is)
M(furnished)
M(for)
M(informational)
M(use)SH
24898 41030 MT
(only,)
M(is)
M(subject)
M(to)
M(change)
M(without)
M(notice,)
M(and)
M(should)
M(not)
M(be)
M(construed)SH
24898 41928 MT
(as)
M(a)
M(commitment)
M(by)
M(Adobe)
M(Systems)
M(Incorporated.)
M(Adobe)
M(Systems)SH
24898 42826 MT
(Incorporated)
M(assumes)
M(no)
M(responsibility)
M(or)
M(liability)
M(for)
M(any)
M(errors)
M(or)SH
24898 43724 MT
(inaccuracies)
M(that)
M(may)
M(appear)
M(in)
M(this)
M(document.)
M(The)
M(software)
M(described)SH
24898 44622 MT
(in)
M(this)
M(document)
M(is)
M(furnished)
M(under)
M(license)
M(and)
M(may)
M(only)
M(be)
M(used)
M(or)SH
24898 45520 MT
(copied)
M(in)
M(accordance)
M(with)
M(the)
M(terms)
M(of)
M(such)
M(license.)SH
ES
%%Page: 1 3 
BS
0 SI
12 SS 

/Helvetica SF
12592 6275 MT
(1)
875 MX(INTRODUCTION)SH
11 SS 
/Times-Roman SF
19791 8826 MT
(The)
507 MX(LaserWriter)
M(revision)
M(2)
M(and)
M-(the)
M(LaserWriter)
M(Plus)
M(are)
M(sig-)SH
19799 10123 MT
(nificantly)
440 MX(enhanced)
M(versions)
M(of)
M(the)
M(original)
M+(Apple)
M(LaserWriter)SH
19799 11420 MT
(laser)
428 MX(printer.)
M(The)
M-(enhancement)
M(consists)
M(of)
M(new)
M(versions)
M(of)
M(the)SH
19799 12717 MT
(built-in)
311 MX(ROMs)
M(containing)
M+(the)
M(P)SH
9 SS 
(OST)SH
11 SS 
(S)SH
9 SS 
(CRIPT)SH
11 SS 
38993 XM
(software)
M(that)
M(controls)SH
19799 14014 MT
(the)
275 MX(LaserWriter.)SH
19791 16209 MT
(This)
379 MX(document)
M(describes)
M(the)
M(changes)
M-(that)
M(have)
M(been)
M(introduced)SH
19799 17506 MT
(by)
332 MX(the)
M(new)
M(software.)
M(The)
M(original)
M(LaserWriter)
M+(is)
M(fully)
M(described)SH
9 SS 
48147 18440 MT
(1)SH
11 SS 
19799 18803 MT
(in)
282 MX(Appendix)
M(D)
M(of)
M(the)SH

/Times-Italic SF
29457 XM
(P)SH
9 SS 
(OST)SH
11 SS 
(S)SH
9 SS 
(CRIPT)SH
11 SS 
35061 XM
(Language)
M-(Reference)
M(Manual)SH
/Times-Roman SF
(;)SH
19799 20100 MT
(only)
628 MX(the)
M(differences)
M(between)
M(the)
M(old)
M(and)
M(new)
M(software)
M(are)SH
19799 21397 MT
(described)
275 MX(here.)SH
19791 23592 MT
(LaserWriters)
352 MX(containing)
M(the)
M(new)
M(software)
M(come)
M(in)
M(two)
M-(variants,)SH
19799 24889 MT
(called)
717 MX(the)
M(LaserWriter)
M(and)
M+(the)
M(LaserWriter)
M(Plus.)
M(The)
M(two)SH
19799 26186 MT
(variants)
756 MX(differ)
M(only)
M(in)
M(the)
M(selection)
M(of)
M(built-in)
M-(fonts:)
M(the)SH
19799 27483 MT
(LaserWriter)
495 MX(contains)
M(the)
M(original)
M+(13)
M(standard)
M(fonts,)
M(while)
M(the)SH
19799 28780 MT
(LaserWriter)
M-(Plus)
M(contains)
M(an)
M-(expanded)
M(set)
M(of)
M(35)
M(fonts.)
M(In)
M(all)SH
19799 30077 MT
(other)
446 MX(respects,)
M(the)
M(two)
M(LaserWriter)
M+(variants)
M(are)
M(identical.)
M(This)SH
19799 31374 MT
(documentation)
275 MX(applies)
M(to)
M(both)
M(variants)
M(except)
M(as)
M(noted.)SH
19791 33569 MT
(A)
385 MX(LaserWriter)
M(containing)
M-(the)
M(new)
M(software)
M(can)
M(be)
M(identified)
M(in)SH
19799 34866 MT
(several)
275 MX(ways:)SH
/Symbol SF
21418 37143 MT
(\267)SH
/Times-Roman SF
22199 XM
(The)
749 MX(test)
M(page)
M(printed)
M(at)
M(power-on)
M(time)
M+(includes)
M(the)SH
22199 38340 MT
(LaserWriter)
328 MX(revision)
M-(number)
M(in)
M(the)
M(lower)
M(left)
M(corner)
M(of)
M(the)SH
22199 39537 MT
(line)
439 MX(graph)
M(illustration;)
M(for)
M+(the)
M(new)
M(software,)
M(this)
M(revision)SH
22199 40734 MT
(number)
275 MX(is)
M(`2.0'.)SH
/Symbol SF
21418 42530 MT
(\267)SH
/Times-Roman SF
22199 XM
(The)SH
/Times-Bold SF
24372 XM
(revision)SH
/Times-Roman SF
28563 XM
(entry)
463 MX(in)SH
/Times-Bold SF
32605 XM
(statusdict)SH
/Times-Roman SF
37590 XM
(contains)
M-(the)
M(integer)
M(`2',)SH
22199 43727 MT
(identifying)
302 MX(the)
M+(new)
M(revision)
M(of)
M(the)
M(LaserWriter)
M(software.)
M(A)SH
22199 44924 MT
(P)SH
9 SS 
(OST)SH
11 SS 
(S)SH
9 SS 
(CRIPT)SH
11 SS 
27948 XM
(program)
275 MX(can)
M(read)
M(this)
M(value.)SH
/Symbol SF
21418 46720 MT
(\267)SH
/Times-Roman SF
22199 XM
(The)SH
/Times-Bold SF
24254 XM
(version)SH
/Times-Roman SF
28021 XM
(entry)
344 MX(in)SH
/Times-Bold SF
31825 XM
(systemdict)SH
/Times-Roman SF
37117 XM
(contains)
M(the)
M(string)
M(`38.0',)SH
22199 47917 MT
(identifying)
493 MX(the)
M(version)
M(of)
M(the)
M(P)SH
9 SS 
(OST)SH
11 SS 
(S)SH
9 SS 
(CRIPT)SH
11 SS 
42301 XM
(interpreter)
M+(in-)SH
22199 49114 MT
(cluded)
275 MX(in)
M(the)
M(new)
M(software.)SH
/Symbol SF
21418 50910 MT
(\267)SH
/Times-Roman SF
22199 XM
(The)SH
/Times-Bold SF
24739 XM
(product)SH
/Times-Roman SF
29297 XM
(entry)
830 MX(in)SH
/Times-Bold SF
34072 XM
(statusdict)SH
/Times-Roman SF
39423 XM
(contains)
M-(the)
M(string)SH
22199 52107 MT
(`)SH
10 SS 
/Helvetica SF
(LaserWriter)SH
11 SS 
/Times-Roman SF
(')
294 MX(for)
M+(a)
M(LaserWriter)
M(\050with)
M(the)
M(13)
M(standard)
M(fonts\051)SH
22199 53304 MT
(or)
394 MX(`)SH
10 SS 
/Helvetica SF
(LaserWriter)
439 MX(Plus)SH
11 SS 
/Times-Roman SF
(')
394 MX(for)
M(a)
M(LaserWriter)
M(Plus)
M(\050with)
M(the)
M-(ex-)SH
22199 54501 MT
(panded)
409 MX(set)
M(of)
M(35)
M(fonts\051.)
M(Note)
M(that)
M(a)
M(program)
M(is)
M(better)
M(ad-)SH
22199 55698 MT
(vised)
673 MX(to)
M(determine)
M(the)
M(selection)
M(of)
M(available)
M-(fonts)
M(by)SH
22199 56895 MT
(enumerating)
275 MX(the)SH
/Times-Bold SF
29591 XM
(FontDirectory)SH
/Times-Roman SF
36584 XM
(dictionary.)SH
7 SS 
19799 58335 MT
(1)SH
9 SS 
20149 58662 MT
(Addison-Wesley,)
225 MX(1985,)
M(ISBN)
M(0-201-10174-2)SH
ES
%%Page: 2 4 
BS
0 SI
11 SS 
/Times-Roman SF
18891 6155 MT
(The)
329 MX(enhancements)
M(introduced)
M+(in)
M(the)
M(new)
M(software)
M(fall)
M(into)
M(three)SH
18899 7452 MT
(categories,)
311 MX(each)
M(of)
M(which)
M(is)
M(covered)
M(by)
M(a)
M(separate)
M(section)
M(of)
M(this)SH
18899 8749 MT
(document:)SH
/Symbol SF
20518 11026 MT
(\267)SH
/Times-Roman SF
21299 XM
(LaserWriter-specific)
799 MX(functional)
M(changes)
151 MX(\320)
M(these)
800 MX(include)SH
21299 12223 MT
(expanded)
655 MX(communication)
M(options,)
M(additional)
M-(paper)
M(tray)SH
21299 13420 MT
(selections,)
360 MX(new)
M(fonts,)
M(and)
M(various)
M(other)
M(features)
M(present)
M(in)SH
21299 14617 MT
(revision)
299 MX(2)
M(LaserWriters)
M(and)
M(not)
M(necessarily)
M(present)
M(in)
M(other)SH
21299 15814 MT
(P)SH
9 SS 
(OST)SH
11 SS 
(S)SH
9 SS 
(CRIPT)SH
11 SS 
27048 XM
(printers.)SH
/Symbol SF
20518 17610 MT
(\267)SH
/Times-Roman SF
21299 XM
(Improvements)
318 MX(in)
M+(implementation)
151 MX(\320)
M(nearly)
319 MX(all)
M(the)
M(problems)SH
21299 18807 MT
(present)
323 MX(in)
M(the)
M(original)
M(LaserWriter)
M-(software)
M(have)
M(been)
M(cor-)SH
21299 20004 MT
(rected,)
479 MX(and)
M+(a)
M(number)
M(of)
M(operations)
M(have)
M(been)
M(made)
M(sig-)SH
21299 21201 MT
(nificantly)
275 MX(faster.)SH
/Symbol SF
20518 22997 MT
(\267)SH
/Times-Roman SF
21299 XM
(P)SH
9 SS 
(OST)SH
11 SS 
(S)SH
9 SS 
(CRIPT)SH
11 SS 
27394 XM
(language)
621 MX(changes)
151 MX(\320)
M(several)
620 MX(new)
M(operations)SH
21299 24194 MT
(and)
594 MX(capabilities)
M(have)
M(been)
M+(introduced)
M(into)
M(the)
M(standard)SH
21299 25391 MT
(P)SH
9 SS 
(OST)SH
11 SS 
(S)SH
9 SS 
(CRIPT)SH
11 SS 
27232 XM
(language)
459 MX(and)
M(are)
M(being)
M-(incorporated)
M(into)
M(all)SH
21299 26588 MT
(P)SH
9 SS 
(OST)SH
11 SS 
(S)SH
9 SS 
(CRIPT)SH
11 SS 
27048 XM
(printers.)SH
18891 28783 MT
(Installation)
477 MX(of)
M(the)
M+(new)
M(LaserWriter)
M(or)
M(LaserWriter)
M(Plus)
M(ROM)SH
18899 30080 MT
(software)
345 MX(in)
M(an)
M(existing)
M(LaserWriter)
M(will)
M(cause)
M(the)
M(page)
M-(count)
M(to)SH
18899 31377 MT
(be)
552 MX(reset)
M(to)
M(zero)
M(and)
M(all)
M(system)
M(parameters)
M+(to)
M(revert)
M(to)
M(their)SH
18899 32674 MT
(default)
275 MX(values.)SH
12 SS 
/Helvetica SF
11692 36542 MT
(2)
875 MX(LASERWRITER)
384 MX(FUNCTIONAL)
M(CHANGES)SH
11 SS 
/Times-Roman SF
18891 39093 MT
(This)
398 MX(section)
M(describes)
M(changes)
M-(to)
M(the)
M(function)
M(and)
M(operation)
M(of)SH
18899 40390 MT
(the)
500 MX(LaserWriter.)
M(In)
M+(general,)
M(the)
M(material)
M(here)
M(supercedes)
M(cor-)SH
18899 41687 MT
(responding)
292 MX(material)
M(in)
M(Appendix)
M(D)
M(of)
M(the)SH
/Times-Italic SF
37683 XM
(P)SH
9 SS 
(OST)SH
11 SS 
(S)SH
9 SS 
(CRIPT)SH
11 SS 
43297 XM
(Language)SH
18899 42984 MT
(Reference)
462 MX(Manual)SH
/Times-Roman SF
(;)
M(you)
M(should)
M(refer)
M(there)
M(for)
M(further)
M(informa-)SH
18899 44281 MT
(tion.)SH
/Helvetica SF
18891 47478 MT
(Serial)
352 MX(I/O)SH
/Times-Roman SF
18891 49430 MT
(The)
355 MX(LaserWriter's)
M(serial)
M-(communication)
M(capability)
M(has)
M(been)
M(en-)SH
18899 50727 MT
(hanced)
457 MX(in)
M(two)
M(significant)
M(ways.)
M(First,)
M(the)
M(maximum)
M(baud)
M+(rate)SH
18899 52024 MT
(has)
333 MX(been)
M(increased)
M(from)
M(9600)
M-(to)
M(57600)
M(bits)
M(per)
M(second.)
M(Second,)SH
18899 53321 MT
(the)SH
9 SS 
20676 XM
(DTR)SH
11 SS 
22909 XM
(flow)
433 MX(control)
M(protocol)
M+(has)
M(been)
M(introduced)
M(as)
M(an)
M(alter-)SH
18899 54618 MT
(native)
275 MX(to)
M(the)SH
9 SS 
24612 XM
(XON)SH
11 SS 
(/)SH
9 SS 
(XOFF)SH
11 SS 
29443 XM
(protocol.)SH
18891 56813 MT
(The)
480 MX(default)
M(mode)
M(of)
M-(operation)
M(of)
M(the)
M(LaserWriter's)
M(serial)
M(I/O)SH
18899 58110 MT
(facilities)
491 MX(remains)
M(the)
M(same)
M(as)
M+(in)
M(the)
M(original)
M(LaserWriter;)
M(the)SH
10 SS 
/Helvetica SF
4500 63450 MT
(2)SH
8 SS 
7456 XM
(Update)
256 MX(for)
M(LaserWriter)
M(and)
M(LaserWriter)
M(Plus)
M(\050revision)
M(2\051)SH
ES
%%Page: 3 5 
BS
0 SI
11 SS 
/Times-Roman SF
19799 6155 MT
(new)
488 MX(capabilities)
M(must)
M(be)
M(explicitly)
M(enabled)
M(if)
M-(desired.)
M(This)
M(is)SH
19799 7452 MT
(accomplished)
351 MX(by)
M(executing)
M(the)SH
/Times-Bold SF
33971 XM
(setsccbatch)SH
/Times-Roman SF
39636 XM
(or)SH
/Times-Bold SF
40903 XM
(setsccinteractive)SH
/Times-Roman SF
19799 8749 MT
(operators)
466 MX(as)
M(described)
M(in)
M-(the)SH
/Times-Italic SF
33549 XM
(P)SH
9 SS 
(OST)SH
11 SS 
(S)SH
9 SS 
(CRIPT)SH
11 SS 
39336 XM
(Language)
M(Reference)SH
19799 10046 MT
(Manual)SH
/Times-Roman SF
(.)SH
19791 12241 MT
(The)SH
/Times-Italic SF
21841 XM
(baud)SH
/Times-Roman SF
24381 XM
(operand)
341 MX(of)SH
/Times-Bold SF
29521 XM
(setsccbatch)SH
/Times-Roman SF
35176 XM
(or)SH
/Times-Bold SF
36433 XM
(setsccinteractive)SH
/Times-Roman SF
44468 XM
(may)
M(now)SH
19799 13538 MT
(be)
363 MX(any)
M(positive)
M(integer)
M(less)
M-(than)
M(100000.)
M(However,)
M(only)
M(certain)SH
19799 14835 MT
(baud)
388 MX(rates)
M(are)
M(achievable)
M(by)
M(the)
M(hardware;)
M(other)
M(values)
M(will)
M(be)SH
19799 16132 MT
(rounded)
492 MX(to)
M(the)
M(nearest)
M(achievable)
M(one.)
M(Above)
M(9600)
M-(baud,)
M(the)SH
19799 17429 MT
(achievable)
277 MX(rates)
M(are:)
M+(10473,)
M(11520,)
M(12800,)
M(14400,)
M(16457,)
M(19200,)SH
19799 18726 MT
(23040,)
445 MX(28800,)
M(38400,)
M(and)
M(57600.)
M(Of)
M(these,)
M(19200)
M(is)
M(the)
M-(baud)SH
19799 20023 MT
(rate)
275 MX(most)
M(likely)
M(to)
M(be)
M(supported)
M(by)
M(host)
M(operating)
M(systems.)SH
19791 22218 MT
(The)SH
/Times-Italic SF
22039 XM
(parity)SH
/Times-Roman SF
25205 XM
(parameter)
538 MX(of)SH
/Times-Bold SF
31593 XM
(setsccbatch)SH
/Times-Roman SF
37445 XM
(or)SH
/Times-Bold SF
38899 XM
(setsccinteractive)SH
/Times-Roman SF
47131 XM
(has)SH
19799 23515 MT
(been)
560 MX(changed)
M(to)
M(an)SH
/Times-Italic SF
29673 XM
(options)SH
/Times-Roman SF
33473 XM
(parameter)
M-(that)
M(encodes)
M(both)
M(the)SH
19799 24812 MT
(treatment)
473 MX(of)
M(the)
M(parity)
M(bit)
M(\050as)
M(before\051)
M+(and)
M(the)
M(choice)
M(between)SH
9 SS 
19799 26109 MT
(XON)SH
11 SS 
(/)SH
9 SS 
(XOFF)SH
11 SS 
24767 XM
(and)SH
9 SS 
26767 XM
(DTR)SH
11 SS 
28979 XM
(flow)
411 MX(control)
M(\050discussed)
M(below\051.)
M(The)
M(values)SH
19799 27406 MT
(of)
275 MX(the)SH
/Times-Italic SF
22609 XM
(options)SH
/Times-Roman SF
26124 XM
(parameter)
M(now)
M(have)
M(the)
M(following)
M(meanings:)SH
19799 29558 MT
(0)SH
22199 XM
(Ignore)
559 MX(parity:)
M(the)
M(high-order)
M(bit)
M(of)
M(each)
M(8-bit)
M(character)SH
22199 30755 MT
(received)
521 MX(is)
M(ignored;)
M(the)
M(high-order)
M(bit)
M(of)
M(each)
M(character)SH
22199 31952 MT
(transmitted)
542 MX(is)
M(zero.)SH
9 SS 
31676 XM
(XON)SH
11 SS 
(/)SH
9 SS 
(XOFF)SH
11 SS 
36774 XM
(flow)
M(control)
M+(is)
M(used)
M(\050see)SH
22199 33149 MT
(below\051.)SH
19799 34945 MT
(1)SH
22199 XM
(Odd)
681 MX(parity:)
M(the)
M(high-order)
M(bit)
M(of)
M(each)
M(8-bit)
M(character)SH
22199 36142 MT
(received)
394 MX(is)
M(checked)
M(for)
M(odd)
M(parity)
M(\050a)
M+(P)SH
9 SS 
(OST)SH
11 SS 
(S)SH
9 SS 
(CRIPT)SH
11 SS 
/Times-Bold SF
45239 XM
(ioerror)SH
/Times-Roman SF
22199 37339 MT
(occurs)
314 MX(if)
M(it)
M(is)
M(incorrect\051;)
M(each)
M-(character)
M(transmitted)
M(has)
M(odd)SH
22199 38536 MT
(parity.)SH
9 SS 
25315 XM
(XON)SH
11 SS 
(/)SH
9 SS 
(XOFF)SH
11 SS 
30146 XM
(flow)
275 MX(control)
M(is)
M(used.)SH
19799 40332 MT
(2)SH
22199 XM
(Even)
390 MX(parity:)
M(like)
M(odd,)
M(but)
M(for)
M+(even)
M(parity.)SH
9 SS 
41634 XM
(XON)SH
11 SS 
(/)SH
9 SS 
(XOFF)SH
11 SS 
46581 XM
(flow)SH
22199 41529 MT
(control)
275 MX(is)
M(used.)SH
19799 43325 MT
(3)SH
22199 XM
(No)
277 MX(parity:)
M(all)
M-(8)
M(bits)
M(of)
M(each)
M(character)
M(are)
M(treated)
M(as)
M(data)
M(and)SH
22199 44522 MT
(no)
M-(checking)
M(is)
M(performed.)SH
9 SS 
33958 XM
(XON)SH
11 SS 
(/)SH
9 SS 
(XOFF)SH
11 SS 
38789 XM
(flow)
M(control)
M(is)
M(used.)SH
19799 46318 MT
(4)SH
22199 XM
(Ignore)
M(parity;)SH
9 SS 
28491 XM
(DTR)SH
11 SS 
30566 XM
(flow)
M(control)
M(\050see)
M(below\051.)SH
19799 48114 MT
(5)SH
22199 XM
(Odd)
M(parity;)SH
9 SS 
27515 XM
(DTR)SH
11 SS 
29590 XM
(flow)
M(control.)SH
19799 49910 MT
(6)SH
22199 XM
(Even)
M(parity;)SH
9 SS 
27881 XM
(DTR)SH
11 SS 
29956 XM
(flow)
M(control.)SH
19799 51706 MT
(7)SH
22199 XM
(No)
M(parity;)SH
9 SS 
26965 XM
(DTR)SH
11 SS 
29040 XM
(flow)
M(control.)SH
19791 53359 MT
(The)
297 MX(LaserWriter)
M(makes)
M(use)
M(of)
M(either)
M(of)
M(two)
M(conventions)
M(for)
M(con-)SH
19799 54656 MT
(trolling)
394 MX(the)
M(flow)
M(of)
M(characters)
M(between)
M(itself)
M-(and)
M(the)
M(host)
M(com-)SH
19799 55953 MT
(puter)
640 MX(\050in)
M+(both)
M(directions\051.)
M(These)
M(conventions)
M(are)
M(called)
M(the)SH
9 SS 
19799 57250 MT
(XON)SH
11 SS 
(/)SH
9 SS 
(XOFF)SH
11 SS 
24857 XM
(and)
502 MX(the)SH
9 SS 
28793 XM
(DTR)SH
11 SS 
31095 XM
(flow)
M-(control)
M(protocols.)
M(The)
M(choice)
M(of)SH
19799 58547 MT
(protocol)
315 MX(is)
M(encoded)
M(in)
M(the)
M(options)
M(parameter)
M(as)
M(described)
M+(above;)SH
19799 59844 MT
(the)
275 MX(default)
M(is)SH
9 SS 
25756 XM
(XON)SH
11 SS 
(/)SH
9 SS 
(XOFF)SH
11 SS 
30587 XM
(flow)
M(control.)SH
8 SS 
/Helvetica SF
29249 63450 MT
(2)
583 MX(LASERWRITER)
256 MX(FUNCTIONAL)
M(CHANGES)SH
10 SS 
48041 XM
(3)SH
ES
%%Page: 4 6 
BS
0 SI
9 SS 
/Times-Roman SF
18891 6155 MT
(XON)SH
11 SS 
(/)SH
9 SS 
(XOFF)SH
11 SS 
24009 XM
(flow)
562 MX(control)
M(makes)
M-(use)
M(of)
M(two)
M(special)
M(characters,)SH
18899 7452 MT
(called)SH
9 SS 
21847 XM
(XON)SH
11 SS 
24119 XM
(and)SH
9 SS 
26029 XM
(XOFF)SH
11 SS 
(,)
322 MX(that)
M(may)
M(be)
M(sent)
M+(by)
M(either)
M(party)
M(to)
M(control)SH
18899 8749 MT
(the)
469 MX(flow)
M-(of)
M(characters)
M(sent)
M(to)
M(it)
M(by)
M(the)
M(other)
M(party.)
M(When)
M(the)SH
18899 10046 MT
(LaserWriter)
404 MX(sends)
M+(an)SH
9 SS 
28907 XM
(XOFF)SH
11 SS 
31612 XM
(character)
M(to)
M(the)
M(host,)
M(the)
M(host)
M(must)SH
18899 11343 MT
(immediately)
454 MX(stop)
M(sending)
M-(characters)
M(to)
M(the)
M(LaserWriter.)
M(When)SH
18899 12640 MT
(the)
519 MX(LaserWriter)
M(sends)SH
9 SS 
29556 XM
(XON)SH
11 SS 
32025 XM
(to)
M(the)
M(host,)
M(the)
M(host)
M(may)
M+(resume)SH
18899 13937 MT
(sending)
301 MX(characters)
M(to)
M(the)
M(LaserWriter.)
M(Similarly,)
M(the)
M-(LaserWriter)SH
18899 15234 MT
(heeds)SH
9 SS 
21778 XM
(XOFF)SH
11 SS 
24453 XM
(and)SH
9 SS 
26417 XM
(XON)SH
11 SS 
28743 XM
(characters)
376 MX(sent)
M(to)
M(it)
M(by)
M(the)
M(host)
M(to)
M(control)SH
18899 16531 MT
(the)
275 MX(flow)
M(of)
M(characters)
M(from)
M(the)
M(LaserWriter)
M(to)
M(the)
M(host.)SH
9 SS 
18891 18726 MT
(DTR)SH
11 SS 
21098 XM
(flow)
407 MX(control)
M(makes)
M(use)
M(of)
M(a)
M(control)
M-(signal,)
M(Data)
M(Terminal)SH
18899 20023 MT
(Ready,)
352 MX(which)
M(is)
M(available)
M(through)
M(the)
M(25-pin)
M(connector)
M(\050but)
M+(not)SH
18899 21320 MT
(through)
406 MX(the)
M(9-pin)
M(connector\051.)
M-(Normally,)
M(the)
M(LaserWriter)
M(leaves)SH
18899 22617 MT
(this)
302 MX(signal)
M(turned)
M(on.)
M(However,)
M(when)
M(it)
M(needs)
M(to)
M(stop)
M(the)
M+(flow)
M(of)SH
18899 23914 MT
(characters)
489 MX(from)
M(the)
M-(host,)
M(it)
M(turns)SH
9 SS 
34688 XM
(DTR)SH
11 SS 
36976 XM
(off.)
M(The)
M(host)
M(must)
M(im-)SH
18899 25211 MT
(mediately)
553 MX(stop)
M(sending)
M(characters)
M(until)
M+(the)
M(LaserWriter)
M(turns)SH
9 SS 
18899 26508 MT
(DTR)SH
11 SS 
21177 XM
(back)
478 MX(on)
M(again.)
M(Similarly,)
M(another)
M(signal,)
M(Data)
M(Set)
M-(Ready)SH
18899 27805 MT
(\050)SH
9 SS 
(DSR)SH
11 SS 
(\051,)
293 MX(may)
M(be)
M(used)
M(by)
M(the)
M(host)
M(to)
M(control)
M(the)
M+(flow)
M(of)
M(data)
M(sent)
M(to)SH
18899 29102 MT
(it)
275 MX(from)
M(the)
M(LaserWriter.)SH
18891 31297 MT
(Failure)
614 MX(of)
M(the)
M(host)
M(to)
M(conform)
M(to)
M(the)
M(selected)
M(flow)
M(control)SH
18899 32594 MT
(protocol)
733 MX(may)
M(result)
M(in)
M(unexpected)
M(occurrences)
M(of)SH
/Times-Bold SF
44064 XM
(ioerror)SH
/Times-Roman SF
(,)SH
18899 33891 MT
(caused)
374 MX(by)
M(overflow)
M-(of)
M(the)
M(LaserWriter's)
M(input)
M(buffer.)
M(Note)
M(that)SH
18899 35188 MT
(only)
442 MX(one)
M(flow)
M(control)
M(protocol)
M(operates)
M(at)
M(any)
M(given)
M+(time;)
M(for)SH
18899 36485 MT
(flow)
281 MX(control)
M(to)
M(work)
M(correctly,)
M(the)
M-(LaserWriter)
M(and)
M(the)
M(host)
M(must)SH
18899 37782 MT
(agree)
275 MX(on)
M(which)
M(protocol)
M(is)
M(in)
M(use.)SH
18891 39977 MT
(The)
491 MX(set)
M(of)
M+(signals)
M(used)
M(in)
M(the)
M(25-pin)
M(\050RS-232\051)
M(connector)
M(has)SH
18899 41274 MT
(been)
678 MX(slightly)
M(expanded)
M(and)
M(is)
M(now)
M(as)
M(follows.)
M(\050The)
M-(9-pin)SH
18899 42571 MT
(connector's)
275 MX(signal)
M(assignments)
M(are)
M(unchanged.\051)SH
20749 44323 MT
(2)SH
22499 XM
(Transmit)
M(Data)SH
20749 45519 MT
(3)SH
22499 XM
(Receive)
M(Data)SH
20749 46715 MT
(4)SH
22499 XM
(Request)
M(To)
M(Send)
M(\050optional\051)SH
20749 47911 MT
(6)SH
22499 XM
(Data)
M(Set)
M(Ready)
M(\050optional\051)SH
20749 49107 MT
(7)SH
22499 XM
(Signal)
M(Ground)SH
20199 50303 MT
(20)SH
22499 XM
(Data)
M(Terminal)
M(Ready)
M(\050optional\051)SH
18899 52055 MT
(The)
290 MX(`optional')
M+(signals)
M(need)
M(to)
M(be)
M(connected)
M(only)
M(if)
M(the)
M(host)
M(com-)SH
18899 53352 MT
(puter)
392 MX(requires)
M(them.)
M(If)SH
9 SS 
29476 XM
(DTR)SH
11 SS 
31668 XM
(flow)
M(control)
M(is)
M(in)
M-(use,)
M(the)
M(Data)
M(Set)SH
18899 54649 MT
(Ready)
275 MX(and)
M(Data)
M(Terminal)
M(Ready)
M(signals)
M(must)
M(be)
M(connected.)SH
18891 56844 MT
(Availability)
420 MX(of)SH
9 SS 
25903 XM
(DTR)SH
11 SS 
28123 XM
(flow)
M(control)
M(considerably)
M(simplifies)
M(use)
M(of)SH
18899 58141 MT
(the)
610 MX(LaserWriter)
M(from)
M(some)
M(computer)
M(systems,)
M(including)
M-(the)SH
10 SS 
/Helvetica SF
4500 63450 MT
(4)SH
8 SS 
7456 XM
(Update)
256 MX(for)
M(LaserWriter)
M(and)
M(LaserWriter)
M(Plus)
M(\050revision)
M(2\051)SH
ES
%%Page: 5 7 
BS
0 SI
11 SS 
/Times-Roman SF
19799 6155 MT
(IBM)
487 MX(PC.)
M(To)
M(set)
M(up)
M(the)
M(IBM)
M(PC)
M+(for)
M(communication)
M(with)
M(the)SH
19799 7452 MT
(LaserWriter)
370 MX(over)
M(serial)
M(port)
M-(1)
M(using)SH
9 SS 
36370 XM
(DTR)SH
11 SS 
38539 XM
(flow)
M(control,)
M(issue)
M(the)SH
19799 8749 MT
(commands:)SH
10 SS 
/Helvetica SF
22023 10975 MT
(MODE)
320 MX(COM1:9600,n,8,1,p)SH
22023 12172 MT
(MODE)
M(LPT1:=COM1:)SH
11 SS 
/Times-Roman SF
19799 14424 MT
(To)
505 MX(set)
M(up)
M(the)
M(LaserWriter,)
M(set)
M(the)
M(server)
M(mode)
M(switch)
M(to)
M(the)SH
19799 15721 MT
(`9600')
338 MX(position)
M(and)
M(then)
M(send)
M(it)
M(the)
M(following)
M(program)
M(from)
M(the)SH
19799 17018 MT
(host)
275 MX(computer:)SH
10 SS 
/Helvetica SF
22023 19244 MT
(serverdict)
320 MX(begin)
M(0)
M(exitserver)SH
22023 20441 MT
(statusdict)
M(begin)SH
22023 21638 MT
(25)
M(9600)
M(4)
M(setsccbatch)SH
22023 22835 MT
(end)SH
11 SS 
/Times-Roman SF
19799 25087 MT
(This)
339 MX(permanently)
M(changes)
M(the)
M(LaserWriter)
M(to)
M(use)SH
9 SS 
42147 XM
(DTR)SH
11 SS 
44287 XM
(flow)
M+(con-)SH
19799 26384 MT
(trol)
366 MX(when)
M-(executing)
M(in)
M(P)SH
9 SS 
(OST)SH
11 SS 
(S)SH
9 SS 
(CRIPT)SH
11 SS 
36141 XM
(batch)
M(mode)
M(over)
M(the)
M(25-pin)SH
19799 27681 MT
(connector.)
473 MX(To)
M(set)
M(up)
M(the)
M(LaserWriter)
M(to)
M(use)SH
9 SS 
40717 XM
(DTR)SH
11 SS 
42991 XM
(flow)
M+(control)SH
19799 28978 MT
(during)
522 MX(Diablo)
M(630)
M(emulation,)
M(send)
M-(it)
M(the)
M(same)
M(program)
M(with)SH
/Times-Bold SF
19799 30275 MT
(setsccinteractive)SH
/Times-Roman SF
27768 XM
(substituted)
275 MX(for)SH
/Times-Bold SF
34368 XM
(setsccbatch)SH
/Times-Roman SF
(.)SH
/Helvetica SF
19791 33472 MT
(Page)
352 MX(types)SH
/Times-Roman SF
19791 35424 MT
(The)
449 MX(selection)
M(of)
M(built-in)
M(`page)
M(types')
M(has)
M+(been)
M(enlarged)
M(to)
M(in-)SH
19799 36721 MT
(clude)
278 MX(two)
M(European)
M(sizes.)
M(The)
M(height)
M(of)
M-(the)SH
/Times-Bold SF
39400 XM
(letter)SH
/Times-Roman SF
42179 XM
(and)SH
/Times-Bold SF
44044 XM
(legal)SH
/Times-Roman SF
46521 XM
(page)SH
19799 38018 MT
(types)
355 MX(has)
M(been)
M(slightly)
M(decreased)
M+(\050due)
M(to)
M(memory)
M(constraints)
M(in)SH
19799 39315 MT
(the)
280 MX(new)
M(software\051.)
M(Finally,)
M(the)
M(function)
M(of)
M(the)SH
/Times-Bold SF
40305 XM
(note)SH
/Times-Roman SF
42601 XM
(page)
M(type)
M(has)SH
19799 40612 MT
(been)
275 MX(generalized.)SH
19791 42807 MT
(The)
287 MX(LaserWriter)
M(includes)
M(built-in)
M(device)
M(setup)
M(procedures)
M+(for)
M(es-)SH
19799 44104 MT
(tablishing)
275 MX(any)
M(of)
M(seven)
M(standard)
M(page)
M(types:)SH
33598 50 14999 46100 UL
9 SS 

/Helvetica-Bold SF
16399 48994 MT
(letter)SH
/Times-Roman SF
19799 XM
(an)
244 MX(imageable)
M(region)
M(of)
M-(8.0)
M(by)
M(10.78)
M(inches,)
M(centered)
M(on)
M(an)
M(8.5)
M(by)
M(11)
M(inch)
M(page)SH
19799 50092 MT
(\050that)
281 MX(is,)
M(with)
M(0.25)
M(inch)
M(margins)
M(on)
M(left)
M+(and)
M(right)
M(and)
M(0.11)
M(inch)
M(margins)
M(on)
M(top)SH
19799 51190 MT
(and)
225 MX(bottom\051.)
M(This)
M(is)
M(the)
M(standard)
M(page)
M(type)
M(for)
M(letter-size)
M(paper.)SH
/Helvetica-Bold SF
16549 52887 MT
(legal)SH
/Times-Roman SF
19799 XM
(an)
350 MX(imageable)
M(region)
M(of)
M(6.72)
M(by)
M(12.84)
M(inches,)
M(centered)
M(on)
M(an)
M(8.5)
M(by)
M-(14)
M(inch)SH
19799 53985 MT
(page.)
225 MX(This)
M(is)
M(the)
M(standard)
M(page)
M(type)
M(for)
M(legal-size)
M(paper.)SH
/Helvetica-Bold SF
17599 55682 MT
(a4)SH
/Times-Roman SF
19799 XM
(an)
237 MX(imageable)
M(region)
M(of)
M(7.79)
M(by)
M(11.08)
M(inches,)
M(centered)
M(on)
M+(an)
M(8.27)
M(by)
M(11.69)
M(inch)SH
19799 56780 MT
(page.)
225 MX(This)
M(is)
M(the)
M(standard)
M(page)
M(type)
M(for)
M(the)
M(European)
M(A4-size)
M(paper.)SH
/Helvetica-Bold SF
17549 58477 MT
(b5)SH
/Times-Roman SF
19799 XM
(an)
334 MX(imageable)
M(region)
M(of)
M(6.45)
M(by)
M(9.76)
M(inches,)
M(centered)
M(on)
M(a)
M(6.93)
M-(by)
M(9.84)
M(inch)SH
19799 59575 MT
(page.)
225 MX(This)
M(is)
M(the)
M(standard)
M(page)
M(type)
M(for)
M(the)
M(European)
M(B5-size)
M(paper.)SH
8 SS 
/Helvetica SF
29249 63450 MT
(2)
583 MX(LASERWRITER)
256 MX(FUNCTIONAL)
M(CHANGES)SH
10 SS 
48041 XM
(5)SH
ES
%%Page: 6 8 
BS
0 SI
9 SS 
/Helvetica-Bold SF
13199 6056 MT
(lettersmall)SH
/Times-Roman SF
18899 XM
(an)
349 MX(imageable)
M(region)
M+(of)
M(7.68)
M(by)
M(10.16)
M(inches,)
M(centered)
M(on)
M(an)
M(8.5)
M(by)
M(11)
M(inch)SH
18899 7154 MT
(page.)SH
/Helvetica-Bold SF
14399 8851 MT
(a4small)SH
/Times-Roman SF
18899 XM
(an)
238 MX(imageable)
M(region)
M(of)
M(7.47)
M(by)
M-(10.85)
M(inches,)
M(centered)
M(on)
M(an)
M(8.27)
M(by)
M(11.69)
M(inch)SH
18899 9949 MT
(page.)SH
/Helvetica-Bold SF
15799 11646 MT
(note)SH
/Times-Roman SF
18899 XM
(this)
299 MX(page)
M(type)
M+(selects)
M(one)
M(of)
M(the)
M(above)
M(page)
M(types)
M(according)
M(to)
M(the)
M(paper)
M(tray)SH
18899 12744 MT
(that)
286 MX(is)
M(installed.)
M(If)
M(the)
M(letter)
M(or)
M(A4)
M(tray)
M-(is)
M(installed,)SH
/Times-Bold SF
37942 XM
(note)SH
/Times-Roman SF
39877 XM
(selects)SH
/Times-Bold SF
42562 XM
(lettersmall)SH
/Times-Roman SF
46947 XM
(or)SH
/Times-Bold SF
18899 13842 MT
(a4small)SH
/Times-Roman SF
22168 XM
(respectively.)
319 MX(If)
M(the)
M(legal)
M(or)
M(B5)
M(tray)
M(is)
M(installed,)SH
/Times-Bold SF
40139 XM
(note)SH
/Times-Roman SF
42108 XM
(selects)SH
/Times-Bold SF
44827 XM
(legal)SH
/Times-Roman SF
46947 XM
(or)SH
/Times-Bold SF
18899 14940 MT
(b5)SH
/Times-Roman SF
(.)
304 MX(For)
M(the)
M(letter)
M-(and)
M(A4)
M(paper)
M(sizes,)
M(this)
M(has)
M(the)
M(effect)
M(of)
M(increasing)
M(all)
M(four)SH
18899 16038 MT
(margins)
263 MX(to)
M(approximately)
M(0.42)
M(inch.)
M(This)
M(reduction)
M+(in)
M(the)
M(imageable)
M(area)
M(frees)SH
18899 17136 MT
(up)
292 MX(as)
M(much)
M(as)
M(100000)
M(bytes)
M(of)
M(memory,)
M(which)
M-(is)
M(added)
M(to)
M(the)
M(VM)
M(and)
M(made)SH
18899 18234 MT
(available)
225 MX(for)
M(use)
M(by)
M(P)SH
7 SS 
(OST)SH
9 SS 
(S)SH
7 SS 
(CRIPT)SH
9 SS 
30730 XM
(programs.)SH
33598 50 14099 19631 UL
11 SS 
18891 21483 MT
(For)
491 MX(all)
M(page)
M(types,)
M(the)
M+(point)
M(\0500,)
M(0\051)
M(in)
M(default)
M(user)
M(coordinate)SH
18899 22780 MT
(space)
282 MX(is)
M(the)
M(lower)
M(left)
M(corner)
M(of)
M(the)
M(entire)
M(page,)
M(not)
M(of)
M(the)
M-(image-)SH
18899 24077 MT
(able)
524 MX(region;)
M(that)
M(is,)
M(the)
M(origin)
M(lies)
M(some)
M+(distance)
M(outside)
M(the)SH
18899 25374 MT
(lower)
306 MX(left)
M(corner)
M-(of)
M(the)
M(imageable)
M(region.)
M(The)
M(coordinate)
M(system)SH
18899 26671 MT
(is)
324 MX(arranged)
M(this)
M(way)
M(so)
M(that)
M(switching)
M(page)
M+(types)
M(does)
M(not)
M(affect)SH
18899 27968 MT
(the)
436 MX(position)
M(of)
M(graphical)
M(objects)
M(on)
M(the)
M(paper)
M(but)
M(just)
M(changes)SH
18899 29265 MT
(the)
275 MX(sizes)
M(of)
M(the)
M(margins.)SH
18891 31460 MT
(At)
383 MX(the)
M(beginning)
M(of)
M(each)
M(job,)
M+(the)
M(software)
M(detects)
M(what)
M(type)
M(of)SH
18899 32757 MT
(paper)
437 MX(tray)
M(is)
M-(installed)
M(and)
M(sets)
M(the)
M(default)
M(page)
M(type)
M(automati-)SH
18899 34054 MT
(cally.)
294 MX(If)
M(a)
M(letter)
M(or)
M(A4)
M(tray)
M(is)
M(installed,)
M(either)
M(the)
M+(full)
M(page)
M(size)
M(or)SH
18899 35351 MT
(the)
315 MX(`note')
M(page)
M(size)
M(is)
M-(used)
M(according)
M(to)
M(the)SH
/Times-Bold SF
38771 XM
(pagetype)SH
/Times-Roman SF
43301 XM
(parameter)SH
9 SS 
46090 36285 MT
(2)SH
11 SS 
18899 36648 MT
(previously)
363 MX(established)
M(in)SH
/Times-Bold SF
30376 XM
(statusdict)SH
/Times-Roman SF
35261 XM
(\050the)
M(default)
M(is)
M(full)
M(size\051.)SH
46903 XM
(A)SH
18899 37945 MT
(P)SH
9 SS 
(OST)SH
11 SS 
(S)SH
9 SS 
(CRIPT)SH
11 SS 
24766 XM
(program)
393 MX(can)
M(override)
M(the)
M(default)
M(page)
M(type)
M(by)
M-(ex-)SH
18899 39242 MT
(ecuting)
275 MX(one)
M(of)
M(the)
M(above)
M(procedures)
M(explicitly.)SH
/Helvetica SF
18891 42439 MT
(Fonts)
352 MX(and)
M(idle-time)
M(scan)
M(conversion)SH
/Times-Roman SF
18891 44391 MT
(As)
977 MX(mentioned)
M(in)
M(the)
M+(introduction,)
M(the)
M(LaserWriter)
M(and)SH
18899 45688 MT
(LaserWriter)
377 MX(Plus)
M(differ)
M(only)
M(in)
M(the)
M(set)
M(of)
M(fonts)
M(that)
M(are)
M(built-in.)SH
18899 46985 MT
(The)
339 MX(LaserWriter)
M(has)
M(the)
M(13)
M(`standard')
M(fonts)
M(that)
M(were)
M(present)
M(in)SH
18899 48282 MT
(the)
390 MX(original)
M(LaserWriter)
M(and)
M(documented)
M(in)
M(Appendix)
M(A)
M-(of)
M(the)SH
/Times-Italic SF
18899 49579 MT
(P)SH
9 SS 
(OST)SH
11 SS 
(S)SH
9 SS 
(CRIPT)SH
11 SS 
24565 XM
(Language)
344 MX(Reference)
M(Manual)SH
/Times-Roman SF
(.)
M(The)
M(LaserWriter)
M+(Plus)SH
18899 50876 MT
(has)
275 MX(22)
M(additional)
M(fonts,)
M(giving)
M(a)
M(total)
M(of)
M(35.)SH
18891 53071 MT
(All)
395 MX(the)
M(text)
M-(fonts)
M(in)
M(both)
M(the)
M(LaserWriter)
M(and)
M(LaserWriter)
M(Plus)SH
18899 54368 MT
(contain)
349 MX(five)
M(new)
M(characters)
M(that)
M+(were)
M(formerly)
M(available)
M(only)
M(in)SH
18899 55665 MT
(the)
381 MX(Symbol)
M(font.)
M(The)
M(names)
M(of)
M-(these)
M(characters)
M(are)
M(`)SH
10 SS 
/Helvetica SF
(copyright)SH
11 SS 
/Times-Roman SF
(',)SH
7 SS 
18899 58335 MT
(2)SH
9 SS 
19249 58662 MT
(If)
225 MX(no)
M(paper)
M(tray)
M(is)
M(installed)
M(at)
M(the)
M(start)
M(of)
M(a)
M(job,)
M(the)
M(letter-size)
M(tray)
M(is)
M(assumed.)SH
10 SS 
/Helvetica SF
4500 63450 MT
(6)SH
8 SS 
7456 XM
(Update)
256 MX(for)
M(LaserWriter)
M(and)
M(LaserWriter)
M(Plus)
M(\050revision)
M(2\051)SH
ES
%%Page: 7 9 
BS
0 SI
11 SS 
/Times-Roman SF
19799 6155 MT
(`)SH
10 SS 
/Helvetica SF
(registered)SH
11 SS 
/Times-Roman SF
(',)
674 MX(`)SH
10 SS 
/Helvetica SF
(trademark)SH
11 SS 
/Times-Roman SF
(',)
M(`)SH
10 SS 
/Helvetica SF
(logicalnot)SH
11 SS 
/Times-Roman SF
(',)
M(and)
M(`)SH
10 SS 
/Helvetica SF
(minus)SH
11 SS 
/Times-Roman SF
('.)
M+(None)
M(of)SH
19799 7452 MT
(these)
580 MX(new)
M-(characters)
M(are)
M(included)
M(in)
M(the)SH
/Times-Bold SF
39731 XM
(StandardEncoding)SH
/Times-Roman SF
19799 8749 MT
(array,)
275 MX(which)
M(has)
M(not)
M(been)
M(changed.)SH
19791 10944 MT
(The)
493 MX(default)
M(selection)
M(of)
M(characters)
M+(scan)
M(converted)
M(during)
M(idle)SH
19799 12241 MT
(time)
804 MX(has)
M(been)
M(changed)
M(in)
M(both)
M(the)
M(LaserWriter)
M(and)
M(the)SH
19799 13538 MT
(LaserWriter)
470 MX(Plus.)
M(Additionally,)
M(the)
M+(set)
M(of)
M(font)
M(numbers)
M(in)
M(the)SH
19799 14835 MT
(LaserWriter)
275 MX(Plus)
M(has)
M(been)
M(enlarged)
M(to)
M(encompass)
M(the)
M(new)
M(fonts.)SH
19791 17030 MT
(In)
700 MX(the)
M(LaserWriter,)
M(the)
M(characters)
M-(normally)
M(scan)
M(converted)SH
19799 18327 MT
(during)
296 MX(idle)
M(time)
M(are)
M(as)
M(follows)
M+(\050the)
M(sizes)
M(marked)
M(with)
M(an)
M(asterisk)SH
9 SS 
42249 19261 MT
(3)SH
11 SS 
19799 19624 MT
(are)
275 MX(pre-scanned)
M(and)
M(permanently)
M(resident)
M(in)SH
9 SS 
39527 XM
(ROM)SH
11 SS 
(\051:)SH
/Symbol SF
21418 21901 MT
(\267)SH
/Times-Roman SF
22199 XM
(Courier)
320 MX(10*)
M(point,)
M(full)SH
9 SS 
32554 XM
(ASCII)SH
11 SS 
35224 XM
(set)
M(\050intended)
M-(for)
M(program)
M(list-)SH
22199 23098 MT
(ings)
275 MX(and)
M(other)
M(`line)
M(printer')
M(applications\051)SH
/Symbol SF
21418 24894 MT
(\267)SH
/Times-Roman SF
22199 XM
(Times-Roman)
423 MX(10)
M+(and)
M(12*)
M(point,)
M(alphanumerics)
M(and)
M(com-)SH
22199 26091 MT
(mon)
275 MX(punctuation)SH
/Symbol SF
21418 27887 MT
(\267)SH
/Times-Roman SF
22199 XM
(Helvetica)
573 MX(10)
M(and)
M(12)
M-(point,)
M(alphanumerics)
M(and)
M(common)SH
22199 29084 MT
(punctuation)SH
/Symbol SF
21418 30880 MT
(\267)SH
/Times-Roman SF
22199 XM
(Times-Bold)
519 MX(and)
M+(Helvetica-Bold)
M(10)
M(and)
M(12)
M(point,)
M(lower-)SH
22199 32077 MT
(case)
275 MX(letters)
M(only)SH
19799 33730 MT
(In)
375 MX(the)
M-(LaserWriter)
M(Plus,)
M(the)
M(characters)
M(normally)
M(scan)
M(converted)SH
19799 35027 MT
(during)
275 MX(idle)
M(time)
M(are:)SH
/Symbol SF
21418 37304 MT
(\267)SH
/Times-Roman SF
22199 XM
(Courier)
M(10*)
M(point,)
M(full)SH
9 SS 
32374 XM
(ASCII)SH
11 SS 
34999 XM
(set)SH
/Symbol SF
21418 39100 MT
(\267)SH
/Times-Roman SF
22199 XM
(Times-Roman)
345 MX(10*)
M(and)
M(12*)
M(point,)
M(alphanumerics)
M+(and)
M(com-)SH
22199 40297 MT
(mon)
275 MX(punctuation)SH
/Symbol SF
21418 42093 MT
(\267)SH
/Times-Roman SF
22199 XM
(NewCenturySchlbk-Roman,)
1056 MX(Bookman-Light,)
M-(Helvetica,)SH
22199 43290 MT
(AvantGarde-Book,)
397 MX(and)
M(Palatino-Roman)
M+(10)
M(and)
M(12*)
M(point,)SH
22199 44487 MT
(alphanumerics)
275 MX(and)
M(common)
M(punctuation)SH
19791 46682 MT
(The)
493 MX(font)
M(numbers)
M-(used)
M(as)
M(operands)
M(to)SH
/Times-Bold SF
38265 XM
(setidlefonts)SH
/Times-Roman SF
44073 XM
(to)
M(specify)SH
19799 47979 MT
(non-default)
298 MX(idle-time)
M(font)
M(caching)
M(are)
M(given)
M(below.)
M(Note)
M(that)
M+(the)SH
19799 49276 MT
(first)
275 MX(13)
M(font)
M(numbers)
M(are)
M(the)
M(same)
M(as)
M(in)
M(the)
M(original)
M(LaserWriter.)SH
7 SS 
19799 56539 MT
(3)SH
9 SS 
20149 56866 MT
(The)
317 MX(reason)
M(this)
M(selection)
M(differs)
M(from)
M(that)
M-(of)
M(the)
M(original)
M(LaserWriter)
M(is)
M(that)SH
19799 57764 MT
(both)
383 MX(the)
M(font)
M(cache)
M(and)
M(the)
M(ROM)
M(space)
M(available)
M(for)
M(pre-scanned)
M+(fonts)
M(are)SH
19799 58662 MT
(slightly)
225 MX(smaller)
M(than)
M(before.)SH
8 SS 
/Helvetica SF
29249 63450 MT
(2)
583 MX(LASERWRITER)
256 MX(FUNCTIONAL)
M(CHANGES)SH
10 SS 
48041 XM
(7)SH
ES
%%Page: 8 10 
BS
0 SI
9 SS 
/Times-Roman SF
19649 6017 MT
(0)SH
21299 XM
(Courier)SH
33598 XM
(18)SH
35698 XM
(Bookman-DemiItalic)SH
19649 7015 MT
(1)SH
21299 XM
(Courier-Bold)SH
33598 XM
(19)SH
35698 XM
(Bookman-Light)SH
19649 8013 MT
(2)SH
21299 XM
(Courier-Oblique)SH
33598 XM
(20)SH
35698 XM
(Bookman-LightItalic)SH
19649 9011 MT
(3)SH
21299 XM
(Courier-BoldOblique)SH
33598 XM
(21)SH
35698 XM
(Helvetica-Narrow)SH
19649 10009 MT
(4)SH
21299 XM
(Times-Roman)SH
33598 XM
(22)SH
35698 XM
(Helvetica-Narrow-Bold)SH
19649 11007 MT
(5)SH
21299 XM
(Times-Bold)SH
33598 XM
(23)SH
35698 XM
(Helvetica-Narrow-BoldOblique)SH
19649 12005 MT
(6)SH
21299 XM
(Times-Italic)SH
33598 XM
(24)SH
35698 XM
(Helvetica-Narrow-Oblique)SH
19649 13003 MT
(7)SH
21299 XM
(Times-BoldItalic)SH
33598 XM
(25)SH
35698 XM
(NewCenturySchlbk-Roman)SH
19649 14001 MT
(8)SH
21299 XM
(Helvetica)SH
33598 XM
(26)SH
35698 XM
(NewCenturySchlbk-Bold)SH
19649 14999 MT
(9)SH
21299 XM
(Helvetica-Bold)SH
33598 XM
(27)SH
35698 XM
(NewCenturySchlbk-Italic)SH
19199 15997 MT
(10)SH
21299 XM
(Helvetica-Oblique)SH
33598 XM
(28)SH
35698 XM
(NewCenturySchlbk-BoldItalic)SH
19199 16995 MT
(11)SH
21299 XM
(Helvetica-BoldOblique)SH
33598 XM
(29)SH
35698 XM
(Palatino-Roman)SH
19199 17993 MT
(12)SH
21299 XM
(Symbol)SH
33598 XM
(30)SH
35698 XM
(Palatino-Bold)SH
19199 18991 MT
(13)SH
21299 XM
(AvantGarde-Book)SH
33598 XM
(31)SH
35698 XM
(Palatino-Italic)SH
19199 19989 MT
(14)SH
21299 XM
(AvantGarde-BookOblique)SH
33598 XM
(32)SH
35698 XM
(Palatino-BoldItalic)SH
19199 20987 MT
(15)SH
21299 XM
(AvantGarde-Demi)SH
33598 XM
(33)SH
35698 XM
(ZapfChancery-MediumItalic)SH
19199 21985 MT
(16)SH
21299 XM
(AvantGarde-DemiOblique)SH
33598 XM
(34)SH
35698 XM
(ZapfDingbats)SH
19199 22983 MT
(17)SH
21299 XM
(Bookman-Demi)SH
11 SS 
18891 25178 MT
(Aside)
483 MX(from)
M-(the)
M(selection)
M(of)
M(fonts,)
M(idle-time)
M(font)
M(caching)
M(con-)SH
18899 26475 MT
(tinues)
475 MX(to)
M(work)
M(as)
M(described)
M(in)
M(section)
M(D.4)
M(of)
M(the)SH
/Times-Italic SF
42375 XM
(P)SH
9 SS 
(OST)SH
11 SS 
(S)SH
9 SS 
(CRIPT)SH
11 SS 
18899 27772 MT
(Language)
275 MX(Reference)
M(Manual)SH
/Times-Roman SF
(.)SH
12 SS 
/Helvetica SF
11692 31640 MT
(3)
875 MX(IMPLEMENTATION)
384 MX(CHANGES)SH
11 SS 
18891 34837 MT
(Bugs)
352 MX(fixed)SH
/Times-Roman SF
18891 36789 MT
(Nearly)
802 MX(all)
M(the)
M-(problems)
M(described)
M(in)
M(section)
M(D.7)
M(of)
M(the)SH
/Times-Italic SF
18899 38086 MT
(P)SH
9 SS 
(OST)SH
11 SS 
(S)SH
9 SS 
(CRIPT)SH
11 SS 
24551 XM
(Language)
330 MX(Reference)
M+(Manual)SH
/Times-Roman SF
37761 XM
(have)
M(been)
M(fixed)
M(in)
M(the)SH
18899 39383 MT
(new)
275 MX(LaserWriter)
M(software.)
M(The)
M(only)
M(unsolved)
M(problems)
M(are:)SH
/Symbol SF
20518 41660 MT
(\267)SH
/Times-Roman SF
21299 XM
(the)SH
/Times-Bold SF
23591 XM
(readline)SH
/Times-Roman SF
28389 XM
(problem,)
948 MX(described)
M(under)
M-(`Input/output)SH
21299 42857 MT
(problems')SH
/Symbol SF
20518 44653 MT
(\267)SH
/Times-Roman SF
21299 XM
(the)SH
/Times-Bold SF
23058 XM
(BuildChar)SH
/Times-Roman SF
28487 XM
(problem,)
415 MX(described)
M(under)
M(`Font)
M+(and)
M(cache)SH
21299 45850 MT
(problems')SH
/Symbol SF
20518 47646 MT
(\267)SH
/Times-Roman SF
21299 XM
(the)SH
/Times-Bold SF
23078 XM
(manualfeed)SH
/Times-Roman SF
29013 XM
(problem,)
435 MX(described)
M(under)
M(`Miscellaneous)SH
21299 48843 MT
(problems')SH
18891 51038 MT
(The)
718 MX(first)
M(of)
M(these)
M(should)
M(be)
M(considered)
M(a)
M(property)
M+(of)
M(all)SH
18899 52335 MT
(P)SH
9 SS 
(OST)SH
11 SS 
(S)SH
9 SS 
(CRIPT)SH
11 SS 
24895 XM
(printers)
522 MX(when)
M(connected)
M(to)
M(AppleTalk;)
M(the)
M(latter)SH
18899 53632 MT
(two)
275 MX(are)
M(peculiar)
M(to)
M(the)
M(LaserWriter.)SH
10 SS 
/Helvetica SF
4500 63450 MT
(8)SH
8 SS 
7456 XM
(Update)
256 MX(for)
M(LaserWriter)
M(and)
M(LaserWriter)
M(Plus)
M(\050revision)
M(2\051)SH
ES
%%Page: 9 11 
BS
0 SI
11 SS 
/Helvetica SF
19791 6202 MT
(Performance)
352 MX(enhancements)SH
/Times-Roman SF
19791 8154 MT
(The)
432 MX(performance)
M(of)
M(the)
M(LaserWriter)
M+(for)
M(many)
M(applications)
M(has)SH
19799 9451 MT
(been)
305 MX(significantly)
M(improved.)
M(The)
M(main)
M(areas)
M(of)
M(improvement)
M-(are)SH
19799 10748 MT
(as)
275 MX(follows:)SH
/Symbol SF
21418 13025 MT
(\267)SH
/Times-Roman SF
22199 XM
(The)
702 MX(P)SH
9 SS 
(OST)SH
11 SS 
(S)SH
9 SS 
(CRIPT)SH
11 SS 
30787 XM
(interpreter)
M(is)
M(substantially)
M(\05030)
M+(to)
M(40)SH
22199 14222 MT
(percent\051)
740 MX(faster)
M(than)
M(before.)
M(This)
M(improvement)
M-(applies)SH
22199 15419 MT
(primarily)
321 MX(to)
M(execution)
M+(of)
M(procedures)
M(already)
M(stored)
M(in)
M(VM;)SH
22199 16616 MT
(programs)
544 MX(being)
M(interpreted)
M(from)
M(a)
M-(file)
M(or)
M(string)
M(receive)SH
22199 17813 MT
(relatively)
275 MX(little)
M(benefit.)SH
/Symbol SF
21418 19609 MT
(\267)SH
/Times-Roman SF
22199 XM
(Efficiency)
714 MX(of)
M(AppleTalk)
M(communication)
M(has)
M(been)
M(im-)SH
22199 20806 MT
(proved)
321 MX(by)
M(a)
M(buffer)
M(strategy)
M-(that)
M(permits)
M(greater)
M(overlap)
M(be-)SH
22199 22003 MT
(tween)
300 MX(the)
M(work)
M(being)
M(performed)
M(on)
M(the)
M(LaserWriter)
M(and)
M(on)SH
22199 23200 MT
(the)
387 MX(host.)
M-(This)
M(is)
M(especially)
M(noticeable)
M(when)
M(using)
M(Apple's)SH
22199 24397 MT
(Print)
528 MX(Manager)
M(on)
M+(the)
M(Macintosh,)
M(which)
M(sends)
M(relatively)SH
22199 25594 MT
(short)
275 MX(\050512)
M(byte\051)
M(blocks.)SH
/Symbol SF
21418 27390 MT
(\267)SH
/Times-Roman SF
22199 XM
(Page)
420 MX(throughput)
M-(for)
M(many)
M(applications)
M(is)
M(significantly)
M(in-)SH
22199 28587 MT
(creased)
275 MX(by)
M(a)
M(new)
M(printing)
M+(strategy)
M(that)
M(permits)
M(imaging)
M(of)
M(a)SH
22199 29784 MT
(page)
447 MX(to)
M(be)
M(overlapped)
M(with)
M(execution)
M(of)
M(the)
M(P)SH
9 SS 
(OST)SH
11 SS 
(S)SH
9 SS 
(CRIPT)SH
11 SS 
22199 30981 MT
(description)
375 MX(for)
M(the)
M(next)
M(page.)
M(Formerly,)
M(page)
M(imaging)
M(and)SH
22199 32178 MT
(P)SH
9 SS 
(OST)SH
11 SS 
(S)SH
9 SS 
(CRIPT)SH
11 SS 
28259 XM
(execution)
586 MX(were)
M(performed)
M(serially;)
M(the)
M(im-)SH
22199 33375 MT
(aging)
275 MX(time)
M(\050up)
M(to)
M(6)
M(seconds)
M(per)
M(page\051)
M(was)
M(entirely)
M(wasted.)SH
/Symbol SF
21418 35171 MT
(\267)SH
/Times-Roman SF
22199 XM
(Page)
516 MX(descriptions)
M(that)
M(print)
M(large)
M(characters)
M+(may)
M(benefit)SH
22199 36368 MT
(from)
557 MX(the)
M(compressed)
M(character)
M(mechanism,)
M(described)
M-(in)SH
22199 37565 MT
(section)
296 MX(4.)
M(Large)
M+(characters)
M(now)
M(are)
M(often)
M(obtained)
M(from)
M(the)SH
22199 38762 MT
(font)
461 MX(cache,)
M(whereas)
M(formerly)
M-(they)
M(were)
M(always)
M(produced)SH
22199 39959 MT
(by)
275 MX(re-executing)
M(the)
M(character)
M(descriptions.)SH
/Symbol SF
21418 41755 MT
(\267)SH
/Times-Roman SF
22199 XM
(Characters)
517 MX(may)
M(be)
M(retained)
M(in)
M+(the)
M(font)
M(cache)
M(even)
M(after)SH
22199 42952 MT
(removal)
704 MX(of)
M(the)
M(font)
M(definition)
M-(from)
M(which)
M(they)
M(were)SH
22199 44149 MT
(generated.)
639 MX(If)
M(the)
M(same)
M(font)
M(is)
M(later)
M+(defined)
M(again,)
M(the)SH
22199 45346 MT
(cached)
340 MX(characters)
M(will)
M(be)
M(found)
M(and)
M(used)
M(if)
M(they)
M(still)
M-(exist.)SH
22199 46543 MT
(This)
385 MX(depends)
M(on)
M(correct)
M(use)
M(of)
M(the)SH
/Times-Bold SF
38333 XM
(UniqueID)SH
/Times-Roman SF
43365 XM
(entry)
M+(in)
M(the)SH
22199 47740 MT
(font)
446 MX(definitions;)
M(see)
M(the)
M-(discussion)
M(under)
M(`Modifying)
M(and)SH
22199 48937 MT
(creating)
M-(fonts')
M(in)
M(the)SH
/Times-Italic SF
32283 XM
(P)SH
9 SS 
(OST)SH
11 SS 
(S)SH
9 SS 
(CRIPT)SH
11 SS 
38049 XM
(Language)
M+(Tutorial)
M(and)SH
22199 50134 MT
(Cookbook)SH
/Times-Roman SF
(.)SH
19791 52329 MT
(Timing)
447 MX(experiments)
M(that)
M(attempt)
M(to)
M-(use)SH
/Times-Bold SF
38359 XM
(usertime)SH
/Times-Roman SF
42897 XM
(to)
M(determine)SH
19799 53626 MT
(the)
365 MX(execution)
M(time)
M(of)
M(P)SH
9 SS 
(OST)SH
11 SS 
(S)SH
9 SS 
(CRIPT)SH
11 SS 
35590 XM
(graphics)
M(operators)
M(may)
M(yield)SH
19799 54923 MT
(very)
461 MX(misleading)
M(results.)
M(This)
M(is)
M(another)
M(side-effect)
M(of)
M(the)
M(new)SH
19799 56220 MT
(printing)
664 MX(overlap)
M(strategy;)
M(also,)
M(much)
M(of)
M(the)
M+(work)
M(of)
M(some)SH
19799 57517 MT
(P)SH
9 SS 
(OST)SH
11 SS 
(S)SH
9 SS 
(CRIPT)SH
11 SS 
25768 XM
(painting)
495 MX(operators)
M(is)
M(now)
M(deferred)
M(until)
M(after)
M(the)SH
8 SS 
/Helvetica SF
33286 63450 MT
(3)
583 MX(IMPLEMENTATION)
256 MX(CHANGES)SH
10 SS 
48041 XM
(9)SH
ES
%%Page: 10 12 
BS
0 SI
11 SS 
/Times-Roman SF
18899 6155 MT
(next)SH
/Times-Bold SF
21088 XM
(showpage)SH
/Times-Roman SF
(.)
295 MX(In)
M(order)
M(to)
M(obtain)
M(valid)
M(timings,)
M(first)
M+(execute)
M(the)SH
18899 7452 MT
(following:)SH
10 SS 
/Helvetica SF
21123 9678 MT
(gsave)
320 MX(initgraphics)SH
21123 10875 MT
(100)
M(100)
M(translate)SH
21123 12072 MT
(1)
M(1)
M(8)
M([1)
M(0)
M(0)
M(1)
M(0)
M(0])
M({\050\134377\051})
M(image)SH
21123 13269 MT
(grestore)SH
11 SS 
/Times-Roman SF
18899 15521 MT
(Execution)
587 MX(of)
M(the)SH
/Times-Bold SF
27380 XM
(image)SH
/Times-Roman SF
30777 XM
(operator)
M-(\050which)
M(paints)
M(a)
M(tiny)
M(white)SH
18899 16818 MT
(square)
391 MX(on)
M(the)
M(page\051)
M(waits)
M(for)
M(all)
M(activity)
M(associated)
M+(with)
M(a)
M(pre-)SH
18899 18115 MT
(vious)SH
/Times-Bold SF
21661 XM
(showpage)SH
/Times-Roman SF
26623 XM
(to)
377 MX(cease)
M(and)
M(forces)
M(subsequent)
M(painting)
M(opera-)SH
18899 19412 MT
(tions)
478 MX(for)
M(the)
M(current)
M(page)
M(to)
M(be)
M(performed)
M+(immediately)
M(rather)SH
9 SS 
25016 20346 MT
(4)SH
11 SS 
18899 20709 MT
(than)
286 MX(deferred.)SH
25752 XM
(Naturally,)
M(this)
M(technique)
M(is)
M-(very)
M(dependent)
M(on)
M(the)SH
18899 22006 MT
(current)
595 MX(LaserWriter)
M(implementation)
M(and)
M(does)
M(not)
M(necessarily)SH
18899 23303 MT
(apply)
275 MX(to)
M(other)
M(P)SH
9 SS 
(OST)SH
11 SS 
(S)SH
9 SS 
(CRIPT)SH
11 SS 
31033 XM
(printers.)SH
18891 25498 MT
(The)
376 MX(total)
M(amount)
M(of)
M(virtual)
M(memory)
M(available)
M-(is)
M(not)
M(exactly)
M(the)SH
18899 26795 MT
(same)
404 MX(as)
M(in)
M(the)
M(original)
M+(LaserWriter,)
M(though)
M(it)
M(is)
M(close)
M(to)
M(being)SH
18899 28092 MT
(the)
305 MX(same.)
M(This)
M(may)
M(affect)
M(the)
M(maximum)
M(number)
M-(of)
M(down-loaded)SH
18899 29389 MT
(and)
381 MX(user-defined)
M(fonts)
M(that)
M(can)
M(be)
M(present)
M(simultaneously.)
M+(Note)SH
18899 30686 MT
(that)
327 MX(P)SH
9 SS 
(OST)SH
11 SS 
(S)SH
9 SS 
(CRIPT)SH
11 SS 
26677 XM
(page)
M(descriptions)
M(with)
M(large)
M(preambles)
M(can)
M(ob-)SH
18899 31983 MT
(tain)
375 MX(significant)
M(VM)
M(space)
M(savings)
M(by)
M(making)
M(use)
M(of)
M(the)
M(packed)SH
18899 33280 MT
(array)
275 MX(facility)
M(described)
M(in)
M(section)
M(4.)SH
/Helvetica-Bold SF
18891 36477 MT
(showpage)SH
/Helvetica SF
24623 XM
(and)SH
/Helvetica-Bold SF
26811 XM
(copypage)SH
/Times-Roman SF
18891 38429 MT
(The)
316 MX(correct)
M(use)
M(of)
M(the)
M(output)
M(operators)SH
/Times-Bold SF
36495 XM
(showpage)SH
/Times-Roman SF
41394 XM
(and)SH
/Times-Bold SF
43297 XM
(copypage)SH
/Times-Roman SF
18899 39726 MT
(is)
564 MX(a)
M(matter)
M(requiring)
M+(some)
M(clarification.)
M(Inappropriate)
M(use)
M(of)SH
/Times-Bold SF
18899 41023 MT
(copypage)SH
/Times-Roman SF
23774 XM
(can)
475 MX(result)
M(in)
M(significant)
M(performance)
M(degradation)
M-(in)SH
18899 42320 MT
(the)
275 MX(new)
M(LaserWriter.)SH
/Times-Bold SF
18891 44515 MT
(showpage)SH
/Times-Roman SF
23798 XM
(is)
323 MX(the)
M(normal)
M+(operator)
M(for)
M(causing)
M(pages)
M(to)
M(be)
M(output.)SH
18899 45812 MT
(It)
296 MX(has)
M(three)
M(effects:)
M-(it)
M(prints)
M(the)
M(current)
M(page,)
M(it)
M(erases)
M(the)
M(current)SH
18899 47109 MT
(page,)
275 MX(and)
M(it)
M(reinitializes)
M(the)
M(graphics)
M(state.)SH
/Times-Bold SF
18891 49304 MT
(copypage)SH
/Times-Roman SF
23875 XM
(is)
584 MX(a)
M(somewhat)
M(more)
M(specialized)
M(operator)
M+(that)
M(just)SH
18899 50601 MT
(prints)
334 MX(the)
M(current)
M-(page)
M(but)
M(does)
M(not)
M(erase)
M(it)
M(or)
M(reset)
M(the)
M(graphics)SH
18899 51898 MT
(state.)
340 MX(Its)
M(main)
M(intended)
M(use)
M(is)
M(to)
M(permit)
M(adding)
M(new)
M+(marks)
M(to)
M(an)SH
18899 53195 MT
(existing)
275 MX(page,)
M(e.g.,)
M(when)
M(building)
M(up)
M(a)
M(page)
M(incrementally.)SH
7 SS 
18899 56539 MT
(4)SH
9 SS 
19249 56866 MT
(The)
255 MX(LaserWriter)
M(has)
M(insufficient)
M(buffer)
M-(space)
M(to)
M(permit)
M(the)
M(painting)
M(of)
M(images)SH
18899 57764 MT
(to)
249 MX(be)
M(deferred;)
M+(instead,)
M(it)
M(must)
M(paint)
M(images)
M(directly)
M(into)
M(the)
M(frame)
M(buffer.)
M(This)SH
18899 58662 MT
(forces)
225 MX(painting)
M(and)
M(output)
M(of)
M(the)
M(current)
M(page)
M(to)
M(be)
M(strictly)
M(serial.)SH
10 SS 
/Helvetica SF
4500 63450 MT
(10)SH
8 SS 
8012 XM
(Update)
256 MX(for)
M(LaserWriter)
M(and)
M(LaserWriter)
M(Plus)
M(\050revision)
M(2\051)SH
ES
%%Trailer
%%Pages: 23 
%%DocumentFonts: Times-Roman Helvetica-Bold Times-Bold Symbol Helvetica Times-Italic PSLogo Helvetica

19-Feb-86 08:48:34-PST,56208;000000000000
Return-Path: <adobe!shore@glacier>
Received: from glacier by SU-SCORE.ARPA with TCP; Tue 18 Feb 86 17:45:43-PST
Received: by glacier with Sendmail; Tue, 18 Feb 86 17:42:46 pst
Received: by adobe.UUCP (4.12/4.7)
	id AA09994; Tue, 18 Feb 86 16:59:29 pst
From: adobe!shore@glacier (Andrew Shore)
Message-Id: <8602190059.AA09994@adobe.UUCP>
Date: 18 Feb 1986 1659-PST (Tuesday)
To: glacier!info-postscript@glacier
Subject: New LaserWriter(s) PostScript Language Update (2 of 2)
ReSent-Date: Wed 19 Feb 86 08:48:34-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12184636723.21.REULING@SU-SCORE.ARPA>

Here is a PostScript print file for the second half of the new
Apple LaserWriter and LaserWriter Plus PostScript Language Update
documentation.  It is a complete PostScript print file for the
last 11 pages.


%!PS-Adobe-1.0
%%Title: lwrev2.mss
%%DocumentFonts: (atend)
%%Creator: Ed Taft and Scribe 4(1400)-4
%%CreationDate: 8 December 1985 12:33
%%Pages: (atend)
%%EndComments
/pica{12 mul}def/inch{72 mul}def/mtx matrix def
/pagewidth 7.375 inch def/pagelength 9.25 inch def
%/pagegrid{0 0 moveto pagewidth 0 lineto pagewidth pagelength lineto
%  0 pagelength lineto 0 0 lineto closepath 0 setlinewidth stroke}def
/shtm 9 def /shtl 12 def
/pagegrid{gsave 0 setlinecap .25 setlinewidth newpath
 0 shtm neg moveto 0 shtl neg rlineto stroke
 shtm neg 0 moveto shtl neg 0 rlineto stroke
 pagewidth shtm add 0 moveto shtl 0 rlineto stroke
 pagewidth shtm neg moveto 0 shtl neg rlineto stroke
 0 pagelength shtm add moveto 0 shtl rlineto stroke
 shtm neg pagelength moveto shtl neg 0 rlineto stroke
 pagewidth shtm add pagelength moveto shtl 0 rlineto stroke
 pagewidth pagelength shtm add moveto 0 shtl rlineto stroke 
 grestore
} def
/PSLogod 20 dict def%PostScriptLogo
/Helvetica findfont{1 index/FID ne{PSLogod 3 1 roll put}{pop pop}ifelse}forall
PSLogod/FontMatrix[0.001 0 0 0.000916667 0 0]put
PSLogod/FontName/PSLogo put/PSLogo PSLogod definefont pop
/BOT{pop gsave currentpoint translate -90 rotate SSZ -.7 mul 0 moveto(^)show
 grestore(^)stringwidth rmoveto}def
% chapter box/fountain
/fstr 128 13 sub string def 128 1 255 13 sub{fstr exch dup
 255 div 180 mul cos neg 2 div .5 add 255 mul cvi exch 128 sub exch put}for
/fountain{/ury exch def/urx exch def/lly exch def/llx exch def
  gsave urx ury translate 180 rotate urx llx sub ury lly sub scale
  128 13 sub 10 8[-128 13 add 0 0 10 128 13 sub 0]{fstr}image grestore}def
%%%%%%%%%%%%%%%%%%%%%%%John's Figure Stuff  %16 Sept 85
/figdict 100 dict def figdict begin
/scl .2157 def %scale of page
/rscl 1 scl div def % inverse scale
/hfpt .5 rscl mul def
/flpt rscl def
/qtpt .25 rscl mul def
/dsh {qtpt setlinewidth [2 rscl mul dup ] 0 setdash}def
/fntsz 8 rscl mul def
/fntoff fntsz .75 mul 2 div def
/hv /Helvetica findfont fntsz scalefont def
/hvs /Helvetica findfont fntsz .75 mul scalefont def
/sym /Symbol findfont fntsz scalefont def
/syms /Symbol findfont fntsz .75 mul scalefont def
/arrow
  {/ye exch def /xe exch def
   /yb exch def /xb exch def
   /xd xe xb sub def /yd ye yb sub def
   /mg xd dup mul yd dup mul add sqrt def
   /ang yd xd atan def
   gsave
   xb yb translate ang rotate
   2 rscl mul 0 moveto mg 2 rscl mul sub 0 lineto 
   qtpt setlinewidth stroke
   mg 0 moveto -4 rscl mul 2 rscl mul rlineto
   0 -4 rscl mul rlineto closepath fill
   grestore
  }def

/2arrow 
  {/ye exch def /xe exch def
   /yb exch def /xb exch def
   /xd xe xb sub def /yd ye yb sub def
   /mg xd dup mul yd dup mul add sqrt def
   /ang yd xd atan def
   gsave
   xb yb translate ang rotate
   2 rscl mul 0 moveto mg 2 rscl mul sub 0 lineto 
   qtpt setlinewidth stroke
   0 0 moveto 4 rscl mul 2 rscl mul lineto
   0 -4 rscl mul rlineto closepath fill
   mg 0 moveto -4 rscl mul 2 rscl mul rlineto
   0 -4 rscl mul rlineto closepath fill
   grestore
  }def

/inch {72 mul}def

/angshow
 {gsave
  /prc exch def
  /rd exch def
  /eang exch def
  /bang exch def
  /ys exch def
  /xs exch def
  /ad 180 rd 3.14159 mul div .75 mul def
  newpath
  xs ys rd bang eang ad sub arc
  qtpt setlinewidth stroke
  gsave xs ys translate
  eang rotate rd 0 translate
  flpt neg flpt 3 mul neg moveto flpt 2 mul 0 rlineto
  0 0 lineto closepath fill
  grestore
  hv setfont
  /mang bang eang add 2 div def
  /prc load
  xs mang cos rd mul 2 rscl mul sub add
  ys mang sin rd mul 4 rscl mul sub add rtext
 grestore
 }def  

/dotrad 1.5 rscl mul def
/dot 
 {gsave 
  translate dotrad 0 moveto 0 0 dotrad 0 359 arc closepath fill 
  grestore
 }def
/shw {show}def

/subscript  
 {gsave 
  hvs setfont subbck suboff rmoveto show
  currentpoint suboff neg add exch subbck neg add exch
  grestore moveto}def

/subbck -.5 rscl mul def
/suboff -4 rscl mul def

/rtext
 {gsave translate /prc exch def
  $ct begin
  0 0 moveto
  prc currentpoint
  end
  /ty exch def /tx exch def
  0 0 moveto
  tx neg 0 rmoveto
  prc 
  grestore
  }def

/ctext
 {gsave translate /prc exch def
  $ct begin
  0 0 moveto
  prc currentpoint
  end
  /ty exch def /tx exch def
  0 0 moveto
  tx 2 div neg 0 rmoveto
  prc 
  grestore
  }def
/wbox
    {gsave
    /ury exch def /urx exch def /lly exch def /llx exch def
    llx lly moveto llx ury lineto urx ury lineto urx lly lineto
    closepath 1 setgray fill grestore}def
/cwtext
 {gsave translate /prc exch def
  $ct begin
  0 0 moveto
  prc currentpoint
  end
  /ty exch def /tx exch def
  tx 2 div neg fntsz neg .25 mul tx 2 div fntsz wbox
  0 0 moveto
  tx 2 div neg 0 rmoveto
  prc 
  grestore
  }def

/ltext
 {gsave translate /prc exch def
  0 0 moveto
  prc 
  grestore
  }def
/$ct 10 dict def
$ct /show {stringwidth rmoveto} put
end %end figdict
%%%%%%%%%%%%%%%%%%%%%%%END John's Stuff
/reencsmalldict 12 dict def /ReEncodeSmall      % oldname newname vector
  {reencsmalldict begin
    /newcodesandnames exch def /newfontname exch def /basefontname exch def
    FontDirectory newfontname known
      {/ReEncodeSmall errordict /fontalreadydefined get exec} if
    /basefontdict basefontname findfont def
    /newfont basefontdict maxlength dict def
    basefontdict {exch dup /FID ne {dup /Encoding eq
        {exch dup length array copy newfont 3 1 roll put}
        {exch newfont 3 1 roll put}ifelse}{pop pop}ifelse}forall
    newfont /FontName newfontname put newcodesandnames aload pop
    newcodesandnames length 2 idiv{newfont /Encoding get 3 1 roll put}repeat
    newfontname newfont definefont pop end}def
/univers[
0/Aacute 1/aacute
2/Acircumflex 3/acircumflex
4/Adieresis 5/adieresis
6/Agrave 7/agrave
8/Aring 9/aring
10/Atilde 11/atilde
12/Ccedilla 13/ccedilla
14/Eacute 15/eacute
16/Ecircumflex 17/ecircumflex
18/Edieresis 19/edieresis
20/Egrave 21/egrave
22/Iacute 23/iacute
24/Icircumflex 25/icircumflex
26/Idieresis 27/idieresis
28/Igrave 29/igrave
30/Ntilde 31/ntilde
128/Oacute 129/oacute
130/Ocircumflex 131/ocircumflex
132/Odieresis 133/odieresis
134/Ograve 135/ograve
136/Otilde 137/otilde
138/Scaron 139/scaron
140/Uacute 141/uacute
142/Ucircumflex 143/ucircumflex
144/Udieresis 145/udieresis
146/Ugrave 147/ugrave
148/Ydieresis 149/ydieresis
150/Zcaron 151/zcaron
]def
/tspecial[
1/Aacute 2/Acircumflex 3/Adieresis 4/Agrave 5/Aring 6/Atilde
7/Ccedilla
8/Eacute 9/Ecircumflex 10/Edieresis 11/Egrave
12/Iacute 13/Icircumflex 14/Idieresis 15/Igrave
16/Ntilde
17/Oacute 18/Ocircumflex 19/Odieresis 20/Ograve 21/Otilde
22/Scaron
23/Uacute 24/Ucircumflex 25/Udieresis 26/Ugrave
27/Ydieresis
28/Zcaron
129/aacute 130/acircumflex 131/adieresis 132/agrave 133/aring 134/atilde
135/ccedilla
136/eacute 137/ecircumflex 138/edieresis 139/egrave
140/iacute 141/icircumflex 142/idieresis 143/igrave 
144/ntilde
145/oacute 146/ocircumflex 147/odieresis 148/ograve 149/otilde
150/scaron
151/uacute 152/ucircumflex 153/udieresis 154/ugrave 
155/ydieresis
156/zcaron
] def
/Times-Roman /Times-Special tspecial ReEncodeSmall
%%%%%%%%%%%%%%%%%%%%%%%
% mostly standard stuff
/BS{/SV save def 40 40 translate}def/ES{pagegrid showpage SV restore}def
/SC{setrgbcolor}def/SLT 0 def/WFT/Courier def/SSZ 10 def
/RST{100 div}def/CVTXY{RST pagelength sub abs exch RST exch}def
/RDF{WFT findfont SLT 0 eq{SSZ scalefont}
  {[SSZ 0 SLT sin SLT cos div SSZ mul SSZ 0 0]makefont}ifelse setfont}def
/SI{/SLT exch def RDF}def/SF{/WFT exch def RDF}def/SS{/SSZ exch def RDF}def
/MT{CVTXY moveto}def/XM{RST currentpoint exch pop moveto}def
/UL{gsave newpath CVTXY transform round exch round exch itransform moveto RST
 dup 2 div round 0 exch rmoveto setlinewidth RST 0 rlineto stroke grestore}def
/PB{/PV save def/showpage{}def 
 /ypos exch def /xpos exch def /sval exch def
  xpos 4985 le {/xpos 4500 def}{xpos 6120 le {/xpos 5400 def}if}ifelse
 xpos ypos CVTXY translate 
%  gsave 0 setlinewidth newpath 
%  -1 0 moveto 1 0 lineto 0 -1 moveto 0 1 lineto stroke grestore
 }def/PE{PV restore}def
/MSS{SSW RST 0 rmoveto}def/SNS{SSW add/SSW exch def MSS}def/SH{show}def
/MX{/SSW exch def SH MSS}def/M2{SH MSS MSS}def/M{SH MSS}def
/M+{SH 1 SNS}def/M-{SH -1 SNS}def
% statusdict /prefeed true put
%%EndProlog
%%Page: 11 13 
BS
0 SI
11 SS 
/Times-Bold SF
19791 6155 MT
(showpage)SH
/Times-Roman SF
24650 XM
(is)
275 MX(logically)
M(equivalent)
M(to)
M(the)
M(sequence:)SH
10 SS 
/Helvetica SF
22023 8381 MT
(copypage)
320 MX(erasepage)
M(initgraphics)SH
11 SS 
/Times-Roman SF
19799 10633 MT
(However,)
374 MX(use)
M(of)SH
/Times-Bold SF
27607 XM
(copypage)SH
/Times-Roman SF
32380 XM
(for)
M-(printing)
M(pages)
M(can)
M(degrade)
M(page)SH
19799 11930 MT
(throughput)
606 MX(significantly)
M+(\050a)
M(second)
M(or)
M(more)
M(per)
M(page)
M(on)
M(the)SH
19799 13227 MT
(LaserWriter)
532 MX(and)
M(substantially)
M(more)
M(on)
M(certain)
M(other)
M-(printers\051.)SH
19799 14524 MT
(One)
387 MX(reason)
M(for)
M(this)
M(is)
M(that)SH
/Times-Bold SF
32079 XM
(showpage)SH
/Times-Roman SF
37050 XM
(performs)
M(the)
M(printing)
M(and)SH
19799 15821 MT
(the)
355 MX(erasing)
M(in)
M(parallel)
M(whereas)
M-(the)SH
/Times-Bold SF
35547 XM
(copypage)
M(erasepage)SH
/Times-Roman SF
45297 XM
(method)SH
19799 17118 MT
(performs)
275 MX(them)
M(serially;)
M(there)
M(are)
M(other)
M(reasons)
M(as)
M(well.)SH
/Times-Bold SF
19791 19313 MT
(copypage)SH
/Times-Roman SF
24859 XM
(should)
668 MX(also)
M(not)
M(be)
M(used)
M+(to)
M(defeat)
M(the)
M(automatic)SH
9 SS 
32004 20247 MT
(5)SH
11 SS 
/Times-Bold SF
19799 20610 MT
(initgraphics)SH
/Times-Roman SF
25826 XM
(of)SH
/Times-Bold SF
27145 XM
(showpage)SH
/Times-Roman SF
(.)SH
32857 XM
(That)
403 MX(is,)
M(to)
M(print)
M(and)
M(erase)
M(the)
M(cur-)SH
19799 21907 MT
(rent)
318 MX(page)
M-(but)
M(leave)
M(the)
M(graphics)
M(state)
M(unchanged,)
M(you)
M(should)SH
/Times-Italic SF
47191 XM
(not)SH
/Times-Roman SF
19799 23204 MT
(say:)SH
10 SS 
/Helvetica SF
22023 25430 MT
(copypage)
320 MX(erasepage)SH
11 SS 
/Times-Roman SF
19799 27682 MT
(Instead)
275 MX(you)
M(should)
M(say:)SH
10 SS 
/Helvetica SF
22023 29908 MT
(gsave)
320 MX(showpage)
M(grestore)SH
11 SS 
/Times-Roman SF
19791 32160 MT
(Please)
303 MX(also)
M(note)
M(that)
M(the)
M(correct)
M(way)
M(to)
M(print)
M(multiple)
M(copies)
M(of)
M(a)SH
19799 33457 MT
(page)
353 MX(is)
M(to)
M-(associate)
M(the)
M(desired)
M(number)
M(of)
M(copies)
M(with)
M(the)
M(name)SH
/Times-Bold SF
19799 34754 MT
(#copies)SH
/Times-Roman SF
24074 XM
(prior)
853 MX(to)
M(invoking)SH
/Times-Bold SF
33540 XM
(showpage)SH
/Times-Roman SF
(,)
M+(as)
M(discussed)
M(under)SH
/Times-Bold SF
19799 36051 MT
(showpage)SH
/Times-Roman SF
24739 XM
(in)
356 MX(the)SH
/Times-Italic SF
27651 XM
(P)SH
9 SS 
(OST)SH
11 SS 
(S)SH
9 SS 
(CRIPT)SH
11 SS 
33329 XM
(Language)
M-(Reference)
M(Manual)SH
/Times-Roman SF
(.)
M(The)SH
/Times-Bold SF
19799 37348 MT
(#copies)SH
/Times-Roman SF
23747 XM
(convention)
526 MX(now)
M(applies)
M(uniformly)
M(to)
M(both)SH
/Times-Bold SF
44013 XM
(showpage)SH
/Times-Roman SF
19799 38645 MT
(and)SH
/Times-Bold SF
21662 XM
(copypage)SH
/Times-Roman SF
(,)
275 MX(whereas)
M(formerly)
M(it)
M(applied)
M(only)
M(to)SH
/Times-Bold SF
42374 XM
(showpage)SH
/Times-Roman SF
(.)SH
/Helvetica SF
19791 41842 MT
(Other)SH
/Helvetica-Bold SF
22895 XM
(statusdict)SH
/Helvetica SF
28443 XM
(changes)SH
/Times-Roman SF
19791 43794 MT
(The)SH
/Times-Bold SF
22036 XM
(prefeed)SH
/Times-Roman SF
26113 XM
(boolean)
535 MX(in)SH
/Times-Bold SF
31521 XM
(statusdict)SH
/Times-Roman SF
36578 XM
(has)
M-(been)
M(eliminated.)
M(This)SH
19799 45091 MT
(boolean)
519 MX(provided)
M(programmer)
M(control)
M(over)
M(paper)
M+(pre-feeding.)SH
19799 46388 MT
(The)
462 MX(printing)
M(overlap)
M(strategy)
M(in)
M(the)
M(new)
M-(LaserWriter)
M(software)SH
19799 47685 MT
(\050described)
454 MX(above\051)
M(makes)
M(explicit)
M(pre-feeding)
M(unnecessary.)
M(If)
M+(a)SH
19799 48982 MT
(P)SH
9 SS 
(OST)SH
11 SS 
(S)SH
9 SS 
(CRIPT)SH
11 SS 
25663 XM
(program)
390 MX(defines)SH
/Times-Bold SF
33344 XM
(prefeed)SH
/Times-Roman SF
(,)
M-(it)
M(will)
M(have)
M(no)
M(effect)
M(on)SH
19799 50279 MT
(printing)
275 MX(in)
M(the)
M(new)
M(LaserWriter.)SH
19791 52474 MT
(The)SH
/Times-Bold SF
21870 XM
(product)SH
/Times-Roman SF
25967 XM
(string)
369 MX(in)SH
/Times-Bold SF
30067 XM
(statusdict)SH
/Times-Roman SF
34958 XM
(was)
M(formerly)
M+(used)
M(both)
M(as)
M(the)SH
19799 53771 MT
(default)
541 MX(value)
M(of)SH
/Times-Bold SF
27773 XM
(printername)SH
/Times-Roman SF
34239 XM
(and)
M-(as)
M(the)SH
/Times-Italic SF
39707 XM
(type)SH
/Times-Roman SF
42079 XM
(portion)
M(of)
M(the)SH
19799 55068 MT
(LaserWriter's)
314 MX(AppleTalk)
M(name.)
M(These)
M(uses)
M+(have)
M(been)
M(separated:)SH
7 SS 
19799 57437 MT
(5)SH
9 SS 
20149 57764 MT
(Unfortunately,)
348 MX(the)
M(current)SH
/Times-Italic SF
30118 XM
(P)SH
7 SS 
(OST)SH
9 SS 
(S)SH
7 SS 
(CRIPT)SH
9 SS 
34655 XM
(Language)
M(Tutorial)
M(and)
M(Cookbook)SH
/Times-Roman SF
47597 XM
(in-)SH
19799 58662 MT
(cludes)
225 MX(an)
M(example)
M(that)
M(uses)
M(this)
M(technique.)SH
8 SS 
/Helvetica SF
32730 63450 MT
(3)
583 MX(IMPLEMENTATION)
256 MX(CHANGES)SH
10 SS 
47485 XM
(11)SH
ES
%%Page: 12 14 
BS
0 SI
11 SS 
/Times-Roman SF
18899 6155 MT
(the)
485 MX(AppleTalk)SH
/Times-Italic SF
25917 XM
(type)SH
/Times-Roman SF
28234 XM
(is)
M(now)
M(determined)
M(from)
M-(a)
M(new)SH
/Times-Bold SF
43175 XM
(statusdict)SH
/Times-Roman SF
18899 7452 MT
(entry)
292 MX(named)SH
/Times-Bold SF
24675 XM
(appletalktype)SH
/Times-Roman SF
(.)
M(The)
M(default)
M(value)
M(of)
M(this)
M+(entry)
M(is)
M(the)SH
18899 8749 MT
(string)
567 MX(`)SH
10 SS 
/Helvetica SF
(LaserWriter)SH
11 SS 
/Times-Roman SF
(',)
M(independent)
M(of)
M(the)
M+(value)
M(of)SH
/Times-Bold SF
42485 XM
(product)SH
/Times-Roman SF
46781 XM
(or)SH
9 SS 
25100 9683 MT
(6)SH
11 SS 
/Times-Bold SF
18899 10046 MT
(printername)SH
/Times-Roman SF
(.)SH
12 SS 
/Helvetica SF
11692 13914 MT
(4)
875 MX(P)SH

/PSLogo SF
(OST)SH
/Helvetica SF
(S)SH
/PSLogo SF
(CRIPT)SH
/Helvetica SF
21284 XM
(LANGUAGE)
384 MX(CHANGES)SH
11 SS 
/Times-Roman SF
18891 16465 MT
(Several)
443 MX(additions)
M(have)
M(been)
M(made)
M-(to)
M(the)
M(standard)
M(P)SH
9 SS 
(OST)SH
11 SS 
(S)SH
9 SS 
(CRIPT)SH
11 SS 
18899 17762 MT
(language.)
335 MX(These)
M(additions)
M(are)
M+(upward-compatible)
M(and)
M(do)
M(not)
M(af-)SH
18899 19059 MT
(fect)
568 MX(the)
M(function)
M(of)
M-(any)
M(existing)
M(P)SH
9 SS 
(OST)SH
11 SS 
(S)SH
9 SS 
(CRIPT)SH
11 SS 
40991 XM
(programs.)
M(The)SH
18899 20356 MT
(changes)
378 MX(are)
M(included)
M(in)
M(the)
M(new)
M(LaserWriter,)
M(LaserWriter)
M(Plus,)SH
18899 21653 MT
(and)
494 MX(other)
M(P)SH
9 SS 
(OST)SH
11 SS 
(S)SH
9 SS 
(CRIPT)SH
11 SS 
29703 XM
(printers;)
M(they)
M(will)
M(be)
M(documented)
M(in)
M(a)SH
18899 22950 MT
(future)
275 MX(edition)
M(of)
M(the)SH
/Times-Italic SF
27941 XM
(P)SH
9 SS 
(OST)SH
11 SS 
(S)SH
9 SS 
(CRIPT)SH
11 SS 
33538 XM
(Language)
M(Reference)
M(Manual)SH
/Times-Roman SF
(.)SH
18891 25145 MT
(In)
424 MX(general,)
M(P)SH
9 SS 
(OST)SH
11 SS 
(S)SH
9 SS 
(CRIPT)SH
11 SS 
30064 XM
(programs)
M(that)
M(are)
M(intended)
M(to)
M(be)
M+(com-)SH
18899 26442 MT
(patible)
347 MX(with)
M(all)
M(P)SH
9 SS 
(OST)SH
11 SS 
(S)SH
9 SS 
(CRIPT)SH
11 SS 
31811 XM
(printers)
M(should)
M(not)
M-(make)
M(use)
M(of)
M(the)SH
18899 27739 MT
(new)
320 MX(features.)
M(However,)
M(it)
M(is)
M(possible)
M(for)
M+(a)
M(program)
M(to)
M(determine)SH
18899 29036 MT
(whether)
375 MX(or)
M(not)
M(the)
M(new)
M(features)
M(are)
M(present)
M(and)
M-(to)
M(invoke)
M(them)SH
18899 30333 MT
(conditionally.)
365 MX(The)
M(descriptions)
M(below)
M(suggest)
M(how)
M(to)
M(determine)SH
18899 31630 MT
(whether)
275 MX(a)
M(particular)
M(feature)
M(is)
M(present)
M(or)
M(absent.)SH
/Helvetica SF
18891 34827 MT
(Packed)
352 MX(arrays)SH
/Times-Roman SF
18891 36779 MT
(P)SH
9 SS 
(OST)SH
11 SS 
(S)SH
9 SS 
(CRIPT)SH
11 SS 
24998 XM
(procedures)
633 MX(are)
M-(represented)
M(as)
M(executable)
M(arrays)SH
18899 38076 MT
(which,)
329 MX(until)
M(now,)
M+(have)
M(been)
M(stored)
M(in)
M(the)
M(same)
M(fashion)
M(as)
M(literal)SH
18899 39373 MT
(data)
850 MX(arrays.)
M(This)
M-(representation,)
M(while)
M(offering)
M(maximum)SH
18899 40670 MT
(flexibility,)
424 MX(is)
M(very)
M(costly)
M(in)
M(space)
M(\0508)
M(bytes)
M(per)
M(element\051.)
M(Large)SH
18899 41967 MT
(P)SH
9 SS 
(OST)SH
11 SS 
(S)SH
9 SS 
(CRIPT)SH
11 SS 
24796 XM
(programs,)
M-(such)
M(as)
M-(the)
M(built-in)
M(server)
M(program)
M(and)SH
18899 43264 MT
(downloaded)
275 MX(preambles,)
M(consume)
M(considerable)
M(amounts)
M(of)
M(VM.)SH
18891 45459 MT
(Since)
408 MX(most)
M(programs)
M(do)
M(not)
M(require)
M(the)
M(ability)
M(to)
M(be)
M+(treated)
M(as)SH
18899 46756 MT
(data)
389 MX(but)
M(only)
M(the)
M(ability)
M(to)
M-(be)
M(executed,)
M(a)
M(more)
M(compact)
M(repre-)SH
18899 48053 MT
(sentation)
697 MX(has)
M(been)
M(introduced:)
M(the)SH
/Times-Italic SF
36252 XM
(packed)
M+(array)SH
/Times-Roman SF
(.)
M(Programs)SH
18899 49350 MT
(represented)
615 MX(as)
M(packed)
M(arrays)
M(are)
M-(typically)
M(50)
M(to)
M(75)
M(percent)SH
18899 50647 MT
(smaller)
275 MX(than)
M(the)
M(same)
M(programs)
M(represented)
M(as)
M(ordinary)
M(arrays.)SH
18891 52842 MT
(A)
287 MX(packed)
M(array)
M(object)
M(has)
M(a)
M(type)
M(different)
M(from)
M(an)
M(ordinary)
M+(array)SH
18899 54139 MT
(object)
806 MX(\050`)SH
10 SS 
/Helvetica SF
(packedarraytype)SH
11 SS 
/Times-Roman SF
(')
M(versus)
M(`)SH
10 SS 
/Helvetica SF
(arraytype)SH
11 SS 
/Times-Roman SF
('\051;)
M(but)
M(in)
M(most)SH
18899 55436 MT
(respects)
405 MX(it)
M(behaves)
M(the)
M(same)
M(as)
M+(an)
M(ordinary)
M(array.)
M(You)
M(can)
M(ex-)SH
7 SS 
18899 57437 MT
(6)SH
9 SS 
19249 57764 MT
(The)
442 MX(reason)
M(for)
M(this)
M(is)
M(that)
M(the)
M-(Macintosh)
M(Print)
M(Manager)
M(assumes)
M(that)
M(all)SH
18899 58662 MT
(P)SH
7 SS 
(OST)SH
9 SS 
(S)SH
7 SS 
(CRIPT)SH
9 SS 
23430 XM
(printers)
225 MX(are)
M(of)
M(type)
M(`LaserWriter'.)SH
10 SS 
/Helvetica SF
4500 63450 MT
(12)SH
8 SS 
8012 XM
(Update)
256 MX(for)
M(LaserWriter)
M(and)
M(LaserWriter)
M(Plus)
M(\050revision)
M(2\051)SH
ES
%%Page: 13 15 
BS
0 SI
11 SS 
/Times-Roman SF
19799 6155 MT
(ecute)
480 MX(a)
M(packed)
M(array;)
M(you)
M(can)
M(extract)
M(elements)
M(\050using)SH
/Times-Bold SF
45432 XM
(get)SH
/Times-Roman SF
(\051)
M-(or)SH
19799 7452 MT
(subarrays)
710 MX(\050using)SH
/Times-Bold SF
28183 XM
(getinterval)SH
/Times-Roman SF
(\051;)
M(you)
M+(can)
M(enumerate)
M(it)
M(\050using)SH
/Times-Bold SF
19799 8749 MT
(forall)SH
/Times-Roman SF
(\051;)
687 MX(and)
M(so)
M(forth.)
M(Individual)
M(elements)
M-(extracted)
M(from)
M(a)SH
19799 10046 MT
(packed)
420 MX(array)
M(are)
M(ordinary)
M(P)SH
9 SS 
(OST)SH
11 SS 
(S)SH
9 SS 
(CRIPT)SH
11 SS 
37813 XM
(objects;)
M+(a)
M(subarray)
M(of)
M(a)SH
19799 11343 MT
(packed)
275 MX(array)
M(is)
M(also)
M(a)
M(packed)
M(array.)SH
19791 13538 MT
(The)
M(differences)
M(between)
M(packed)
M(arrays)
M(and)
M(ordinary)
M(arrays)
M(are:)SH
/Symbol SF
21418 15815 MT
(\267)SH
/Times-Roman SF
22199 XM
(Packed)
556 MX(arrays)
M-(are)
M(always)
M(read-only:)
M(you)
M(can't)
M(use)SH
/Times-Bold SF
46732 XM
(put)SH
/Times-Roman SF
(,)SH
/Times-Bold SF
22199 17012 MT
(putinterval)SH
/Times-Roman SF
(,)
275 MX(etc.,)
M(to)
M(store)
M(into)
M(one.)SH
/Symbol SF
21418 18808 MT
(\267)SH
/Times-Roman SF
22199 XM
(Packed)
404 MX(arrays)
M(are)
M(created)
M(differently)
M(from)
M(ordinary)
M(arrays)SH
22199 20005 MT
(\050see)
275 MX(below\051.)SH
/Symbol SF
21418 21801 MT
(\267)SH
/Times-Roman SF
22199 XM
(Accessing)
294 MX(arbitrary)
M(elements)
M(of)
M(a)
M(packed)
M-(array)
M(can)
M(be)
M(quite)SH
22199 22998 MT
(slow;)
450 MX(however,)
M(accessing)
M(the)
M(elements)
M+(sequentially)
M(\050as)
M(is)SH
22199 24195 MT
(done)
646 MX(by)
M(the)
M(P)SH
9 SS 
(OST)SH
11 SS 
(S)SH
9 SS 
(CRIPT)SH
11 SS 
34839 XM
(interpreter)
M-(and)
M(by)
M(the)SH
/Times-Bold SF
46031 XM
(forall)SH
/Times-Roman SF
22199 25392 MT
(operator\051)
406 MX(is)
M(approximately)
M(as)
M(efficient)
M(as)
M(accessing)
M+(an)
M(or-)SH
22199 26589 MT
(dinary)
275 MX(array.)SH
/Symbol SF
21418 28385 MT
(\267)SH
/Times-Roman SF
22199 XM
(The)SH
/Times-Bold SF
24204 XM
(copy)SH
/Times-Roman SF
26699 XM
(operator)
295 MX(cannot)
M(copy)
M-(into)
M(a)
M(packed)
M(array)
M(\050since)
M(it)SH
22199 29582 MT
(is)
419 MX(read-only\051;)
M(however,)
M(it)
M+(can)
M(copy)
M(the)
M(value)
M(of)
M(a)
M(packed)SH
22199 30779 MT
(array)
503 MX(to)
M(an)
M(ordinary)
M(array)
M(of)
M(at)
M-(least)
M(the)
M(packed)
M(array's)SH
22199 31976 MT
(length.)SH
19791 34171 MT
(There)
318 MX(are)
M(two)
M(ways)
M(in)
M(which)
M+(packed)
M(arrays)
M(come)
M(into)
M(existence.)SH
19799 35468 MT
(The)
469 MX(first)
M(and)
M(more)
M(common)
M(way)
M(is)
M(for)
M(the)
M(P)SH
9 SS 
(OST)SH
11 SS 
(S)SH
9 SS 
(CRIPT)SH
11 SS 
46335 XM
(input)SH
19799 36765 MT
(scanner)
386 MX(to)
M(create)
M(packed)
M(arrays)
M(automatically)
M(for)
M(all)
M(executable)SH
19799 38062 MT
(arrays)
401 MX(that)
M(it)
M-(reads.)
M(That)
M(is,)
M(whenever)
M(the)
M(scanner)
M(encounters)
M(a)SH
19799 39359 MT
(`)SH
10 SS 
/Helvetica SF
({)SH
11 SS 
/Times-Roman SF
(')
363 MX(while)
M(reading)
M(a)
M(file)
M(or)
M+(string,)
M(it)
M(accumulates)
M(all)
M(tokens)
M(up)
M(to)SH
19799 40656 MT
(the)
306 MX(matching)
M(`)SH
10 SS 
/Helvetica SF
(})SH
11 SS 
/Times-Roman SF
(')
M(and)
M(turns)
M-(them)
M(into)
M(a)
M(packed)
M(array)
M(instead)
M(of)
M(an)SH
19799 41953 MT
(ordinary)
275 MX(array.)SH
19791 44148 MT
(The)
277 MX(choice)
M+(of)
M(array)
M(type)
M(is)
M(controlled)
M(by)
M(a)
M(mode)
M(setting,)
M(manipu-)SH
19799 45445 MT
(lated)
632 MX(by)
M(the)
M(new)
M-(operators)SH
/Times-Bold SF
33463 XM
(setpacking)SH
/Times-Roman SF
39106 XM
(and)SH
/Times-Bold SF
41325 XM
(currentpacking)SH
/Times-Roman SF
19799 46742 MT
(\050described)
360 MX(at)
M(the)
M+(end)
M(of)
M(this)
M(section\051.)
M(If)
M(the)
M(array)
M(packing)
M(mode)SH
19799 48039 MT
(is)SH
/Times-Italic SF
20842 XM
(true)SH
/Times-Roman SF
(,)
308 MX(P)SH
9 SS 
(OST)SH
11 SS 
(S)SH
9 SS 
(CRIPT)SH
11 SS 
28979 XM
(procedures)
M(encountered)
M(subsequently)
M(by)
M(the)SH
19799 49336 MT
(scanner)
635 MX(are)
M(created)
M(as)
M(packed)
M(arrays;)
M+(if)
M(the)
M(mode)
M(is)SH
/Times-Italic SF
46244 XM
(false)SH
/Times-Roman SF
(,)SH
19799 50633 MT
(procedures)
442 MX(are)
M(created)
M(as)
M(ordinary)
M(arrays.)
M(The)
M-(default)
M(value)
M(is)SH
/Times-Italic SF
19799 51930 MT
(false)SH
/Times-Roman SF
22185 XM
(\050i.e.,)
308 MX(create)
M(ordinary)
M(arrays\051,)
M+(for)
M(compatibility)
M(with)
M(existing)SH
19799 53227 MT
(programs.)SH
19791 55422 MT
(The)
304 MX(other)
M(way)
M(to)
M(create)
M(a)
M-(packed)
M(array)
M(is)
M(to)
M(build)
M(it)
M(explicitly)
M(by)SH
19799 56719 MT
(invoking)
332 MX(the)SH
/Times-Bold SF
25719 XM
(packedarray)SH
/Times-Roman SF
32039 XM
(operator)
M(with)
M(a)
M(list)
M(of)
M(operands)
M(to)
M(be)SH
19799 58016 MT
(incorporated)
275 MX(into)
M(a)
M(new)
M(packed)
M(array.)SH
8 SS 
/Helvetica SF
30026 63450 MT
(4)
583 MX(P)SH
/PSLogo SF
(OST)SH
/Helvetica SF
(S)SH
/PSLogo SF
(CRIPT)SH
/Helvetica SF
36424 XM
(LANGUAGE)
256 MX(CHANGES)SH
10 SS 
47485 XM
(13)SH
ES
%%Page: 14 16 
BS
0 SI
11 SS 
/Helvetica SF
18891 6202 MT
(Immediately)
352 MX(evaluated)
M(names)SH
/Times-Roman SF
18891 8154 MT
(The)
315 MX(language)
M(syntax)
M-(has)
M(been)
M(extended)
M(to)
M(include)
M(a)
M(new)
M(kind)
M(of)SH
18899 9451 MT
(name)
339 MX(token,)
M(the)SH
/Times-Italic SF
26361 XM
(immediately)
M(evaluated)
M+(name)SH
/Times-Roman SF
(.)
M(When)
M(the)
M(scanner)SH
18899 10748 MT
(encounters)
384 MX(the)
M(token)
M(`//)SH
/Times-Italic SF
(name)SH
/Times-Roman SF
(')
M-(\050a)
M(name)
M(preceded)
M(by)
M(two)
M(slashes)SH
18899 12045 MT
(with)
304 MX(no)
M(intervening)
M(spaces\051,)
M(it)
M(immediately)
M(looks)
M(up)
M+(the)
M(name)
M(in)SH
18899 13342 MT
(the)
278 MX(context)
M(of)
M(the)
M(current)
M-(dictionary)
M(stack)
M(and)
M(substitutes)
M(the)
M(cor-)SH
18899 14639 MT
(responding)
524 MX(value)
M(for)
M(the)
M(name.)
M(If)
M(the)
M(name)
M+(is)
M(not)
M(found,)
M(an)SH
/Times-Bold SF
18899 15936 MT
(undefined)SH
/Times-Roman SF
23882 XM
(error)
275 MX(occurs.)SH
18891 18131 MT
(The)
M+(substitution)
M-(occurs)SH
/Times-Italic SF
29433 XM
(immediately)SH
/Times-Roman SF
(,)
M(regardless)
M(of)
M(whether)
M(or)
M(not)SH
18899 19428 MT
(the)
362 MX(token)
M(appears)
M(inside)
M(an)
M(executable)
M(array)
M+(delimited)
M(by)
M(`)SH
10 SS 
/Helvetica SF
({...})SH
11 SS 
/Times-Roman SF
('.)SH
18899 20725 MT
(Note)
319 MX(that)
M(this)
M-(process)
M(is)
M(a)
M(substitution)
M(and)
M(not)
M(an)
M(execution;)
M(that)SH
18899 22022 MT
(is,)
371 MX(the)
M(name's)
M(value)
M(is)
M(not)
M(executed)
M(but)
M+(rather)
M(is)
M(substituted)
M(for)SH
18899 23319 MT
(the)
387 MX(name)
M(itself,)
M(just)
M-(as)
M(if)
M(the)SH
/Times-Bold SF
32327 XM
(load)SH
/Times-Roman SF
34731 XM
(operator)
M(had)
M(been)
M(applied)
M(to)SH
18899 24616 MT
(the)
410 MX(name.)
M(This)
M(action)
M(is)
M(related)
M(to)
M+(the)
M(action)
M(performed)
M(by)
M(the)SH
/Times-Bold SF
18899 25913 MT
(bind)SH
/Times-Roman SF
22001 XM
(operator)
960 MX(\050see)
M(the)SH
/Times-Italic SF
31659 XM
(P)SH
9 SS 
(OST)SH
11 SS 
(S)SH
9 SS 
(CRIPT)SH
11 SS 
37941 XM
(Language)
M(Reference)SH
18899 27210 MT
(Manual)SH
/Times-Roman SF
(\051;)
300 MX(but)
M(whereas)SH
/Times-Bold SF
28901 XM
(bind)SH
/Times-Roman SF
31343 XM
(performs)
M(substitution)
M(only)
M(for)
M(names)SH
18899 28507 MT
(whose)
306 MX(values)
M(are)
M(operators,)
M(each)
M(occurrence)
M(of)
M(the)
M(`//)SH
/Times-Italic SF
(name)SH
/Times-Roman SF
(')
M-(syn-)SH
18899 29804 MT
(tax)
393 MX(is)
M(replaced)
M+(by)
M(the)
M(value)
M(associated)
M(with)SH
/Times-Italic SF
39153 XM
(name)SH
/Times-Roman SF
41929 XM
(regardless)
M(of)SH
18899 31101 MT
(the)
275 MX(value's)
M(type.)
M(The)
M(following)
M(examples)
M(illustrate)
M(this:)SH
10 SS 
/Helvetica SF
21123 33327 MT
(/a)
320 MX(3)
M(def)SH
21123 34524 MT
(/b)
M({\050test\051)
M(print})
M(def)SH
21123 35721 MT
(//a)SH
/Symbol SF
22555 XM
(\336)SH
/Helvetica SF
23862 XM
(3)SH
21123 36918 MT
(//b)SH
/Symbol SF
22555 XM
(\336)SH
/Helvetica SF
23862 XM
({\050test\051)
M(print})SH
21123 38115 MT
({//a)
M(//b)
M(a)
M(/b})SH
/Symbol SF
26685 XM
(\336)SH
/Helvetica SF
27992 XM
({3)
M({\050test\051)
M(print})
M(a)
M(/b})SH
11 SS 
/Times-Roman SF
18891 40367 MT
(The)
350 MX(purpose)
M(of)
M(using)
M-(immediately)
M(evaluated)
M(names)
M(is)
M(similar)
M(to)SH
18899 41664 MT
(that)
340 MX(of)
M(using)
M(the)SH
/Times-Bold SF
26554 XM
(bind)SH
/Times-Roman SF
29037 XM
(operator:)
M+(to)
M(cause)
M(names)
M(in)
M(procedures)
M(to)SH
18899 42961 MT
(become)
321 MX(`tightly)
M(bound')
M(to)
M(their)
M-(values.)
M(However,)
M(a)
M(word)
M(of)
M(cau-)SH
18899 44258 MT
(tion)
560 MX(is)
M(in)
M(order:)
M(indiscriminate)
M(use)
M(of)
M(immediately)
M(evaluated)SH
18899 45555 MT
(names)
499 MX(may)
M(change)
M(the)
M(semantics)
M(of)
M(a)
M-(program.)
M(In)
M(particular,)SH
18899 46852 MT
(recall)
508 MX(that)
M(when)
M(the)
M(interpreter)
M(encounters)
M(a)
M(procedure)
M(object)SH
/Times-Italic SF
18899 48149 MT
(directly)SH
/Times-Roman SF
22739 XM
(it)
480 MX(simply)
M(pushes)
M-(it)
M(on)
M(the)
M(operand)
M(stack;)
M(but)
M(when)
M(it)SH
18899 49446 MT
(encounters)
471 MX(a)
M(procedure)
M(object)SH
/Times-Italic SF
33119 XM
(indirectly)SH
/Times-Roman SF
37806 XM
(by)
M(looking)
M+(up)
M(an)
M(ex-)SH
18899 50743 MT
(ecutable)
410 MX(name)
M(it)
M(executes)
M-(the)
M(procedure)
M(\050see)
M(section)
M(3.6)
M(of)
M(the)SH
/Times-Italic SF
18899 52040 MT
(P)SH
9 SS 
(OST)SH
11 SS 
(S)SH
9 SS 
(CRIPT)SH
11 SS 
24567 XM
(Language)
346 MX(Reference)
M(Manual)SH
/Times-Roman SF
(\051.)
M+(Therefore,)
M(execution)SH
18899 53337 MT
(of)
275 MX(the)
M(program)
M(fragments:)SH
10 SS 
/Helvetica SF
21123 55563 MT
({...)
320 MX(b)
M(...})SH
21123 56760 MT
({...)
M(//b)
M(...})SH
4500 63450 MT
(14)SH
8 SS 
8012 XM
(Update)
256 MX(for)
M(LaserWriter)
M(and)
M(LaserWriter)
M(Plus)
M(\050revision)
M(2\051)SH
ES
%%Page: 15 17 
BS
0 SI
11 SS 
/Times-Roman SF
19799 6155 MT
(may)
289 MX(have)
M(different)
M(effects)
M(if)
M(the)
M(value)
M(of)
M(the)
M(name)
M(`)SH
10 SS 
/Helvetica SF
(b)SH
11 SS 
/Times-Roman SF
(')
M-(is)
M(a)
M(proce-)SH
19799 7452 MT
(dure.)SH
19791 9647 MT
(The)
472 MX(immediately)
M(evaluated)
M(name)
M(facility)
M(is)
M(present)
M(in)
M(all)
M(ver-)SH
19799 10944 MT
(sions)
690 MX(of)
M(the)
M(P)SH
9 SS 
(OST)SH
11 SS 
(S)SH
9 SS 
(CRIPT)SH
11 SS 
32555 XM
(interpreter)
M(since)
M-(version)
M(25.0)
M(\050as)SH
19799 12241 MT
(reported)
407 MX(by)
M(the)SH
/Times-Bold SF
27128 XM
(version)SH
/Times-Roman SF
30957 XM
(operator\051.)
M(Earlier)
M(versions)
M(of)
M(the)
M(inter-)SH
19799 13538 MT
(preter)
283 MX(will)
M(scan)
M(`//)SH
/Times-Italic SF
(name)SH
/Times-Roman SF
(')
M(as)
M(two)
M(distinct)
M(tokens:)
M-(`/',)
M(a)
M(literal)
M(name)SH
19799 14835 MT
(with)
500 MX(no)
M(text)
M+(at)
M(all,)
M(and)
M(`/)SH
/Times-Italic SF
(name)SH
/Times-Roman SF
(',)
M(a)
M(literal)
M(name)
M(whose)
M(text)
M(is)SH
/Times-Italic SF
19799 16132 MT
(name)SH
/Times-Roman SF
(.)SH
/Helvetica SF
19791 19329 MT
(Font)
352 MX(cache)
M(operation)SH
/Times-Roman SF
19791 21281 MT
(Operation)
490 MX(of)
M(the)
M(font)
M-(cache)
M(has)
M(changed)
M(somewhat.)
M(Formerly)SH
19799 22578 MT
(there)
424 MX(was)
M(a)
M(single)
M(limit)
M(on)
M(the)
M+(number)
M(of)
M(bytes)
M(occupied)
M(by)
M(a)SH
19799 23875 MT
(character)
359 MX(in)
M(the)
M(cache;)
M(a)
M(character)
M(larger)
M-(than)
M(that)
M(would)
M(not)
M(be)SH
19799 25172 MT
(cached.)
341 MX(Now)
M(there)
M+(are)
M(two)
M(cache)
M(thresholds,)
M(a)
M(lower)
M(and)
M(an)
M(up-)SH
19799 26469 MT
(per)
276 MX(one.)
M(If)
M(a)
M-(character)
M(is)
M(larger)
M(than)
M(the)
M(upper)
M(threshold)
M(\050as)
M(deter-)SH
19799 27766 MT
(mined)
351 MX(by)
M+(the)
M(bounding)
M(box)
M(specified)
M(to)SH
/Times-Bold SF
38088 XM
(setcachedevice)SH
/Times-Roman SF
(\051,)
M(it)
M(will)SH
19799 29063 MT
(not)
390 MX(be)
M(cached;)
M(otherwise)
M(it)
M(will)
M(be.)
M(If)
M(it)
M(is)
M(cached)
M-(and)
M(is)
M(larger)SH
19799 30360 MT
(than)
322 MX(the)
M(lower)
M(threshold,)
M+(it)
M(will)
M(be)SH
/Times-Italic SF
35530 XM
(compressed)SH
/Times-Roman SF
(;)
M(otherwise)
M(it)
M(will)SH
19799 31657 MT
(be)
275 MX(stored)
M(as)
M(a)
M(full)
M(pixel)
M(array.)SH
19791 33852 MT
(The)
722 MX(two)
M(thresholds)
M(are)
M(manipulated)
M(by)
M(the)
M(new)
M(operators)SH
/Times-Bold SF
19799 35149 MT
(setcacheparams)SH
/Times-Roman SF
27899 XM
(and)SH
/Times-Bold SF
30135 XM
(currentcacheparams)SH
/Times-Roman SF
(,)
649 MX(described)
M(below.)SH
19799 36446 MT
(The)
534 MX(old)
M(operators,)
M(principally)SH
/Times-Bold SF
34184 XM
(cachestatus)SH
/Times-Roman SF
40093 XM
(and)SH
/Times-Bold SF
42214 XM
(setcachelimit)SH
/Times-Roman SF
(,)SH
19799 37743 MT
(remain)
329 MX(valid.)
M(It)
M(is)
M(a)
M(rare)
M+(P)SH
9 SS 
(OST)SH
11 SS 
(S)SH
9 SS 
(CRIPT)SH
11 SS 
36709 XM
(program)
M(that)
M(needs)
M(to)
M(deal)SH
19799 39040 MT
(with)
275 MX(these)
M(operators.)SH
19791 41235 MT
(Compressed)
562 MX(characters)
M(consume)
M(much)
M(less)
M(space)
M(in)
M-(the)
M(font)SH
19799 42532 MT
(cache)
366 MX(than)
M(full)
M(pixel)
M(arrays)
M(\050by)
M(factors)
M(of)
M+(up)
M(to)
M(40\051,)
M(but)
M(require)SH
19799 43829 MT
(more)
864 MX(computation)
M(to)
M-(reconstitute)
M(when)
M(they)
M(are)
M(needed.)SH
19799 45126 MT
(Reconstituting)
326 MX(a)
M(compressed)
M(character)
M(is)
M(still)
M(substantially)
M(faster)SH
19799 46423 MT
(than)
436 MX(re-executing)
M(the)
M(original)
M(character)
M(description.)
M(In)
M-(systems)SH
19799 47720 MT
(printing)
945 MX(at)
M(300)
M+(pixels)
M(per)
M(inch)
M(or)
M(less)
M(\050including)
M(the)SH
19799 49017 MT
(LaserWriter\051,)
313 MX(the)
M-(default)
M(lower)
M(threshold)
M(is)
M(set)
M(so)
M(that)
M(characters)SH
19799 50314 MT
(up)
353 MX(to)
M(about)
M(20)
M(points)
M(are)
M(stored)
M(as)
M(full)
M+(pixel)
M(arrays)
M(while)
M(larger)SH
19799 51611 MT
(ones)
394 MX(are)
M(stored)
M-(in)
M(compressed)
M(form.)
M(This)
M(causes)
M(ordinary)
M(body)SH
19799 52908 MT
(text)
387 MX(to)
M(be)
M+(cached)
M(using)
M(the)
M(time-efficient)
M(full)
M(pixel)
M(array)
M(repre-)SH
19799 54205 MT
(sentation)
588 MX(but)
M-(large)
M(characters)
M(to)
M(be)
M(cached)
M(using)
M(the)
M(space-)SH
19799 55502 MT
(efficient)
275 MX(compressed)
M(representation.)SH
8 SS 
/Helvetica SF
30026 63450 MT
(4)
583 MX(P)SH
/PSLogo SF
(OST)SH
/Helvetica SF
(S)SH
/PSLogo SF
(CRIPT)SH
/Helvetica SF
36424 XM
(LANGUAGE)
256 MX(CHANGES)SH
10 SS 
47485 XM
(15)SH
ES
%%Page: 16 18 
BS
0 SI
11 SS 
/Helvetica SF
18891 6202 MT
(Operators)SH
10 SS 
/Helvetica-Bold SF
12475 9525 MT
(setpacking)SH
9 SS 
/Helvetica SF
18899 XM
(bool)SH
/Helvetica-Bold SF
21175 XM
(setpacking)SH

/Helvetica SF
26451 XM
(\261)SH
10 SS 
/Times-Roman SF
18899 11408 MT
(sets)
302 MX(the)
M+(array)
M(packing)
M(mode)
M(to)
M(the)
M(specified)
M(boolean)
M(value.)
M(This)
M(deter-)SH
18899 12605 MT
(mines)
621 MX(the)
M(type)
M-(of)
M(executable)
M(arrays)
M(subsequently)
M(created)
M(by)
M(the)SH
18899 13802 MT
(P)SH
8 SS 
(OST)SH
10 SS 
(S)SH
8 SS 
(CRIPT)SH
10 SS 
24068 XM
(scanner.)
277 MX(The)
M(value)SH
/Times-Italic SF
31924 XM
(true)SH
/Times-Roman SF
33812 XM
(selects)
M(packed)
M+(arrays;)SH
/Times-Italic SF
42864 XM
(false)SH
/Times-Roman SF
45031 XM
(selects)SH
18899 14999 MT
(ordinary)
250 MX(arrays.)SH
18899 16994 MT
(The)
311 MX(packing)
M(mode)
M(affects)
M(only)
M(the)
M(creation)
M(of)
M-(procedures)
M(by)
M(the)
M(scan-)SH
18899 18191 MT
(ner)
427 MX(when)
M(it)
M(encounters)
M(program)
M(text)
M+(bracketed)
M(by)
M(`)SH
9 SS 
/Helvetica SF
({)SH
10 SS 
/Times-Roman SF
(')
M(and)
M(`)SH
9 SS 
/Helvetica SF
(})SH
10 SS 
/Times-Roman SF
(')
M(during)SH
18899 19388 MT
(interpretation)
314 MX(of)
M(an)
M(executable)
M(file)
M(or)
M(string)
M(object)
M-(or)
M(during)
M(execution)SH
18899 20585 MT
(of)
286 MX(the)SH
/Times-Bold SF
21526 XM
(token)SH
/Times-Roman SF
24201 XM
(operator.)
M(It)
M(does)
M(not)
M(affect)
M(the)
M(creation)
M+(of)
M(literal)
M(arrays)
M(by)SH
18899 21782 MT
(the)
250 MX(`)SH
9 SS 
/Helvetica SF
([)SH
10 SS 
/Times-Roman SF
(')
M(and)
M(`)SH
9 SS 
/Helvetica SF
(])SH
10 SS 
/Times-Roman SF
(')
M(operators)
M(or)
M(by)
M(the)SH
/Times-Bold SF
32173 XM
(array)SH
/Times-Roman SF
34811 XM
(operator.)SH
18899 23777 MT
(The)
306 MX(array)
M(packing)
M(mode)
M-(persists)
M(until)
M(overridden)
M(by)
M(another)
M(execution)SH
18899 24974 MT
(of)SH
/Times-Bold SF
19982 XM
(setpacking)SH
/Times-Roman SF
24788 XM
(or)
250 MX(until)
M(undone)
M(by)
M(a)SH
/Times-Bold SF
33093 XM
(restore)SH
/Times-Roman SF
(.)SH
8 SS 
/Helvetica SF
18899 26927 MT
(EXAMPLE)SH
9 SS 
(:)SH
21299 28025 MT
(systemdict)
288 MX(/setpacking)
M(known)SH
22163 29123 MT
({/savepacking)
M(currentpacking)
M(def)SH
22451 30221 MT
(true)
M(setpacking)SH
22163 31319 MT
(})
M(if)SH
21299 33515 MT
(...)
M(arbitrary)
M(procedure)
M(definitions)
M(...)SH
21299 35711 MT
(systemdict)
M(/setpacking)
M(known)
M({savepacking)
M(setpacking})
M(if)SH
10 SS 
/Times-Roman SF
18899 37594 MT
(If)
344 MX(the)
M(packed)
M(array)
M(facility)
M+(is)
M(available,)
M(the)
M(procedures)
M(represented)
M(by)SH
18899 38791 MT
(`arbitrary)
428 MX(procedure)
M(definitions')
M(are)
M-(defined)
M(as)
M(packed)
M(arrays;)
M(other-)SH
18899 39988 MT
(wise)
429 MX(they)
M(are)
M(defined)
M(as)
M(ordinary)
M(arrays.)
M(This)
M(example)
M+(is)
M(careful)
M(to)SH
18899 41185 MT
(preserve)
250 MX(the)
M(array)
M(packing)
M(mode)
M(in)
M(effect)
M(before)
M(its)
M(execution.)SH
8 SS 
/Helvetica SF
18899 43068 MT
(ERRORS)SH
10 SS 
/Times-Roman SF
(:)SH
/Times-Bold SF
18899 44265 MT
(stackunderflow,)
M(typecheck)SH
/Helvetica-Bold SF
10475 47588 MT
(currentpacking)SH
9 SS 
/Helvetica SF
18899 XM
(\261)SH
/Helvetica-Bold SF
19975 XM
(currentpacking)SH
/Helvetica SF
27051 XM
(bool)SH
10 SS 
/Times-Roman SF
18899 49471 MT
(returns)
M(the)
M(array)
M(packing)
M(mode)
M(currently)
M(in)
M(effect.)SH
8 SS 
/Helvetica SF
18899 51354 MT
(STANDARD)
256 MX(VALUE)SH
10 SS 
/Times-Roman SF
(:)
686 MX(false)SH
8 SS 
/Helvetica SF
18899 53237 MT
(ERRORS)SH
10 SS 
/Times-Roman SF
(:)SH
/Times-Bold SF
18899 54434 MT
(stackoverflow)SH
/Helvetica SF
4500 63450 MT
(16)SH
8 SS 
8012 XM
(Update)
256 MX(for)
M(LaserWriter)
M(and)
M(LaserWriter)
M(Plus)
M(\050revision)
M(2\051)SH
ES
%%Page: 17 19 
BS
0 SI
10 SS 
/Helvetica-Bold SF
12707 6129 MT
(packedarray)SH
9 SS 
/Helvetica SF
19799 XM
(any)SH
21926 XM
(...)
288 MX(any)SH
25864 XM
(n)SH
/Helvetica-Bold SF
26940 XM
(packedarray)SH
/Helvetica SF
32816 XM
(packedarray)SH
7 SS 
21249 6461 MT
(0)SH
24414 XM
(n)SH
/Symbol SF
(-)SH
/Helvetica SF
(1)SH
10 SS 
/Times-Roman SF
19799 8012 MT
(creates)
391 MX(a)
M(packed)
M(array)
M(object)
M-(of)
M(length)SH
/Times-Italic SF
36416 XM
(n)SH
/Times-Roman SF
37306 XM
(containing)
M(the)
M(objects)SH
/Times-Italic SF
46753 XM
(any)SH
8 SS 
/Times-Roman SF
48197 8357 MT
(0)SH
10 SS 
19799 9218 MT
(through)SH
/Times-Italic SF
23518 XM
(any)SH
/Times-Roman SF
26809 XM
(as)
608 MX(elements.)SH
/Times-Bold SF
32663 XM
(packedarray)SH
/Times-Roman SF
38716 XM
(first)
M+(removes)
M(the)
M(non-)SH
8 SS 
/Times-Italic SF
24962 9563 MT
(n)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1)SH
10 SS 
19799 10424 MT
(negative)
288 MX(integer)SH
/Times-Italic SF
26540 XM
(n)SH
/Times-Roman SF
27328 XM
(from)
M(the)
M(operand)
M(stack.)
M(It)
M(then)
M-(removes)
M(that)
M(number)SH
19799 11621 MT
(of)
411 MX(objects)
M(from)
M(the)
M(operand)
M(stack,)
M(creates)
M(a)
M(packed)
M+(array)
M(containing)SH
19799 12818 MT
(those)
284 MX(objects)
M-(as)
M(elements,)
M(and)
M(finally)
M(pushes)
M(the)
M(resulting)
M(packed)
M(array)SH
19799 14015 MT
(object)
250 MX(on)
M(the)
M(operand)
M(stack.)SH
19799 16010 MT
(The)
304 MX(resulting)
M(object)
M(has)
M(a)
M(type)
M(of)
M(`)SH
9 SS 
/Helvetica SF
(packedarraytype)SH
10 SS 
/Times-Roman SF
(',)
M(a)
M(literal)
M+(attribute,)SH
19799 17207 MT
(and)
366 MX(read-only)
M(access.)
M(In)
M(all)
M(other)
M(respects,)
M(its)
M(behavior)
M(is)
M(identical)
M(to)SH
19799 18404 MT
(that)
250 MX(of)
M(an)
M(ordinary)
M(array)
M(object.)SH
8 SS 
/Helvetica SF
19799 20287 MT
(STANDARD)
256 MX(VALUE)SH
10 SS 
/Times-Roman SF
(:)
686 MX(false)SH
8 SS 
/Helvetica SF
19799 22170 MT
(ERRORS)SH
10 SS 
/Times-Roman SF
(:)SH
/Times-Bold SF
19799 23367 MT
(rangecheck,)
250 MX(stackunderflow,)
M(typecheck,)
M(VMerror)SH
8 SS 
/Helvetica SF
30026 63450 MT
(4)
583 MX(P)SH
/PSLogo SF
(OST)SH
/Helvetica SF
(S)SH
/PSLogo SF
(CRIPT)SH
/Helvetica SF
36424 XM
(LANGUAGE)
256 MX(CHANGES)SH
10 SS 
47485 XM
(17)SH
ES
%%Page: 18 20 
BS
0 SI
10 SS 
/Helvetica-Bold SF
9862 6129 MT
(setcacheparams)SH
9 SS 
/Helvetica SF
18899 XM
(mark)
288 MX(lower)
M(upper)SH
/Helvetica-Bold SF
26501 XM
(setcacheparams)SH
/Helvetica SF
34127 XM
(\261)SH
10 SS 
/Times-Roman SF
18899 8012 MT
(sets)
475 MX(cache)
M(parameters)
M(as)
M(specified)
M(by)
M(the)
M(integer)
M(objects)
M(above)
M(the)SH
18899 9209 MT
(topmost)
414 MX(mark)
M(on)
M(the)
M(stack,)
M(then)
M(removes)
M(all)
M(operands)
M(and)
M-(the)
M(mark)SH
18899 10406 MT
(object)
250 MX(as)
M(if)
M(by)SH
/Times-Bold SF
24787 XM
(cleartomark)SH
/Times-Roman SF
(.)SH
8 SS 
37905 12056 MT
(7)SH
10 SS 
18899 12401 MT
(The)
461 MX(number)
M(of)
M-(cache)
M(parameters)
M(is)
M(variable.)SH
38765 XM
(If)
M(more)
M(operands)
M(are)SH
18899 13598 MT
(supplied)
481 MX(to)SH
/Times-Bold SF
24028 XM
(setcacheparams)SH
/Times-Roman SF
31285 XM
(than)
M(are)
M(needed,)
M(the)
M(topmost)
M+(ones)
M(are)SH
18899 14795 MT
(used)
309 MX(and)
M(the)
M-(remainder)
M(ignored;)
M(if)
M(fewer)
M(are)
M(supplied)
M(than)
M(are)
M(needed,)SH
/Times-Bold SF
18899 15992 MT
(setcacheparams)SH
/Times-Roman SF
25942 XM
(implicitly)
267 MX(inserts)
M(default)
M(values)
M(between)
M(the)
M(mark)
M(and)SH
18899 17189 MT
(the)
250 MX(first)
M(supplied)
M(operand.)SH
18899 19184 MT
(The)SH
/Times-Italic SF
20824 XM
(upper)SH
/Times-Roman SF
23526 XM
(operand)
369 MX(specifies)
M(the)
M(maximum)
M(number)
M(of)
M(bytes)
M(that)
M(may)SH
18899 20381 MT
(be)
M+(occupied)
M(by)
M(the)
M(pixel)
M(array)
M+(of)
M(a)
M(single)
M(cached)
M(character,)
M(as)
M(deter-)SH
18899 21578 MT
(mined)
320 MX(from)
M(the)
M-(information)
M(presented)
M(by)
M(the)SH
/Times-Bold SF
37576 XM
(setcachedevice)SH
/Times-Roman SF
44115 XM
(operator.)SH
18899 22775 MT
(This)
326 MX(is)
M(the)
M(same)
M(parameter)
M(as)
M(is)
M(set)
M(by)SH
/Times-Bold SF
35164 XM
(setcachelimit)SH
/Times-Roman SF
(;)
M+(see)
M(the)
M(descrip-)SH
18899 23972 MT
(tion)
250 MX(of)
M(that)
M(operator)
M(in)
M(the)SH
/Times-Italic SF
29620 XM
(P)SH
8 SS 
(OST)SH
10 SS 
(S)SH
8 SS 
(CRIPT)SH
10 SS 
34627 XM
(Language)
M(Reference)
M(Manual)SH
/Times-Roman SF
(.)SH
18899 25967 MT
(The)SH
/Times-Italic SF
20995 XM
(lower)SH
/Times-Roman SF
23813 XM
(operand)
540 MX(specifies)
M(the)
M(threshold)
M(at)
M(which)
M(characters)
M(are)SH
18899 27164 MT
(stored)
621 MX(in)
M(compressed)
M(form)
M(rather)
M(than)
M(as)
M(full)
M(pixel)
M(arrays.)
M(If)
M+(a)SH
18899 28361 MT
(character's)
373 MX(pixel)
M(array)
M-(requires)
M(more)
M(than)SH
/Times-Italic SF
36571 XM
(lower)SH
/Times-Roman SF
39221 XM
(bytes)
M(to)
M(represent,)
M(it)SH
18899 29558 MT
(will)
280 MX(be)
M(compressed)
M(in)
M(the)
M(cache)
M(and)
M+(reconstituted)
M(from)
M(the)
M(compressed)SH
18899 30755 MT
(representation)
250 MX(each)
M(time)
M(it)
M(is)
M(needed.)SH
18899 32750 MT
(Setting)SH
/Times-Italic SF
22017 XM
(lower)SH
/Times-Roman SF
24578 XM
(to)
283 MX(zero)
M(forces)
M(all)
M(characters)
M(to)
M(be)
M(compressed,)
M(permitting)SH
18899 33947 MT
(more)
372 MX(characters)
M(to)
M(be)
M+(stored)
M(in)
M(the)
M(cache)
M(but)
M(increasing)
M(the)
M(work)
M(re-)SH
18899 35144 MT
(quired)
351 MX(to)
M-(print)
M(them.)
M(Setting)SH
/Times-Italic SF
30956 XM
(lower)SH
/Times-Roman SF
33584 XM
(to)
M(a)
M(value)
M(greater)
M(than)
M(or)
M(equal)
M(to)SH
/Times-Italic SF
18899 36341 MT
(upper)SH
/Times-Roman SF
21482 XM
(disables)
250 MX(compression)
M(altogether.)SH
8 SS 
/Helvetica SF
18899 38224 MT
(ERRORS)SH
10 SS 
/Times-Roman SF
(:)SH
/Times-Bold SF
18899 39421 MT
(rangecheck,)
M(unmatchedmark)SH
/Helvetica-Bold SF
7862 42744 MT
(currentcacheparams)SH
9 SS 
/Helvetica SF
18899 XM
(\261)SH
/Helvetica-Bold SF
19975 XM
(currentcacheparams)SH
/Helvetica SF
29401 XM
(mark)
288 MX(lower)
M(upper)SH
10 SS 
/Times-Roman SF
18899 44627 MT
(pushes)
330 MX(a)
M(mark)
M+(object)
M(followed)
M(by)
M(the)
M(current)
M(cache)
M(parameters)
M(on)
M(the)SH
18899 45824 MT
(operand)
439 MX(stack.)
M(The)
M(number)
M(of)
M-(cache)
M(parameters)
M(returned)
M(is)
M(variable)SH
18899 47021 MT
(\050see)SH
/Times-Bold SF
20759 XM
(setcacheparams)SH
/Times-Roman SF
(\051.)SH
8 SS 
/Helvetica SF
18899 48904 MT
(STANDARD)
256 MX(VALUE)SH
10 SS 
/Times-Roman SF
(:)
686 MX(mark)
250 MX(1250)
M(12500)SH
8 SS 
/Helvetica SF
18899 50787 MT
(ERRORS)SH
10 SS 
/Times-Roman SF
(:)SH
/Times-Bold SF
18899 51984 MT
(stackoverflow)SH
7 SS 
/Times-Roman SF
18899 57437 MT
(7)SH
9 SS 
19249 57764 MT
(In)
307 MX(future)
M(versions)
M(of)
M(the)
M+(P)SH
7 SS 
(OST)SH
9 SS 
(S)SH
7 SS 
(CRIPT)SH
9 SS 
33149 XM
(interpreter)
M(there)
M(may)
M(be)
M(more)
M(than)
M(two)SH
18899 58662 MT
(cache)
225 MX(parameters)
M(defined.)SH
10 SS 
/Helvetica SF
4500 63450 MT
(18)SH
8 SS 
8012 XM
(Update)
256 MX(for)
M(LaserWriter)
M(and)
M(LaserWriter)
M(Plus)
M(\050revision)
M(2\051)SH
ES
%%Page: 19 21 
BS
0 SI
1 SS 
0 5400 5405 PB %!
% contents box/fountain
gsave 0 -3 pica translate  0 0 36 pica 3 pica fountain
1 setlinewidth -.25 0 moveto 36 pica .5 add 0 rlineto stroke
-.25 3 pica moveto 36 pica .5 add 0 rlineto stroke
.5 setlinewidth 0 -.5 moveto 0 3 pica 1 add rlineto stroke
36 pica -.5 moveto 0 3 pica 1 add rlineto stroke grestore

 PE 24 SS 
/Helvetica SF
41528 8229 MT
(Index)SH
9 SS 
/Times-Bold SF
6600 14985 MT
(#copies)SH
/Times-Roman SF
10075 XM
(11)SH
/Times-Bold SF
28198 XM
(forall)SH
/Times-Roman SF
30973 XM
(13)SH
6600 17279 MT
(//)
225 MX(immediately)
M(evaluated)
M(name)
M(syntax)
675 MX(14)SH
/Times-Bold SF
28198 XM
(get)SH
/Times-Roman SF
30023 XM
(12)SH
6600 18426 MT
([])
225 MX(array)
M(syntax)
675 MX(16)SH
/Times-Bold SF
28198 XM
(getinterval)SH
/Times-Roman SF
33023 XM
(13)SH
6600 19573 MT
({})
225 MX(procedure)
M(syntax)
675 MX(13,)
225 MX(16)SH
28198 20720 MT
(IBM)
M(PC)
675 MX(4)SH
/Times-Bold SF
6600 21867 MT
(a4)SH
/Times-Roman SF
8175 XM
(5)SH
28198 XM
(Idle-time)
225 MX(scan)
M(conversion)
675 MX(6)SH
/Times-Bold SF
6600 23014 MT
(a4small)SH
/Times-Roman SF
10225 XM
(5,)
225 MX(6)SH
/Times-Bold SF
28198 XM
(image)SH
/Times-Roman SF
31173 XM
(10)SH
6600 24161 MT
(AppleTalk)
675 MX(8,)
225 MX(9,)
M(11)SH
28198 XM
(Immediately)
M(evaluated)
M(name)
675 MX(14)SH
/Times-Bold SF
6600 25308 MT
(appletalktype)SH
/Times-Roman SF
12525 XM
(12)SH
/Times-Bold SF
28198 XM
(initgraphics)SH
/Times-Roman SF
33473 XM
(11)SH
/Times-Bold SF
6600 26455 MT
(array)SH
/Times-Roman SF
9425 XM
(16)SH
/Times-Bold SF
28198 XM
(ioerror)SH
/Times-Roman SF
31623 XM
(3,)
225 MX(4)SH
6600 27602 MT
(Array)
675 MX(12,)
225 MX(16)SH
/Times-Bold SF
28198 28749 MT
(legal)SH
/Times-Roman SF
30673 XM
(5,)
M(6)SH
/Times-Bold SF
6600 29896 MT
(b5)SH
/Times-Roman SF
8225 XM
(5,)
M(6)SH
/Times-Bold SF
28198 XM
(letter)SH
/Times-Roman SF
30923 XM
(5)SH
6600 31043 MT
(Baud)
M(rate)
675 MX(2)SH
/Times-Bold SF
28198 XM
(lettersmall)SH
/Times-Roman SF
32973 XM
(5,)
225 MX(6)SH
/Times-Bold SF
6600 32190 MT
(bind)SH
/Times-Roman SF
9025 XM
(14)SH
/Times-Bold SF
28198 XM
(load)SH
/Times-Roman SF
30523 XM
(14)SH
/Times-Bold SF
6600 33337 MT
(BuildChar)SH
/Times-Roman SF
11375 XM
(8)SH
/Times-Bold SF
28198 34484 MT
(manualfeed)SH
/Times-Roman SF
33373 XM
(8)SH
6600 35631 MT
(Cache)SH
8284 36778 MT
(See)
675 MX(Font)
225 MX(cache)SH
28198 XM
(Name)
675 MX(14)SH
/Times-Bold SF
6600 37925 MT
(cachestatus)SH
/Times-Roman SF
11675 XM
(15)SH
/Times-Bold SF
28198 XM
(note)SH
/Times-Roman SF
30523 XM
(5,)
225 MX(6)SH
/Times-Bold SF
6600 39072 MT
(cleartomark)SH
/Times-Roman SF
12025 XM
(17)SH
6600 40219 MT
(Communication)
675 MX(2)SH
28198 XM
(Output)
225 MX(operator)
675 MX(10)SH
6600 41366 MT
(Compressed)
225 MX(character)
675 MX(15,)
225 MX(17)SH
/Times-Bold SF
6600 42513 MT
(copy)SH
/Times-Roman SF
9075 XM
(13)SH
28198 XM
(Packed)
M(array)
675 MX(10,)
225 MX(12,)
M(16)SH
/Times-Bold SF
6600 43660 MT
(copypage)SH
/Times-Roman SF
10875 XM
(10,)
M(11)SH
/Times-Bold SF
28198 XM
(packedarray)SH
/Times-Roman SF
33773 XM
(13,)SH
/Times-Bold SF
35123 XM
(17)SH
6600 44807 MT
(currentcacheparams)SH
/Times-Roman SF
15225 XM
(15,)SH
/Times-Bold SF
16575 XM
(18)SH
/Times-Roman SF
28198 XM
(Page)
M(types)
675 MX(5)SH
/Times-Bold SF
6600 45954 MT
(currentpacking)SH
/Times-Roman SF
13225 XM
(13,)SH
/Times-Bold SF
14575 XM
(16)SH
28198 XM
(pagetype)SH
/Times-Roman SF
32323 XM
(6)SH
28198 47101 MT
(P)SH
7 SS 
(OST)SH
9 SS 
(S)SH
7 SS 
(CRIPT)SH
9 SS 
32729 XM
(language)
225 MX(changes)
675 MX(12)SH
6600 48248 MT
(Data)
225 MX(Terminal)
M(Ready)
M(\050DTR\051)
M(signal)
675 MX(4)SH
28198 XM
(P)SH
7 SS 
(OST)SH
9 SS 
(S)SH
7 SS 
(CRIPT)SH
9 SS 
32729 XM
(scanner)
M(13)SH
6600 49395 MT
(Diablo)
225 MX(630)
M(emulation)
675 MX(5)SH
/Times-Bold SF
28198 XM
(prefeed)SH
/Times-Roman SF
31773 XM
(11)SH
7 SS 
6600 50542 MT
(DTR)SH
9 SS 
8225 XM
(flow)
225 MX(control)
675 MX(2,)
225 MX(3,)
M(4)SH
/Times-Bold SF
28198 XM
(printername)SH
/Times-Roman SF
33723 XM
(11)SH
28198 51689 MT
(Procedure)
675 MX(12,)
225 MX(16)SH
6600 52836 MT
(Encoding)
M(vector)
675 MX(7)SH
/Times-Bold SF
28198 XM
(product)SH
/Times-Roman SF
31923 XM
(1,)
225 MX(11)SH
/Times-Bold SF
6600 53983 MT
(erasepage)SH
/Times-Roman SF
11075 XM
(11)SH
/Times-Bold SF
28198 XM
(put)SH
/Times-Roman SF
30173 XM
(13)SH
6600 55130 MT
(Executable)
M(array)
675 MX(12)SH
/Times-Bold SF
28198 XM
(putinterval)SH
/Times-Roman SF
33173 XM
(13)SH
6600 56277 MT
(Execution)
225 MX(time)
675 MX(9)SH
/Times-Bold SF
28198 57424 MT
(readline)SH
/Times-Roman SF
32023 XM
(8)SH
6600 58571 MT
(Font)
M(6)SH
/Times-Bold SF
28198 XM
(revision)SH
/Times-Roman SF
31923 XM
(1)SH
6600 59718 MT
(Font)
225 MX(cache)
675 MX(9,)
225 MX(15,)
M(17)SH
28198 XM
(RS-232)
675 MX(4)SH
/Times-Bold SF
6600 60865 MT
(FontDirectory)SH
/Times-Roman SF
12775 XM
(1)SH
10 SS 
/Helvetica SF
47485 63450 MT
(19)SH
ES
%%Page: 20 22 
BS
0 SI
9 SS 
/Times-Roman SF
5700 6017 MT
(Scanner)
675 MX(13)SH
5700 7164 MT
(Serial)
225 MX(I/O)
675 MX(2)SH
/Times-Bold SF
5700 8311 MT
(setcachedevice)SH
/Times-Roman SF
11975 XM
(15,)
225 MX(17)SH
/Times-Bold SF
5700 9458 MT
(setcachelimit)SH
/Times-Roman SF
11375 XM
(15,)
M(17)SH
/Times-Bold SF
5700 10605 MT
(setcacheparams)SH
/Times-Roman SF
12475 XM
(15,)SH
/Times-Bold SF
13825 XM
(18)SH
5700 11752 MT
(setidlefonts)SH
/Times-Roman SF
10725 XM
(7)SH
/Times-Bold SF
5700 12899 MT
(setpacking)SH
/Times-Roman SF
10475 XM
(13,)SH
/Times-Bold SF
11825 XM
(16)SH
5700 14046 MT
(setsccbatch)SH
/Times-Roman SF
10725 XM
(3,)
M(5)SH
/Times-Bold SF
5700 15193 MT
(setsccinteractive)SH
/Times-Roman SF
12675 XM
(3,)
M(5)SH
/Times-Bold SF
5700 16340 MT
(showpage)SH
/Times-Roman SF
10125 XM
(9,)
M(10,)
M(11)SH
/Times-Bold SF
5700 17487 MT
(StandardEncoding)SH
/Times-Roman SF
13625 XM
(7)SH
/Times-Bold SF
5700 18634 MT
(statusdict)SH
/Times-Roman SF
10075 XM
(1,)
M(6,)
M(11)SH
/Times-Bold SF
5700 19781 MT
(systemdict)SH
/Times-Roman SF
10425 XM
(1)SH
/Times-Bold SF
5700 22075 MT
(token)SH
/Times-Roman SF
8525 XM
(16)SH
/Times-Bold SF
5700 24369 MT
(undefined)SH
/Times-Roman SF
10225 XM
(14)SH
/Times-Bold SF
5700 25516 MT
(UniqueID)SH
/Times-Roman SF
10175 XM
(9)SH
/Times-Bold SF
5700 26663 MT
(usertime)SH
/Times-Roman SF
9725 XM
(9)SH
/Times-Bold SF
5700 28957 MT
(version)SH
/Times-Roman SF
9175 XM
(1,)
M(15)SH
5700 30104 MT
(Virtual)
M(memory)
675 MX(10,)
225 MX(12)SH
7 SS 
5700 32398 MT
(XON)SH
9 SS 
(/)SH
7 SS 
(XOFF)SH
9 SS 
9478 XM
(flow)
M(control)
675 MX(2,)
225 MX(3)SH
10 SS 
/Helvetica SF
4500 63450 MT
(20)SH
8 SS 
8012 XM
(INDEX)SH
ES
%%Page: iii 23 
BS
0 SI
1 SS 
0 5400 5405 PB %!
% contents box/fountain
gsave 0 -3 pica translate  0 0 36 pica 3 pica fountain
1 setlinewidth -.25 0 moveto 36 pica .5 add 0 rlineto stroke
-.25 3 pica moveto 36 pica .5 add 0 rlineto stroke
.5 setlinewidth 0 -.5 moveto 0 3 pica 1 add rlineto stroke
36 pica -.5 moveto 0 3 pica 1 add rlineto stroke grestore

 PE 24 SS 
/Helvetica SF
37794 8229 MT
(Contents)SH
9 SS 
19799 15024 MT
(1)SH
21894 XM
(Introduction)SH
8 SS 
27250 XM
(1)SH
9 SS 
19799 16221 MT
(2)SH
21894 XM
(LaserWriter)
288 MX(Functional)
M(Changes)SH
8 SS 
35526 XM
(2)SH
9 SS 
19799 17418 MT
(3)SH
21894 XM
(Implementation)
M(Changes)SH
8 SS 
32588 XM
(8)SH
9 SS 
19799 18615 MT
(4)SH
21894 XM
(P)SH
/PSLogo SF
(OST)SH
/Helvetica SF
(S)SH
/PSLogo SF
(CRIPT)SH
/Helvetica SF
27932 XM
(Language)
M(Changes)SH
8 SS 
36476 XM
(12)SH
9 SS 
19799 22264 MT
(INDEX)SH
8 SS 
23205 XM
(19)SH
10 SS 
47931 63450 MT
(iii)SH
ES
%%Trailer
%%Pages: 23 
%%DocumentFonts: Times-Roman Helvetica-Bold Times-Bold Symbol Helvetica Times-Italic PSLogo Helvetica

19-Feb-86 09:40:06-PST,2549;000000000000
Return-Path: <adobe!taft@decwrl.DEC.COM>
Received: from decwrl.DEC.COM by SU-SCORE.ARPA with TCP; Tue 18 Feb 86 19:30:14-PST
Received: by decwrl.DEC.COM (4.22.01/4.7.34)
	id AA23947; Tue, 18 Feb 86 18:06:30 pst
Received: by adobe.UUCP (4.12/4.7)
	id AA10643; Tue, 18 Feb 86 17:44:59 pst
From: adobe!taft@decwrl.DEC.COM (Ed Taft)
Message-Id: <8602190144.AA10643@adobe.UUCP>
Date: 18 Feb 1986 1744-PST (Tuesday)
To: info-PostScript@score.ARPA
Cc: taft@decwrl.DEC.COM
Subject: Language changes
ReSent-Date: Wed 19 Feb 86 09:40:06-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12184646104.21.REULING@SU-SCORE.ARPA>

Several additions have been made to the standard PostScript language.
These additions are upward-compatible and do not affect the function of
any existing PostScript programs. The language is now at version number
38.0; this version is present not only in the LaserWriter Plus but in
PostScript printers now being shipped by QMS, DataProducts, and
Linotype.

The new language facilities are of a "system programming" nature:
they do not offer any new page description capabilities. In general,
PostScript programs that are intended to be compatible with all
PostScript printers should not make use of the new features. However,
it is possible for a program to determine whether or not the new
features are present and to invoke them conditionally.

The new facilities are summarized below. Complete information is
contained in the LaserWriter Plus supplement mentioned in message 1,
as well as in corresponding supplements for each of the other PostScript
printers.

  (1) Packed arrays. These are an alternative data type for representing
PostScript procedures, providing a significant (50 to 75 percent)
reduction in the amount of VM required to store them. Page
descriptions with large preambles can benefit significantly from using
the packed array facility.

  (2) Immediately evaluated names. These essentially are a means of
obtaining the effect of the "bind" operator selectively. They are used
heavily by built-in PostScript programs, but are of lesser interest to
user-defined programs.

  (3) Compressed characters. The font cache is now able to retain much
larger character bitmaps than before and often to consume less space while
doing so. This isn't so much a language change as an implementation
improvement; however, there do exist some new cache control parameters
and some operators for manipulating them.

19-Feb-86 13:24:40-PST,3211;000000000000
Return-Path: <adobe!taft@decwrl.DEC.COM>
Received: from decwrl.DEC.COM by SU-SCORE.ARPA with TCP; Tue 18 Feb 86 19:32:16-PST
Received: by decwrl.DEC.COM (4.22.01/4.7.34)
	id AA23940; Tue, 18 Feb 86 18:05:46 pst
Received: by adobe.UUCP (4.12/4.7)
	id AA10591; Tue, 18 Feb 86 17:41:46 pst
From: adobe!taft@decwrl.DEC.COM (Ed Taft)
Message-Id: <8602190141.AA10591@adobe.UUCP>
Date: 18 Feb 1986 1741-PST (Tuesday)
To: info-PostScript@score.ARPA
Cc: taft@decwrl.DEC.COM
Subject: LaserWriter Plus information
ReSent-Date: Wed 19 Feb 86 13:24:40-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12184686987.33.REULING@SU-SCORE.ARPA>

This and the next two messages are in response to several questions
and comments about the LaserWriter Plus, recent PostScript language
changes, and hardware support for PostScript.


1. LaserWriter Plus

The LaserWriter Plus is strictly a software upgrade to the LaserWriter.
The only hardware change consists of replacing the ROMs with new
devices having twice the capacity as the old. Existing LaserWriters can be
upgraded to the new ROMs; see your Apple dealer.

The new ROM software is substantially different from the old in four
main areas:

  (1) New fonts. In addition to the original Times, Helvetica, Courier,
and Symbol families, the following font families are built-in: Avant
Garde, Bookman, New Century Schoolbook, Palatino, Zapf Chancery, and
Zapf Dingbats. This expands the original 13 typefaces to 35. The increase in
ROM space from .5 to 1.0 megabyte is entirely consumed by new fonts.

  (2) PostScript language extensions. These are discussed in the next
message.

  (3) LaserWriter-specific functional changes. These include expanded
serial communication capabilities (higher baud rates, optional DTR flow
control), support for European paper sizes (A4 and B5), and a few
others.

  (4) Implementation improvements. Nearly all the problems in the
original LaserWriter software have been fixed. Additionally, for many
types of documents, page throughput is significantly improved. The
primary source of improvement is a new printing strategy that enables
imaging of a page to be overlapped with execution of the PostScript
description for the next page; formerly these were done serially.

Technical documentation for the LaserWriter Plus exists in the form of
a supplement to the original LaserWriter documentation (Appendix D of
the PostScript Language Reference Manual). This documentation is being sent
to Info-PostScript as a couple of Scribe-produced PostScript files; it will
also be copied to the Laser-Lovers archives and perhaps to other places
(watch your usenet newsgroups). It will eventually be incorporated into
Apple's "Inside LaserWriter" package, but I do not know when that will
happen.

	Ed Taft
	Adobe Systems, Inc.


Notices:
  PostScript is a trademark of Adobe Systems Incorporated.
  Helvetica, Palatino, and Times are trademarks of Allied Corporation.
  Avant Garde, Bookman, Zapf Chancery, and Zapf Dingbats are trademarks
  of International Typeface Corporation.
  Scribe is a trademark of Unilogic Ltd.


19-Feb-86 13:25:35-PST,4712;000000000000
Return-Path: <adobe!taft@decwrl.DEC.COM>
Received: from decwrl.DEC.COM by SU-SCORE.ARPA with TCP; Tue 18 Feb 86 19:37:38-PST
Received: by decwrl.DEC.COM (4.22.01/4.7.34)
	id AA23953; Tue, 18 Feb 86 18:07:18 pst
Received: by adobe.UUCP (4.12/4.7)
	id AA10776; Tue, 18 Feb 86 17:50:56 pst
From: adobe!taft@decwrl.DEC.COM (Ed Taft)
Message-Id: <8602190150.AA10776@adobe.UUCP>
Date: 18 Feb 1986 1750-PST (Tuesday)
To: info-PostScript@score.ARPA
Cc: taft@decwrl.DEC.COM
Subject: Hardware support for PostScript
ReSent-Date: Wed 19 Feb 86 13:25:35-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12184687152.33.REULING@SU-SCORE.ARPA>

Several people have suggested hardware enhancements (e.g., faster CPUs,
RasterOp chips, etc.) to improve the performance of PostScript
printers. Naturally, this is a topic of great interest to us at Adobe.
I'd like to share a few of our current thoughts with you. Please note
that I am talking only about current products; I am not speculating
about future ones.

Adobe's approach to PostScript has been first to define a fully general
software model for the programming language and page description
capabilities and only then to consider how hardware can be employed to
accelerate the software. Experience with a pure software implementation
of PostScript (of which the LaserWriter is a good example) gives us an
understanding of what parts of the implementation would benefit most
from hardware support.

There are three major activities that together account for most of the
execution time in Adobe's implementation of PostScript. These are:

  (1) Low-level raster manipulations, principally painting character
bitmaps and filling trapezoids located at arbitrary bit boundaries.
For typical pages, this activity dominates everything else if all
characters are already in the font cache.

  (2) Character scan conversion. This is a very compute intensive
operation because the original character definitions are at a high
level and are being pushed through the full PostScript graphics
machinery. In particular, there is a lot of arithmetic, both fixed and
floating point.

  (3) PostScript input scanning and interpretation. This includes
parsing the input stream, constructing tokens, looking up names,
pushing and popping stacks, etc. The amount of time consumed by this
activity varies considerably according to the type of page description
and the programming style. A text document that consists primarily of
strings and calls to simple PostScript procedures consumes relatively
little time in the interpreter; a document that executes a lot of
PostScript code for each mark placed on the page consumes
proportionately more.

Of course, I have deliberately left out time spent waiting for input data or
waiting for the print engine. The effect of a slow communication channel or
a slow print engine can completely dominate everything else. More to the
point, obtaining the best performance requires the ability to perform
communication, execution, and printing activities in parallel.

The above three activities benefit from significantly different kinds of
hardware support. (Of course, in a strictly software implementation, a
faster CPU should speed all three activities.) Considering them in order:

  (1) Simple hardware for shifting and masking makes a substantial
difference here; the full generality of RasterOp is not needed. The idea is
to minimize the number of CPU instructions and memory cycles needed to
perform simple, repetitive bit moving operations. A shifter-masker is
included in the Adobe Redstone controller, versions of which are used in all
present PostScript printers except the LaserWriter. This activity is one
that would benefit greatly from having a separate, parallel processor; its
interface with the rest of PostScript would be quite simple.

  (2) Efficient arithmetic is of particular importance here. Also, since a
vast amount of code is being executed and all of it is written in a
high-level language (C in the case of Adobe's implementation), the overall
quality of compiled code is important. Apart from arithmetic, no single
component dominates, so it's not practical to assembly-code much of it.

  (3) Here is a place where some special hardware and/or microcode might
help. The PostScript interpreter's data structures and algorithms are
sufficiently straightforward that custom hardware may be practical. Whether
or not this makes sense economically depends on how much time is spent in
the interpreter relative to everything else, which, as I said, is highly
application dependent.

21-Feb-86 07:58:23-PST,2563;000000000001
Return-Path: <ned%UPenn-Grasp%upenn.csnet@CSNET-RELAY.ARPA>
Received: from CSNET-RELAY.ARPA by SU-SCORE.ARPA with TCP; Fri 21 Feb 86 03:59:57-PST
Received: from upenn by csnet-relay.csnet id aq02825; 21 Feb 86 6:40 EST
Received: by UPenn-Grasp.CSNET
	id AA18833; Thu, 20 Feb 86 14:19:54 est
Date: Thu, 20 Feb 86 14:19:54 est
From: ned%UPenn-Grasp%upenn.csnet@CSNET-RELAY.ARPA
To: info-postscript@su-score.arpa
Subject: %%BoundingBox
Received: from UPenn-Grasp by UPenn; Thu, 20 Feb 86 14:22 EST
ReSent-Date: Fri 21 Feb 86 07:58:23-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12185151877.18.REULING@SU-SCORE.ARPA>

One of the most important comment conventions defined for PostScript is the
BoundingBox comment: it lets other programs know exactly where the marks on
the page will fall when the PostScript code is run. It is extremely valuable
information, as there is no other way to determine it, other than actually
running the PostScript. If we are to write any great PostScript tools which
know how to include one PostScript program in another, we have to make sure
that this comment is created whenever feasible. Here at Penn, we are working
on a preprocessor for ditroff which will include a PostScript file as an
illustration. The preprocessor knows how to read the BoundingBox comment to
get the size of the figure, but unfortunately, not everything generates this
comment as it should. In particular, MacDraw seems not to, and that is a
tremendous shame, because whenever I've discussed this preprocessor with
other people, they've always responded with, "You mean I'll be able to draw
diagrams with MacDraw, and put them in troff automatically?!?!", and I've
got to say, "Well, you can, but it won't really be as easy as it should,
because for some reason Apple decided not to do things properly." Apple, if
you're reading this: DO THIS NOW. I imagine it would be very easy for
MacDraw to generate this information, it knows the extent of the drawing.
Many users will not want to try to hack around with the measuring to get it
to fit precisely. For any other developers out there, Please, please, please
put in this comment. Don't assume that you know everything people will want
to do with your programs. Everyone in the business of using PostScript will
be happier if we all try to follow these guidelines.


Ned Batchelder		University of Pennsylvania
(ned@UPenn.CSnet)	CIS Dept, 200 South 33rd Street
(215) 898-5617		Philadelphia, PA, 19104-6389
23-Feb-86 21:20:55-PST,3053;000000000001
Return-Path: <adobe!taft@decwrl.DEC.COM>
Received: from decwrl.DEC.COM by SU-SCORE.ARPA with TCP; Sun 23 Feb 86 15:12:40-PST
Received: by decwrl.DEC.COM (4.22.03/4.7.34)
	id AA02588; Sun, 23 Feb 86 15:17:57 pst
Received: by adobe.UUCP (4.12/4.7)
	id AA05574; Sun, 23 Feb 86 15:13:59 pst
From: adobe!taft@decwrl.DEC.COM (Ed Taft)
Message-Id: <8602232313.AA05574@adobe.UUCP>
Date: 23 Feb 1986 1513-PST (Sunday)
To: info-PostScript@Score.ARPA
Cc: taft@decwrl.DEC.COM
Subject: elaboration on flow control
ReSent-Date: Sun 23 Feb 86 21:20:55-PST
ReSent-From: Bob Barcklay <BARCKLAY@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12185822260.11.BARCKLAY@SU-SCORE.ARPA>

In reading the technical documentation on the LaserWriter Plus that was
distributed last week, Glenn Trewitt <trewitt@su-amadeus.arpa> came up
with a couple of good questions regarding DTR flow control. Here are his
questions and my answers.


Q: The update says that there are new signals on the RS232 connector. You
say that the upgrade is just a ROM change. This seems odd, unless
those signals were just never enabled on the old LaserWriter.

A: The DTR and DSR signals have always been there; they simply have not
been used for flow control by the old ROM software. There are two
entirely different conventions for use of the DTR signal. The first
convention (and the one typically supported by time-sharing operating
systems) uses DTR simply to signal the presence or absence of peripheral
equipment. That is, raising DTR means "I'm here" and dropping it causes
jobs to be logged out, modems to be hung up, etc. The second convention
(typically supported by microcomputers) uses DTR to control the flow of
data from the host to the peripheral equipment.

The LaserWriter has always supported DTR according to the first
convention: it raises DTR normally but drops it if the serial channel is
turned off (e.g., to run AppleTalk), the printer is power-cycled, etc.
What is new in the LaserWriter Plus and other PostScript printers is
support for the second DTR convention as an alternative to the first.


Q: The documention talks about flow control in terms of "immediately stop
sending characters" when DTR drops or XOFF is received.  How much buffer
space is really left? Many systems just can't stop sending immediately.
For such systems, the response is usually measured in units of time, rather
than number of characters. Therefore the allowable number of characters
beyond XOFF can determine maximum baud rate.

A: The LaserWriter invokes flow control (by dropping DTR or sending
XOFF) when its input buffer is within 100 characters of being full.
This is more than enough to cover hardware data buffering, wakeup
latency, etc., on the host, assuming the host operating system is
handling flow control itself. Of course, problems may arise if the user
program is handling flow control and there is a lot of buffering
between the user program and the serial channel.

	Ed Taft
	Adobe Systems, Inc.

26-Feb-86 15:31:31-PST,1850;000000000001
Return-Path: <CET1%PHOENIX.CAMBRIDGE.AC.UK%SERC-ICF.ENGINEERING.CAMBRIDGE.AC.UK@Cs.Ucl.AC.UK>
Received: from Cs (CS.UCL.AC.UK.#Internet) by SU-SCORE.ARPA with TCP; Wed 26 Feb 86 13:59:33-PST
Received: from serc-icf.engineering.cambridge.ac.uk by 44d.Cs.Ucl.AC.UK 
           via Janet with NIFTP  id a000546; 26 Feb 86 16:38 GMT
Date: Wednesday, 26 February 1986 16:37:50
To: info-postscript <@cs.ucl.ac.uk,@cs.ucl.ac.uk:info-postscript@su-score.arpa>
Subject: Finding the other edges of the paper
From: "Cambridge Phoenix - CAM.PHX@CAM.ENG-ICF" <CET1%phoenix.cambridge.ac.uk@cs.ucl.ac.uk>
Authentic-sender:   MAIL@CAGA
ReSent-Date: Wed 26 Feb 86 15:31:31-PST
ReSent-From: Bob Barcklay <BARCKLAY@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12186545086.41.BARCKLAY@SU-SCORE.ARPA>

I have the following problem: for the benefit of a well-known
typesetting program I wish to set up a coordinate system on the LW
with the origin at a point 1in from the top of the paper, and 1in
from the left hand edge. I want to do this without knowing which of
the various device setup procedures (letter, note, a4, legal, ...)
is in effect. I can't see any way of doing it.
 
I realise, of course, that the LW doesn't actually know the size
of the paper, only the paper tray type. Even so, each device setup
procedure is associated with a certain nominal size of paper; however,
there seems to be no way a PostScript program can determine this size
dynamically. Maybe, as well as having the convention that in the
default coordinate system the origin is at the bottom left hand corner
of the paper, there also ought to be a convention that the coordinates
of the top right hand corner be stored in some canonical variables.
 
Chris Thompson
Cambridge University Computing Service
CET1%PHX.CAM.AC.UK@UCL-CS.ARPA

26-Feb-86 18:32:48-PST,2059;000000000001
Return-Path: <CET1%PHOENIX.CAMBRIDGE.AC.UK%SERC-ICF.ENGINEERING.CAMBRIDGE.AC.UK@Cs.Ucl.AC.UK>
Received: from Cs (CS.UCL.AC.UK.#Internet) by SU-SCORE.ARPA with TCP; Tue 25 Feb 86 09:21:25-PST
Received: from serc-icf.engineering.cambridge.ac.uk by 44d.Cs.Ucl.AC.UK 
           via Janet with NIFTP  id a012904; 24 Feb 86 9:51 GMT
Date: Sunday, 23 February 1986 22:36:21
To: info-postscript <@cs.ucl.ac.uk,@cs.ucl.ac.uk:info-postscript@su-score.arpa>
Subject: Two LaserWriter problems
From: "Cambridge Phoenix - CAM.PHX@CAM.ENG-ICF" <CET1%phoenix.cambridge.ac.uk@cs.ucl.ac.uk>
Authentic-sender:   MAIL@CAGA
ReSent-Date: Wed 26 Feb 86 18:32:48-PST
ReSent-From: Bob Barcklay <BARCKLAY@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12186578087.19.BARCKLAY@SU-SCORE.ARPA>

Two LaserWriter problems:
 
 1. The initial graphics state is such that 'currentfont' delivers
    a "null" rather than a dictionary. Not only is there no suggestion
    in the Reference Manual that this can happen (it just says "Initial
    value: installation dependent"), it is also the case that a "null"
    passed to 'setfont' causes a typecheck error.
 
 2. This one is more serious. After an otherwise untrapped error (say,
    an input wait timeout) the LW announces that it is "Flushing: rest
    of job (to end-of-file) will be ignored". However it seems that the
    input wait timeout is till operative, and if it goes off again
    then end-of-file will be assumed without an EOT ever having been
    sent. When some data eventually arives it will be treated as the
    start of a new job (and will probably provoke another error!) The
    problem seems to be that the "stdin flushfile" in 'execjob' out of
    'serverdict' will just jump out of the 'stopped' construction; at
    any rate that also explains why no EOT from the LW appears.
 
This is all with PostScript 23.0, of course. Maybe things are better
in the new version?
 
Chris Thompson
Cambridge University Computing Service
CET1%PHX.CAM.AC.UK@UCL-CS.ARPA

 4-Mar-86 22:50:22-PST,1048;000000000001
Return-Path: <reid@glacier>
Received: from glacier by SU-SCORE.ARPA with TCP; Wed 26 Feb 86 15:48:22-PST
Received: by glacier with Sendmail; Wed, 26 Feb 86 15:45:41 pst
Date: 26 Feb 1986 1545-PST (Wednesday)
From: Brian Reid <reid@glacier>
To: "Cambridge Phoenix - CAM.PHX@CAM.ENG-ICF" <CET1%phoenix.cambridge.ac.uk@cs.ucl.ac.uk>
Cc: info-postscript@glacier
Subject: Re: Finding the other edges of the paper
In-Reply-To: "Cambridge Phoenix - CAM.PHX@CAM.ENG-ICF" <CET1%phoenix.cambridge.ac.uk@cs.ucl.ac.uk> / 
		Wednesday, 26 February 1986 16:37:50.
ReSent-Date: Tue 4 Mar 86 22:50:22-PST
ReSent-From: Bob Barcklay <BARCKLAY@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12188197841.22.BARCKLAY@SU-SCORE.ARPA>

The way I do things like this is as follows. I don't know how accurate
it is (e.g. I've never tried A4 paper)  but it seems to work with note
and legal:

gsave initclip clippath pathbbox
/ury exch def /urx exch def pop pop
grestore

This puts the upper right corner coordinates into [urx,ury].
 7-Mar-86 11:28:49-PST,1338;000000000001
Return-Path: <OSTROFF@RED.RUTGERS.EDU>
Received: from RED.RUTGERS.EDU by SU-SCORE.ARPA with TCP; Thu 6 Mar 86 12:36:15-PST
Date: 6 Mar 86 15:37:33 EST
From: OSTROFF@RED.RUTGERS.EDU
Subject: special characters from scribe
To: info-postscript@SU-SCORE.ARPA
Message-ID: <12188610568.69.OSTROFF@RED.RUTGERS.EDU>
ReSent-Date: Fri 7 Mar 86 11:28:49-PST
ReSent-From: Bob Barcklay <BARCKLAY@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12188860202.37.BARCKLAY@SU-SCORE.ARPA>

Has anyone been able to get the standard text characters with character
codes above 177 using Scribe?  The method used for the symbol font does
not work - the maps to coding in a typecase requires specification of
a rawfile.  The characters I want are in all the standard text fonts -
and I would like to get them in the current font.  Some of the characters
could be coded through the control characters, but there are not enough
places for all available characters.  I am considering defining a new font
(called NOFONT, perhaps) and then redefining findfont and setfont to do
nothing if the font name is NOFONT.  Is this reasonable?  Is there an
easier way.  Hopefully I have just missed something obvious.

Thanks for any ideas.
			Jack (OSTROFF@RUTGERS or
			      OSTROFF@RED.RUTGERS.EDU if you like domains.)
-------
17-Mar-86 11:32:40-PST,1714;000000000000
Return-Path: <CET1%PHOENIX.CAMBRIDGE.AC.UK%SERC-ICF.ENGINEERING.CAMBRIDGE.AC.UK@Cs.Ucl.AC.UK>
Received: from Cs (CS.UCL.AC.UK.#Internet) by SU-SCORE.ARPA with TCP; Fri 7 Mar 86 11:16:51-PST
Received: from serc-icf.engineering.cambridge.ac.uk by 44d.Cs.Ucl.AC.UK 
           via Janet with NIFTP  id a000206; 7 Mar 86 18:36 GMT
Date: Friday, 7 March 1986 15:54:56
To: info-postscript <@cs.ucl.ac.uk,@cs.ucl.ac.uk:info-postscript@su-score.arpa>
Subject: Re: Finding the other edges of the paper
From: "Cambridge Phoenix - CAM.PHX@CAM.ENG-ICF" <CET1%phoenix.cambridge.ac.uk@cs.ucl.ac.uk>
Authentic-sender:   MAIL@CAGA
ReSent-Date: Mon 17 Mar 86 11:32:40-PST
ReSent-From: Bob Barcklay <BARCKLAY@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12191482342.48.BARCKLAY@SU-SCORE.ARPA>

Thanks to everyone who suggested using variations on "initclip clippath
pathbbox" to find the top right hand corner of the paper. However most
of these solutions only find the top right hand corner of the imageable
area, rather than of the paper. On the other hand, Ann Robinson from
Adobe has pointed out to me that if one assumes that the imageable area
is centered on the paper, and that the bottom left hand corner of the
paper is at (0,0), then one can deduce the coordinates of the top right
hand corner of the paper by adding the low and high coordinates returned
by 'pathbbox'; e.g.
 
gsave initclip newpath clippath pathbbox grestore
3 -1 roll add /ury exch def add /urx exch def
 
I should warn that this procedure doesn't accurately give, for example,
11" and 8.5" for 'letter': there are deviations of the order of a pixel.
 
Chris Thompson
CET1%PHX.CAM.AC.UK@UCL-CS.ARPA

18-Mar-86 17:16:50-PST,4542;000000000000
Mail-From: REULING created at 18-Mar-86 17:16:30
Return-Path: <mkb@rover.ri.cmu.edu>
Received: from ROVER.RI.CMU.EDU by SU-SCORE.ARPA with TCP; Fri 14 Mar 86 19:03:35-PST
Date: 14 Mar 1986 21:39-EST 
From: Mike.Blackwell@ROVER.RI.CMU.EDU
To: info-postscript@score
Subject: Adding page hack marks to LinoType film
Message-Id: <511238380/mkb@ROVER.RI.CMU.EDU>
ReSent-Date: Tue 18 Mar 86 17:16:29-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12191807076.37.REULING@SU-SCORE.ARPA>

Here's a Scribe library file that allows you to redefine the page
orientation, and add page hack marks (or page grid, as you like - you
know, where to cut the film...), to Allied LinoType output. (We proof
on Apple LaserWriters, and do final copy on a LinoTronic 300).

The way this works is to redefine Scribe's standard PostScript device
initialization string, adding PS code at the end to check to see if the
output device is a LinoType. If it is, then the size of each page is
enlarged to 9 x 11.5 inches. The BS definition (which Scribe calls at
the beginning of each page) is modified to first draw .25 x .25 inch
hack marks in the corners of the page, and then translate so the page
will be centered between the hack marks. If the output device isn't a
LinoType, then nothing is changed, so the same file can be printed on
any PS printer with no ill effect.

To use this library, the first two lines of the MSS file should be:
@device(postscript)
@librayfile(hackmarks)

Note that you cannot include Macintosh generated pictures with
@device(macdraw) when you use this library, because the Mac prolog
information in the device initialization string will be replaced.

		-m-  (mkb@rover.ri.cmu.edu)

---------- Begin hackma.lib ----------
@Marker(Library, HackMarks)

@Begin(Comment)
Device Initialization modification for the standard Scribe PostScript device
to include 8.5 x 11 inch hack marks on Linotype output.

4-MAR-86  Mike Blackwell, Carnegie-Mellon University, mkb@rover.ri.cmu.edu
@End(Comment)

@Style(StringMax = 10000)
@Style<DeviceInitialization =

"%%EndComments
%### Start of standard Unilogic Scribe prolog for PostScript device
% PostScript Prelude for Scribe.
/BS {/SV save def} def
/ES {showpage SV restore} def

/SC {setrgbcolor} def

/RST {100 div} def
/CVTXY {RST 792 sub abs exch RST exch} def
/RDF {WFT findfont SLT 0 eq
  {SSZ scalefont}

  {[SSZ 0 SLT sin SLT cos div SSZ mul SSZ 0 0]makefont}

  ifelse
  setfont} def
/SLT 0 def
/SI { /SLT exch def RDF } def

/WFT /Courier def

/SF { /WFT exch def RDF } def

/SSZ 10 def

/SS { /SSZ exch def RDF } def

/MT { CVTXY moveto } def
/XM {RST currentpoint exch pop moveto} def
/UL {gsave newpath CVTXY moveto RST dup 2 div 0 exch rmoveto
   setlinewidth RST 0 rlineto stroke grestore} def

/PB {/PV save def CVTXY translate pop}def

/PE {PV restore}def

/SH{show}def
/MSS {SSW RST 0 rmoveto} def
/SNS { SSW add /SSW exch def MSS} def

/MX {/SSW exch def SH MSS} def
/M2 {SH MSS MSS} def
/M {SH MSS} def

/M+ {SH 1  SNS} def

/M- {SH -1 SNS} def

%### End of standard Unilogic Scribe prolog
% Prolog addendum to place 8.5 x 11 inch hack marks on Linotype output.
% This is accomplished by setting the page parameters so the imaging
% area is 9 x 11.5 inches. The BS operator is redefined to draw
% 0.25 x 0.25 inch hack marks, then translate by (0.25, 0.25) inches
% before starting on the page.

% Check to make sure we're on a Linotype
statusdict begin product end (Linotype) eq {
  /INCH { 72 mul } def
  /H 11.0 INCH def		% Paper height
  /W 8.5 INCH def		% Paper width
  /HACK 0.25 INCH def		% Size of hack marks
  /HACK2 HACK 2 mul def
  statusdict begin
    H HACK2 add W HACK2 add 0 INCH 0 setpageparams	% For wide film
%   W HACK2 add H HACK2 add 0 INCH 1 setpageparams	% For narrow film
  end
  /BS {
    /SV save def
    gsave
      0 setlinecap
      0.25 setlinewidth
      newpath
        HACK 0 moveto
        HACK HACK lineto
        0 HACK lineto
        W HACK add 0 moveto
        W HACK add HACK lineto
        W HACK2 add HACK lineto
        W HACK add H HACK2 add moveto
        W HACK add H HACK add lineto
        W HACK2 add H HACK add lineto
        HACK H HACK2 add moveto
        HACK H HACK add lineto
        0 H HACK add lineto
      stroke
    grestore
  HACK HACK translate
  } def
} if

%%EndProlog

">

---------- End of hackma.lib ----------
18-Mar-86 18:47:36-PST,1169;000000000000
Mail-From: REULING created at 18-Mar-86 18:47:15
Return-Path: <MANSFIELD%DHDEMBL5.BITNET@WISCVM.WISC.EDU>
Received: from WISCVM.WISC.EDU by SU-SCORE.ARPA with TCP; Mon 17 Mar 86 08:16:06-PST
Received: from (MANSFIEL)DHDEMBL5.BITNET by WISCVM.WISC.EDU on 03/17/86
  at 10:16:42 CST
Date:           Mon, 17 Mar 86 17:13:35 n
To:  info-postscript@su-score.arpa
From:             Niall Mansfield
  <MANSFIELD%DHDEMBL5.BITNET@WISCVM.WISC.EDU>
Organisation:   European Molecular Biology Laboratory
Postal-address: Meyerhofstrasse 1, 6900 Heidelberg, W. Germany
Phone:          (6221)387-1 [switchboard]  (6221)387-247 [direct]
Subject:        Diablo 630 emulation
ReSent-Date: Tue 18 Mar 86 18:47:14-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12191823595.16.REULING@SU-SCORE.ARPA>

To: info-postscript@su-score

Does anybody have a Postscript program to emulate a Diablo 630,
or a program (C, Pascal, x) to translate Diablo-style output to Postscript
prior to sending to the printer?
(So that a LaserWriter doesn't need to be repeatedly switched between
PostScript and Special modes).


19-Mar-86 00:57:19-PST,2088;000000000000
Mail-From: REULING created at 19-Mar-86 00:57:00
Mail-From: BILLW created at 18-Mar-86 20:23:57
Date: Tue 18 Mar 86 20:23:56-PST
From: William "Chops" Westfield <BILLW@SU-SCORE.ARPA>
Subject: simple but useful postscript hack...
To: info-postscript@SU-SCORE.ARPA
Message-ID: <12191841200.34.BILLW@SU-SCORE.ARPA>
ReSent-Date: Wed 19 Mar 86 00:56:58-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12191890905.8.REULING@SU-SCORE.ARPA>

Here is a simple postscript procedure that, given a box (lower right
and upper left corners), and some text, scales the text to more or
less exactly fill the box.  I have found it very useful for composing
name tags, badges, business cards, and the like....

Known bugs:  It seems to run pretty slowly.
	Although I have concluded that the fact that charaters with
	descenders (gjyq) exceed the box is probably correct, it
	also seems that many characters with curved bottoms dip
	below the box when using large scales.  This is probably wrong.

-----------
%! fillbox
%
% procedure to fill a box with some text
%  text fontname llx lly urx ury -> -
%
/fillbox {
 gsave
  /height exch def		% height <- urx
  /width exch def		% width <- urx
  2 copy moveto
  height sub neg /height exch def
  width sub neg /width exch def
  findfont height scalefont setfont	% get approximate sized font
  gsave
    newpath 0 0 moveto		%find bounding box of string
    dup true charpath flattenpath pathbbox
    /sheight exch def /swidth exch def pop pop
  grestore
  width swidth div		% scaling for width
  height sheight div scale	% and height
  show
 grestore
} def

% example follows:   Make a "BillW" Personal Business Card
/inch { 72 mul } def

.25 inch .25 inch translate
(BillW) /Helvetica-Bold
  0 0			% ll corner
  3.5 inch  2 inch	% ur corner
  fillbox
.5 setgray
(Nice guy) /Helvetica
	.5 inch  .66 inch    3 inch  .66 inch 15 add fillbox
(497-1407) /Helvetica
	.5 inch  .66 inch 16 sub    3 inch  .66 inch 1 sub fillbox
	
showpage
-------
24-Mar-86 20:19:48-PST,3487;000000000000
Return-Path: <GFOSTER@USC-ISI.ARPA>
Received: from USC-ISI.ARPA by SU-SCORE.ARPA with TCP; Fri 21 Mar 86 07:41:04-PST
Date: 21 Mar 1986 10:40:15 EST
Subject: LW+ fonts
From: Glen Foster <GFoster@USC-ISI.ARPA>
To: Info-PostScript@SU-SCORE.ARPA
ReSent-Date: Mon 24 Mar 86 20:19:48-PST
ReSent-From: Bob Barcklay <BARCKLAY@SU-SCORE.ARPA>
ReSent-To: APope@BBN-UNIX.ARPA, Bob.Sproull@VLSI.CS.CMU.EDU, CAMERON@JPL-VLSI.ARPA,
    CET1%PHX.CAM.AC.UK@CS.UCL.AC.UK, Cc.Kaczmarczik@A20.UTEXAS.EDU,
    DAVEG%SLACVM.BITNET@SU-FORSYTHE.ARPA, Elwell@ohio-state.CSNet, GARRY%GEOLOGY@CU-ARPA.CS.CORNELL.EDU,
    Gajek@R20.UTEXAS.EDU, Harriet_Borton%RPI-MTS.Mailnet@MIT-MULTICS.ARPA,
    KINGSLAND@NLM-VAX.ARPA, Karney%PPC@LLL-MFE.ARPA, MARC%oz.ai.mit.edu@XX.LCS.MIT.EDU,
    MLRO%GTE-LABS.CSNET@CSNET-RELAY.ARPA, McGregor@DECWRL.DEC.COM, Michael.Fryd@A.CS.CMU.EDU,
    Ostroff@RED.RUTGERS.EDU, PWong%PIXEL.DEC@DECWRL.DEC.COM, Pellegrino@BBNA.ARPA,
    RCKing@MIT-MULTICS.ARPA, REILLY@WHARTON-10.ARPA, RITCHESON%ECLD@USC-ECL.ARPA,
    RMULLER%UMASS.BITNET@WISCVM.WISC.EDU, Robert.Spies@GANDALF.CS.CMU.EDU,
    SYSAL%UKCC.BITNET@WISCVM.WISC.EDU, Shull@WHARTON-10.ARPA, TCROWLEY@BBNA.ARPA,
    ahynson@NSWC-G.ARPA, aragon@DECWRL.DEC.COM, archer@ROCHESTER.ARPA,
    barkley@NBS-VMS.ARPA, baskett@DECWRL.DEC.COM, bcp@GANDALF.CS.CMU.EDU,
    broder@ISI-VAXA.ARPA, bruce@GODOT.THINK.COM, calvin@CIT-20.CALTECH.EDU,
    cc.kassebaum@R20.UTEXAS.EDU, cmf%happy.UUCP@case.CSNet, conrad@CGL.UCSF.EDU,
    cosell@BBN-PROPHET.ARPA, dan@MC.LCS.MIT.EDU, danny%hugo@israel.CSNet,
    dpw@ASTRO.UTEXAS.EDU, dsc%lumiere%tektronix.csnet@CSNET-RELAY.ARPA,
    ellenberger%louie.DEC@DECWRL.DEC.COM, fletcher@SALLY.UTEXAS.EDU,
    fujiura%smurf.DEC@DECWRL.DEC.COM, furuta@MIMSY.UMD.EDU, gerovac%eubie.DEC@DECWRL.DEC.COM,
    ggr@btl.CSNet, harrison@UCBVAX.BERKELEY.EDU, hinman@XX.LCS.MIT.EDU,
    hitchens@SALLY.UTEXAS.EDU, jeff%mcnc.csnet@CSNET-RELAY.ARPA, jimb%crl%tektronix@CSNET-RELAY.ARPA,
    jsc@UCBVAX.BERKELEY.EDU, keithe%tek.csnet@CSNET-RELAY.ARPA, kerr@LOGNET2.ARPA,
    knutson@NGP.UTEXAS.EDU, lej@SRI-KL.ARPA, mattern%uklirb.UUCP%germany.csnet@CSNET-RELAY.ARPA,
    mccrudden%cipher.DEC@DECWRL.DEC.COM, mkb@ROVER.RI.CMU.EDU, mly@MC.LCS.MIT.EDU,
    noah@IBM-SJ.ARPA, page%ulowell.csnet@CSNET-RELAY.ARPA, phc@RENOIR.BERKELEY.EDU,
    r-scott@A.SEI.CMU.EDU, rex@USGS2-MULTICS.ARPA, rex@USGS3-VMS.ARPA,
    rhott@NSWC-G.ARPA, ricks%ic.berkeley@UCBVAX.BERKELEY.EDU, robinson%holst.DEC@DECWRL.DEC.COM,
    saj@MIT-PREP.ARPA, schmiede@NADC.ARPA, scott@ETL-AI.ARPA, shm@AERO2.ARPA,
    shulman@BBN-SPCA.ARPA, sundar@MIT-HERMES.ARPA, sutter@OHIO-STATE.ARPA,
    sxs%a@LANL.ARPA, tappan@BBNA.ARPA, tony@ATHENA.MIT.EDU, verdeyen%clio.soh.UIUC.EDU@A.CS.UIUC.EDU,
    wilkes@HPLABS.ARPA, wm%tekchips%tektronix.csnet@CSNET-RELAY.ARPA,
    wortman@toronto.CSNet, wvh@GAUSS.ECE.CMU.EDU, brucker@EE.UCLA.EDU,
    "*PS:<INFO-POSTSCRIPT>MAIL.INFO-PS.1"@SU-SCORE.ARPA
ReSent-Message-ID: <12193413312.12.BARCKLAY@SU-SCORE.ARPA>

ARPA, shm@AERO2.ARPA,
    shulman@BBN-SPCA.ARPA, sundar@MIT-HERMES.ARPA, sutter@OHIO-STATE.ARPA,
    sxs%a@LANL.ARPA, tappan@BBNA.ARPA, tony@ATHENA.MIT.EDU, verdeyen%clio.soh.UIUC.EDU@A.CS.UIUC.EDU,
    wilkes@HPLABS.ARPA, wm%tekchips%tektronix.csnet@CSNET-RELAY.ARPA,
    wortman@toronto.CSNet, wvh@GAUSS.ECE.CMU.EDU, brucker@EE.UCLA.EDU,
    "*PS:<INFO-POSTSCRIPT>MAIL.INFO-PS.1"@SU-SCORE.ARPA
ReSent-Message-ID: <12193413312.12.BARCKLAY@SU-SCORE.ARPA>

24-Mar-86 20:20:43-PST,3352;000000000000
Return-Path: <svb@Purdue.EDU>
Received: from mordred.Purdue.EDU by SU-SCORE.ARPA with TCP; Sat 22 Mar 86 00:45:33-PST
Date: Sat, 22 Mar 86 16:59:29 EST
From: "Stephan v. Bechtolsheim" <svb@Purdue.EDU>
Message-Id: <8603222159.AA14273@mordred.Purdue.EDU>
Received: by mordred.Purdue.EDU; Sat, 22 Mar 86 16:59:29 EST
To: info-postscript@su-score.arpa
Subject: Printing all keys of a dictionary
ReSent-Date: Mon 24 Mar 86 20:20:43-PST
ReSent-From: Bob Barcklay <BARCKLAY@SU-SCORE.ARPA>
ReSent-To: APope@BBN-UNIX.ARPA, Bob.Sproull@VLSI.CS.CMU.EDU, CAMERON@JPL-VLSI.ARPA,
    CET1%PHX.CAM.AC.UK@CS.UCL.AC.UK, Cc.Kaczmarczik@A20.UTEXAS.EDU,
    DAVEG%SLACVM.BITNET@SU-FORSYTHE.ARPA, Elwell@ohio-state.CSNet, GARRY%GEOLOGY@CU-ARPA.CS.CORNELL.EDU,
    Gajek@R20.UTEXAS.EDU, Harriet_Borton%RPI-MTS.Mailnet@MIT-MULTICS.ARPA,
    KINGSLAND@NLM-VAX.ARPA, Karney%PPC@LLL-MFE.ARPA, MARC%oz.ai.mit.edu@XX.LCS.MIT.EDU,
    MLRO%GTE-LABS.CSNET@CSNET-RELAY.ARPA, McGregor@DECWRL.DEC.COM, Michael.Fryd@A.CS.CMU.EDU,
    Ostroff@RED.RUTGERS.EDU, PWong%PIXEL.DEC@DECWRL.DEC.COM, Pellegrino@BBNA.ARPA,
    RCKing@MIT-MULTICS.ARPA, REILLY@WHARTON-10.ARPA, RITCHESON%ECLD@USC-ECL.ARPA,
    RMULLER%UMASS.BITNET@WISCVM.WISC.EDU, Robert.Spies@GANDALF.CS.CMU.EDU,
    SYSAL%UKCC.BITNET@WISCVM.WISC.EDU, Shull@WHARTON-10.ARPA, TCROWLEY@BBNA.ARPA,
    ahynson@NSWC-G.ARPA, aragon@DECWRL.DEC.COM, archer@ROCHESTER.ARPA,
    barkley@NBS-VMS.ARPA, baskett@DECWRL.DEC.COM, bcp@GANDALF.CS.CMU.EDU,
    broder@ISI-VAXA.ARPA, bruce@GODOT.THINK.COM, calvin@CIT-20.CALTECH.EDU,
    cc.kassebaum@R20.UTEXAS.EDU, cmf%happy.UUCP@case.CSNet, conrad@CGL.UCSF.EDU,
    cosell@BBN-PROPHET.ARPA, dan@MC.LCS.MIT.EDU, danny%hugo@israel.CSNet,
    dpw@ASTRO.UTEXAS.EDU, dsc%lumiere%tektronix.csnet@CSNET-RELAY.ARPA,
    ellenberger%louie.DEC@DECWRL.DEC.COM, fletcher@SALLY.UTEXAS.EDU,
    fujiura%smurf.DEC@DECWRL.DEC.COM, furuta@MIMSY.UMD.EDU, gerovac%eubie.DEC@DECWRL.DEC.COM,
    ggr@btl.CSNet, harrison@UCBVAX.BERKELEY.EDU, hinman@XX.LCS.MIT.EDU,
    hitchens@SALLY.UTEXAS.EDU, jeff%mcnc.csnet@CSNET-RELAY.ARPA, jimb%crl%tektronix@CSNET-RELAY.ARPA,
    jsc@UCBVAX.BERKELEY.EDU, keithe%tek.csnet@CSNET-RELAY.ARPA, kerr@LOGNET2.ARPA,
    knutson@NGP.UTEXAS.EDU, lej@SRI-KL.ARPA, mattern%uklirb.UUCP%germany.csnet@CSNET-RELAY.ARPA,
    mccrudden%cipher.DEC@DECWRL.DEC.COM, mkb@ROVER.RI.CMU.EDU, mly@MC.LCS.MIT.EDU,
    noah@IBM-SJ.ARPA, page%ulowell.csnet@CSNET-RELAY.ARPA, phc@RENOIR.BERKELEY.EDU,
    r-scott@A.SEI.CMU.EDU, rex@USGS2-MULTICS.ARPA, rex@USGS3-VMS.ARPA,
    rhott@NSWC-G.ARPA, ricks%ic.berkeley@UCBVAX.BERKELEY.EDU, robinson%holst.DEC@DECWRL.DEC.COM,
    saj@MIT-PREP.ARPA, schmiede@NADC.ARPA, scott@ETL-AI.ARPA, shm@AERO2.ARPA,
    shulman@BBN-SPCA.ARPA, sundar@MIT-HERMES.ARPA, sutter@OHIO-STATE.ARPA,
    sxs%a@LANL.ARPA, tappan@BBNA.ARPA, tony@ATHENA.MIT.EDU, verdeyen%clio.soh.UIUC.EDU@A.CS.UIUC.EDU,
    wilkes@HPLABS.ARPA, wm%tekchips%tektronix.csnet@CSNET-RELAY.ARPA,
    wortman@toronto.CSNet, wvh@GAUSS.ECE.CMU.EDU, brucker@EE.UCLA.EDU,
    "*PS:<INFO-POSTSCRIPT>MAIL.INFO-PS.1"@SU-SCORE.ARPA
ReSent-Message-ID: <12193413478.12.BARCKLAY@SU-SCORE.ARPA>

rhott@NSWC-G.ARPA, ricks%ic.berkeley@UCBVAX.BERKELEY.EDU, robinson%holst.DEC@DECWRL.DEC.COM,
    saj@MIT-PREP.ARPA, schmiede@NADC.ARPA, scott@ETL-AI.ARPA, shm@AERO2.ARPA,
    shulman@BBN-SPCA.ARPA, sundar@MIT-HERMES.ARPA, sutter@OHIO-STATE.ARPA,
    sxs%a@LANL.ARPA, tappan@BBNA.ARPA, tony@ATHENA.MIT.EDU, verdeyen%clio.soh.UIUC.EDU@A.CS.UIUC.EDU,
    wilkes@HPLABS.ARPA, wm%tekchips%tektronix.csnet@CSNET-RELAY.ARPA,
    wortman@toronto.CSNet, wvh@GAUSS.ECE.CMU.EDU, brucker@EE.UCLA.EDU,
    "*PS:<INFO-POSTSCRIPT>MAIL.INFO-PS.1"@SU-SCORE.ARPA
ReSent-Message-ID: <12193413478.12.BARCKLAY@SU-SCORE.ARPA>

26-Mar-86 11:16:55-PST,1010;000000000000
Return-Path: <tony@ATHENA.MIT.EDU>
Received: from ATHENA by SU-SCORE.ARPA with TCP; Tue 25 Mar 86 15:30:58-PST
Received: by ATHENA (5.45/4.7)
	id AA21424; Tue, 25 Mar 86 17:40:57 EST
Received: by ORPHEUS (5.15/4.7)
	id AA19048; Tue, 25 Mar 86 17:41:59 EST
Message-Id: <8603252241.AA19048@ORPHEUS>
To: info-postscript@su-score.arpa
Subject: Data compression...
Date: Tue, 25 Mar 86 17:41:54 -0500
From: Tony Della Fera <tony@ATHENA.MIT.EDU>
ReSent-Date: Wed 26 Mar 86 11:16:55-PST
ReSent-From: Bob Barcklay <BARCKLAY@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12193838769.24.BARCKLAY@SU-SCORE.ARPA>


	Has   anyone   done  any  work  in  PostScript  involving  the
compression of raster image data (color or B&W) with an algorithm like
say, the Lempel-Ziv algorithm (IEEE Computer Vol 17, No 6, June 1984)?
I want to decompress  raster  image  data  inside  the  printer  (with
PostScript) after compressing it as it is read out of a frame buffer.


						Tony...
26-Mar-86 21:25:26-PST,1022;000000000001
Return-Path: <tony@ATHENA.MIT.EDU>
Received: from ATHENA by SU-SCORE.ARPA with TCP; Wed 26 Mar 86 08:49:40-PST
Received: by ATHENA (5.45/4.7)
	id AA25768; Wed, 26 Mar 86 11:48:01 EST
Received: by ORPHEUS (5.15/4.7)
	id AA28802; Wed, 26 Mar 86 11:49:05 EST
Message-Id: <8603261649.AA28802@ORPHEUS>
To: info-postscript@su-score.arpa
Subject: 4.3 BSD lpr bug and TranScript...
Date: Wed, 26 Mar 86 11:49:03 -0500
From: Tony Della Fera <tony@ATHENA.MIT.EDU>
ReSent-Date: Wed 26 Mar 86 21:25:26-PST
ReSent-From: Bob Barcklay <BARCKLAY@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12193949546.18.BARCKLAY@SU-SCORE.ARPA>


	Incase anyone else has wasted any time on this:

	There  is  bug  in  the 4.3 BSD lpr/lpd software that prevents
TranScript from doing proper printer logging.  This problem  is  fixed
by  one of the more recent 4.3 patches from Berkeley.   If you install
the Berkeley patches in /usr/src/usr.lib/lpr  everything  should  work
properly.

						Tony...
						
31-Mar-86 09:51:49-PST,2781;000000000000
Return-Path: <GFOSTER@USC-ISI.ARPA>
Received: from USC-ISI.ARPA by SU-SCORE.ARPA with TCP; Sat 29 Mar 86 14:30:30-PST
Date: 29 Mar 1986 17:26:26 EST
Subject: PS program to see glyph widths
From: Glen Foster <GFoster@USC-ISI.ARPA>
To: info-postscript@SU-SCORE.ARPA
ReSent-Date: Mon 31 Mar 86 09:51:49-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12195133999.13.REULING@SU-SCORE.ARPA>


The following is a PS program, kindly provided by Ann Robinson of Adobe,
that prints all encoded members of a font.  She says that she will be 
providing a similar program that also shows un-encoded members.  I haven't
had a chance to run it yet so I don't know about format etc.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

/Fontname (Times-Roman) def               % change this to get other fonts
/in {72 mul} def
/y 10 in def
/lm .9 in def
/ptsize 10 def                                       % size to print in
/cr {/y y ptsize sub def                             % move down column -- at 
     y 1 in le {/y 10 in def /lm lm 1.8 in add def} if  % bottom, go to next 
     lm y moveto
    } def                                            % column

/showwidth
   {dup cvn findfont                                 % get font dictionary 
    dup /fn exch def                                 % save in /fn
    1 scalefont /sfn exch def                     % get size X 1000
    /pfn fn ptsize scalefont def                     % scale for printing
    fn /Encoding get /enc exch def                   % get encoding vector
    /schar 4 string def                              % string for character
    /ssize 5 string def                              % string for size
    /tab1 {lm .3 in add y moveto} def
    /tab2 {lm .6 in add y moveto} def
    pfn setfont 
    gsave 3.5 in 10.4 in moveto
     2 2 scale show grestore               % print name at 2 x print size
    lm y moveto                                      % top of page
    32 1 255                                         % go thru all ascii chars
        {/i exch def sfn setfont enc i get           % get encoding
               /.notdef ne                         % dont print if undefined
                {( ) dup 0 i put                   % put ascii val into string
                  dup stringwidth pop              % save copy and get width
                  1000.0 mul cvi ssize cvs            % put width in string
                  pfn setfont
                  i schar cvs show                      % show ascii value
                  tab1 exch show tab2 show             % show char and width
                  cr} 
                 if } for
      showpage} def

Fontname showwidth

-------
 5-Apr-86 13:20:56-PST,4132;000000000000
Return-Path: <adobe!taft@decwrl.DEC.COM>
Received: from decwrl.DEC.COM by SU-SCORE.ARPA with TCP; Fri 4 Apr 86 18:19:19-PST
Received: by decwrl.DEC.COM (4.22.03/4.7.34)
	id AA28576; Fri, 4 Apr 86 14:46:43 pst
Received: by adobe.UUCP (4.12/4.7)
	id AA04891; Fri, 4 Apr 86 14:42:59 pst
From: adobe!taft@decwrl.DEC.COM (Ed Taft)
Message-Id: <8604042242.AA04891@adobe.UUCP>
Date:  4 Apr 1986 1442-PST (Friday)
To: Info-PostScript@SU-Score.ARPA
Cc: taft@decwrl.DEC.COM
Subject: improved LaserWriter serial I/O patch
ReSent-Date: Sat 5 Apr 86 13:20:56-PST
ReSent-From: Bob Barcklay <BARCKLAY@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12196482786.8.BARCKLAY@SU-SCORE.ARPA>

Several months ago, I circulated a downloadable program that corrects
several known problems in the LaserWriter's serial I/O handler.
Unfortunately, the patch did not completely fix one of the problems.
This message contains a revised patch that works better.

The problems corrected by the patch are:

  - occasional failure to send a needed XON after XOFF;
  - erroneously reading past end-of-file under some circumstances;
  - lost or garbled characters in serial output to the host.

The patch applies only to the original LaserWriter (PostScript version
23.0) and not to any other PostScript printer; it affects serial
communication only (not AppleTalk). To install the patch, first edit
the program if necessary to change the system administrator password;
then send it as a separate job to the printer. Once installed, the
patch persists until the printer is next turned off.

	Ed Taft
	Adobe Systems, Inc.

---------- cut here ----------
%! 
0000000000			% the exitserver password

version (23.0) ne
   {(Patch not installed -- wrong printer type or version) = stop} if
statusdict /Patch1Installed known
   {(Patch already installed -- not installed again) = stop} if
serverdict begin exitserver
statusdict /Patch1Installed true put
currentfile eexec
c3c703843e75cc772962e3a7fadee742bb1258167ac7020cbc1cdfd379c35f53
da38afaed75c86541fde979ff594180fe542991f2199c8614247e4a1e3e5ecff
8bc3844d36e2d091e9f649518473592b44be262c7a2929ac4a9acd626bd3c441
e2aae320e60b2c21e02bc9c4f3cde0d5eca674f5b0bbff3ee860a7cd2e4e9f7b
9eed9b1286e5a9b9b0fdf8e73951152837a16a6913e477cc8a4f3cebbf2e78e8
fe5b0f92d45a274e75df31e5182cd81dce61bc53bdb8685f0a7ce24c0b8440f7
67b7fd750bb998fc775415b1c7b8502ea7c744ccb807635f7244d3fdd6ebd01f
634c9f3241fddc1a95d62bfb710a9ea6831ec6e1792f60503f077868e860dc3a
518d8ac29dc625ec65157889cd1f943a37eb55ef0e44c3a4776a481f1dd10cda
79b3db9907295c0ab9e3142df3ef0840b07f29d67c4f8aba333c9cc6e9f57d3f
47083e0bd9e85151ef158308a7d991b02ddcf47bffe6fed2f8e342dd7d2f81ca
80bb689bd0cb5af2a471b5577a4f8dbdfd2b0fcd0267bfa4dc6038bc235d3d8b
35469a680b41dc95e6a1d48ba543d291575d72475ef512492547629c4db741b8
68705f01282c230e1570cea8daea989707e99dce1d11d561256bd24608a66945
2042384aadfcc25cb0167b5896b1a13092d0a7c4ce1343e30834de5d5df345b9
ccb742acf36f7d3a9b43361cf5a9e0121fec84ba8b6c06312a71600ab9783ddc
59b8cb4da03019e82690df5cb2aefd9026aed30efb24b19e5405410685eb35b3
b25cf8ba535156ee600749abf2e3c572313c62dcd9492ca3abcfe7ee8fd40410
902f417c82908b412c9a826206f4292ab5196013a5f3615661cf81fc60b36a84
f457c2adb1a0c1c19f089d170de47d6933ce247d44865035caa1a6d4a2f6986f
9856de5f3d05a5a1020bce9768df8e8aab928b90029dfc2bbb715e19b5e7bc3e
11f05c1dad24849f8aadb7867f9d92f4400a432cdd6587057c582dc25fbeadde
f75121202e2a90dc6a4491ae9ee2b39c5fab5071a2f415d4a3cf8357fff771d8
790cc5788d506086c5a07ddbc2997f3abe28972cd40275c0117c77f479fd0b74
53a0bfcd82f30d1eb3c35fc914657d6f484bf3be81c54238267ccc2a19ec42a3
1336014c6446b12e3fe7746b658f829c52173a78e456ad78c2d65a3209949a5a
735d3795579151ee0102773c204134e8563b011a90c7cf0622058081c60b4d5d
6a146eb610c92e2e9c05f7ca40a1375e7c397def7f0d6a4c65e22728ae30adc2
b1b088339a7e7ab8f2dc6a3b5abd1318663cc5d3c37edd57f8ace64a565d1775
6e5a1268986105c918547306e0bf12d128220771e074323746ac15c52ef16e95
c0e62a0746b7c202a2e2aba2060cd64d5f656dbeb1fa837734d4a23093ddb312
537c0a6f8e224e5aa6cd22f1740e3611550b85d1a447c58ca8
---------- cut here ----------


12-Apr-86 13:08:31-PST,1810;000000000000
Return-Path: <km%emory.csnet@CSNET-RELAY.ARPA>
Received: from CSNET-RELAY.ARPA by SU-SCORE.ARPA with TCP; Mon 7 Apr 86 14:24:39-PST
Received: from emory by csnet-relay.csnet id aa03768; 7 Apr 86 17:13 EST
Received: by emory.eu (4.12/5.6)
	id AA03869; Mon, 7 Apr 86 01:33:13 est
Date: Mon, 7 Apr 86 01:33:13 est
From: Ken Mandelberg <km%emory.csnet@CSNET-RELAY.ARPA>
To: info-postscript@su-score.ARPA
Subject: Bit Smoothing on Apple Laserwriter?
ReSent-Date: Sat 12 Apr 86 13:08:31-PST
ReSent-From: Bob Barcklay <BARCKLAY@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12198315534.15.BARCKLAY@SU-SCORE.ARPA>

I know this a topic that has been discussed before, but I don't think I
have heard a definitive answer.

I would like to take the postscript output generated by a Mac including
output with bitmaps (say from macpaint) and print them on an Apple
Laserwriter not attached to Appletalk.  I currently have a postscript
header that can be prepended to Mac-generated postscript output, and
provides the necessary quickdraw definitions. It works on everything
except the bitmaps.

Apparently the reason for this is that Apple considers its bit
smoothing algorithm for printing bitmaps on the laserwriter
proprietary, and on Appletalk the Mac actualy downloads some 68000
machine code to do the work.

What seems to be needed is a header with this code that can be
downloaded from the RS-232, with the other quickdraw definitions.
Failing this, I guess a substitute postscript routine to approximate it
would probably do.

Has anyone worked this out?


Ken Mandelberg
Emory University
Dept of Math and CS
Atlanta, Ga 30322

{akgua,sb1,gatech,decvax}!emory!km   USENET
km@emory                      CSNET
km.emory@csnet-relay          ARPANET



12-Apr-86 13:09:27-PST,1730;000000000000
Return-Path: <RCKing.Satelite@MIT-MULTICS.ARPA>
Received: from MIT-MULTICS.ARPA by SU-SCORE.ARPA with TCP; Tue 8 Apr 86 07:56:44-PST
Date:  Tue, 8 Apr 86 10:45 EST
From:  "Roger C. King" <RCKing@MIT-MULTICS.ARPA>
Subject:  Epson Printer Emulator Wanted
To:  info-postscript@SU-SCORE.ARPA
Message-ID:  <860408154507.455845@MIT-MULTICS.ARPA>
ReSent-Date: Sat 12 Apr 86 13:09:26-PST
ReSent-From: Bob Barcklay <BARCKLAY@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12198315702.15.BARCKLAY@SU-SCORE.ARPA>

Does anyone have or know of an emulator which can run on either a PC or
the LaserWriter which will emulate the text and graphics capabilities of
an Epson (standard, now out of date, IBM Graphics) printer?  Such a
program would do a lot to ease the interface of the LaserWriter family
into the PC world.  Presumably such a program would support
'shift-PrtSc' for a graphics dump of the screen.

By the way, for people interested in portfolio management, I note that
the latest PC Week review of stock market software picked as a standout
the Isgur Portfolio system from Batteries Included which runs under GEM
and thus supports both the EGA and the LaserWriter.

Also, for users of Xywrite III, XyQuest now has available an updated PRN
file for the LaserWriter which includes the latest patch posted here
from Adobe, and works well for large documents using either XONXOFF.COM
or AST's SuperSpool.  For people interested in a more 'obscure' PRN file
implementation for the LaserWriter (not the LaserWriter Plus) which has
different capabilities than the XyQuest product, I would be happy to
supply my implementation directly.

Roger King
MIT Lincoln Laboratory
Lexington, MA
12-Apr-86 13:10:14-PST,5287;000000000000
Return-Path: <egisin%waterloo.csnet@CSNET-RELAY.ARPA>
Received: from CSNET-RELAY.ARPA by SU-SCORE.ARPA with TCP; Thu 10 Apr 86 14:58:30-PST
Received: from waterloo by csnet-relay.csnet id a019026; 10 Apr 86 17:29 EST
Received: by watmath; Thu, 10 Apr 86 17:13:25 est
Date: Thu, 10 Apr 86 17:13:25 est
From: Eric Gisin <egisin%waterloo.csnet@CSNET-RELAY.ARPA>
To: info-postscript@su-score.ARPA
Subject: C program to convert text files to PostScript
ReSent-Date: Sat 12 Apr 86 13:10:14-PST
ReSent-From: Bob Barcklay <BARCKLAY@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12198315846.15.BARCKLAY@SU-SCORE.ARPA>

This program is short and very useful so I'm mailing it to info-postscript.

: This is a shar archive.	Extract with sh, not csh.
: The rest of this file will extract:
: Read_me text_ps.1 text_ps.c prapple.com
echo Extracting Read_me
sed 's/^X//' > Read_me << 'e-o-f'
Xtext_ps converts text files to PostScript on stdout.
XIt has been tested on Unix 4.2 and VMS V4.
X
Xtext_ps.c: C source
Xtext_ps.1: Unix man page
Xprapple.com: command file for VMS to run text_ps and print the output
X
XOur Unix lpr/lpd is locally modified
Xso I'm not including any printcap stuff or input filters.
X
X	Eric Gisin, egisin@waterloo.csnet, egisin@watarts.bitnet
X
e-o-f
echo Extracting text_ps.1
sed 's/^X//' > text_ps.1 << 'e-o-f'
X.TH TEXT_PS 1
X.SH NAME
Xtext_ps \- convert text to PostScript
X.SH SYNOPSIS
X\fBtext_ps\fP [\fB-w\fP] [file ...]
X.SH DESCRIPTION
X\fIText_ps\fP converts text files to PostScript on the standard output.
XIf no files are given, text_ps reads from the standard input.
XThe \fB-w\fP flag rotates and compresses the page allowing 132 columns.
X.PP
XAt Waterloo, \fItext_ps\fP is called as a prefilter
Xwhen using \fIlpr\fP to a PostScript printer and the default format.
XIf you send \fItext_ps\fP output to \fIlpr\fP, use the \fB-Fl\fP flag.
X.SH BUGS
XOnly the final character is output when several characters are overstuck with backspace.
X.SH SEE ALSO
Xprinters(i)
X.SH AUTHOR
XEric Gisin (egisin@waterloo.csnet)
e-o-f
echo Extracting text_ps.c
sed 's/^X//' > text_ps.c << 'e-o-f'
X/*
X * text-ps: convert text files to PostScript
X *
X *	Copyright (c) 1986, Eric Gisin, egisin@waterloo.CSNET
X *
X *	This program may be copied and redistributed, provided
X *	no fee is charged and this copyright notice is preserved.
X */
X
X#include <stdio.h>
X#include <ctype.h>
X
X#define	LLen	132
X#define	PLen	66
X
Xchar *	Head [] = {
X	"%!PS-Adobe-1.0",
X	"%%Creator: text_ps.c",
X	"%%DocumentFonts: Courier",
X	"/Courier findfont 12 scalefont setfont",
X	"/S {12 mul 780 exch sub 0 exch moveto show} def",
X	"/P+ {/Save save def M concat} def",
X	"/P- {showpage Save restore} def",
X	NULL};
Xchar *	Mdef [] = {"/M [1 0 0 1 18 0] def", "/M [0 -.727 0.727 0 21 737] def"};
X
Xint	wflag = 0;
Xint	page = 0;
X
Xmain(argc, argv)
X	char **	argv;
X{
X	int	i;
X	int	nofiles = 1;
X
X	for (i = 0; Head[i]!=NULL; i ++)
X		printf("%s\n", Head[i]);
X	for (i = 1; i < argc; i ++)
X	    if (argv[i][0]=='-')
X		switch (argv[i][1]) {
X		  case 'w':
X			wflag = !wflag;
X			break;
X		  default:
X			fprintf(stderr, "Usage: %s [-w] file ...\n", argv[0]);
X			exit(1);
X		}
X	    else {
X		FILE *	f;
X		nofiles = 0;
X		f = fopen(argv[i], "r");
X		if (f==NULL) {
X			fprintf(stderr, "%s: Can't open input %s\n", argv[0], argv[i]);
X			continue;
X		}
X		text_ps(f);
X		fclose(f);
X	    }
X	if (nofiles)
X		text_ps(stdin);
X}
X
Xtext_ps(f)
X	register FILE *	f;
X{
X	register c;
X	int	row = 0;
X	int	col = 0;
X	char	line [LLen+1];
X
X	printf("%s\n", Mdef[wflag]);
X	while (1) switch((c = getc(f))) {
X	  case EOF:
X	  case '\r':
X	  case '\n':
X	  case '\f':
X		if (c==EOF && row==0)
X			return;
X		if (row==0) {
X			page ++;
X			printf("%%%%Page: ? %d\n", page);
X			printf("P+\n");
X		}
X		if (col>0) {
X			line[(col<LLen) ? col : LLen] = '\0';
X			putstring(line);
X			printf("%d S\n", row);
X		}
X		if (c=='\n')
X			row ++;
X		if (row==PLen || c=='\f' || c==EOF) {
X			printf("P-\n");
X			row = 0;
X		}
X		if (c==EOF)
X			return;
X		col = 0;
X		break;
X	  case '\t':
X		while (col<LLen) {
X			line[col++] = ' ';
X			if (col%8 == 0) break;
X		}
X		break;
X	  case '\b':
X		if (col>0)
X			col --;
X		break;
X	  default:
X		if (col<LLen)
X			line[col++] = (isascii(c) && isprint(c)) ? c : ' ';
X	}
X}
X
Xputstring(s)
X	register char *s;
X{
X	register c;
X
X	putchar('(');
X	while ((c = *s++) != '\0') {
X		if (c=='\\' || c=='(' || c==')')
X			putchar('\\');
X		putchar(c);
X	}
X	putchar(')');
X}
X
e-o-f
echo Extracting prapple.com
sed 's/^X//' > prapple.com << 'e-o-f'
X$ ! Print text file on Apple LaserWriter
X$ !     pra*pple :== @disk$root:[local.apple.cmd]prapple
X$
X$       if P1 .eqs. "" then goto usage
X$       text_ps := $disk$root:[local.apple.cmd]text_ps
X$       define /user_mode sys$output sys$scratch:prapple.lis
X$       text_ps 'P1' 'P2' 'P3' 'P4' 'P5' 'P6' 'P7'
X$       print /queue=apple /form=postscript sys$scratch:prapple.lis /delete
X$       exit
X$ usage:
X$       write sys$error "Usage: prapple [-w] file ..."
X$       exit
e-o-f
exit 0

12-Apr-86 13:10:49-PST,2753;000000000000
Return-Path: <sdpage%SEVAX.PRG.OXFORD.AC.UK%SEVAX.PRG.OXFORD.AC.UK@Cs.Ucl.AC.UK>
Received: from Cs (CS.UCL.AC.UK.#Internet) by SU-SCORE.ARPA with TCP; Sat 12 Apr 86 05:01:57-PST
Received: from sevax.prg.oxford.ac.uk by 44d.Cs.Ucl.AC.UK   via Janet with NIFTP
           id a001231; 11 Apr 86 17:36 BST
Via:        UK.AC.OXFORD.PRG.SEVAX    ; Fri, 11 Apr 86 16:17:01 GMT
Date:    Fri, 11 Apr 86 16:17:01 GMT
From: Stephen Page <sdpage%sevax.prg.oxford.ac.uk@cs.ucl.ac.uk>
Message-Id: <8604111617.AA09465@UK.AC.OXFORD.PRG.SEVAX (4.12/prgv.15)>
Acknowledge-To: sdpage@UK.AC.OXFORD.PRG.SEVAX
To: WorkS <@cs.ucl.ac.uk,@cs.ucl.ac.uk:WorkS@red.rutgers.edu>, 
    editor-people <@cs.ucl.ac.uk,@cs.ucl.ac.uk:editor-people@su-score.arpa>, 
    human-nets <@cs.ucl.ac.uk,@cs.ucl.ac.uk:human-nets@red.rutgers.edu>, 
    info-ibmpc <@cs.ucl.ac.uk,@cs.ucl.ac.uk:info-ibmpc@usc-isib.arpa>, 
    info-micro <@cs.ucl.ac.uk,@cs.ucl.ac.uk:info-micro@brl.arpa>, 
    info-postscript <@cs.ucl.ac.uk,@cs.ucl.ac.uk:info-postscript@su-score.arpa>, 
    laser-lovers <@cs.ucl.ac.uk,@cs.ucl.ac.uk:laser-lovers@washington.arpa>
Subject: Information request: WP specfications
ReSent-Date: Sat 12 Apr 86 13:10:49-PST
ReSent-From: Bob Barcklay <BARCKLAY@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12198315954.15.BARCKLAY@SU-SCORE.ARPA>

                           Request for information
                 SPECIFICATIONS FOR WORD PROCESSING SOFTWARE

The University of Oxford is developing a co-ordinated policy to guide future
purchases of workstations and personal computers. As part of the policy
we will be specifying minimum standards for word processing software
which will be supplied with and used on these machines.

The software will have two major functions:
     - to act as standalone document preparation software, handling all aspects
       from text entry to production of the final copy on a local printer;
     - to allow the user to enter and edit text which will be transmitted
       from the workstation for remote processing or typesetting.

Our specification includes sections on text preparation facilities, document
production facilities, and output file formats. We are interested in pursuing
markup languages and postprocessors as well as the more common word processing
software packages. We are particularly interested in foreign-language and
scientific capabilities.

We would be interested to hear from others who have drawn up similar
specifications or who may have information which might be of assistance.

Please mail to    sdpage%oxford.prg@ucl-cs.arpa
or write to       Stephen Page, Programming Research Group,
                  8-11 Keble Road, Oxford   OX1 3QD,  U.K.


16-Apr-86 09:10:29-PST,1581;000000000000
Return-Path: <MARC%OZ.AI.MIT.EDU@MC.LCS.MIT.EDU>
Received: from OZ.AI.MIT.EDU (MC.LCS.MIT.EDU.#Internet) by SU-SCORE.ARPA with TCP; Sat 12 Apr 86 15:23:45-PST
Date: Sat, 12 Apr 1986  18:24 EST
Message-ID: <MARC.12198340295.BABYL@MIT-OZ>
From: MARC%OZ.AI.MIT.EDU@XX.LCS.MIT.EDU
Subject: Bit Smoothing on Apple Laserwriter?
To:   info-postscript@SU-SCORE.ARPA
In-reply-to: Msg of 7 Apr 1986  01:33-EST from Ken Mandelberg <km%emory.csnet at CSNET-RELAY.ARPA>
ReSent-Date: Wed 16 Apr 86 09:10:29-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12199320779.39.REULING@SU-SCORE.ARPA>


Ken writes:

>>I would like to take the postscript output generated by a Mac including
>>output with bitmaps (say from macpaint) and print them on an Apple
>>Laserwriter not attached to Appletalk.  I currently have a postscript
>>header that can be prepended to Mac-generated postscript output, and
>>provides the necessary quickdraw definitions. It works on everything
>>except the bitmaps.

	
	The problem is in your PostScript header. The full header (I use 
one that was edited by Alan Crosswell,  Columbia U., available from the
info-mac archives) contains an encrypted segment at the end of it that 
contains the PostScript definitions for bit-smoothing. Note that this 
encrypted data contains additional PostScript code only, and that there is
no mechanism whereby PostScript can accept any sort of machine code. This
scheme is also used by Adobe in their implementation of downloadable fonts. 

--Marc
16-Apr-86 09:48:11-PST,3979;000000000000
Mail-From: REULING created at 16-Apr-86 09:47:23
Return-Path: <hitchens@uo.cs.UTEXAS.EDU>
Received: from im4u.UTEXAS.EDU ([128.83.138.9].#Internet) by SU-SCORE.ARPA with TCP; Sat 12 Apr 86 18:28:50-PST
Date: Sat, 12 Apr 86 20:25:06 cst
Posted-Date: Sat, 12 Apr 86 20:25:06 cst
Message-Id: <8604130225.AA22382@im4u.UTEXAS.EDU>
Received: from uo.cs.utexas.edu by im4u.UTEXAS.EDU (4.22/4.22)
	id AA22382; Sat, 12 Apr 86 20:25:07 cst
Received: by uo.cs.utexas.edu (LucasFilm/UT SM); Sat, 12 Apr 86 20:24:51 CST
From: hitchens@uo.cs.UTEXAS.EDU (Ron Hitchens, Sun Wiz)
To: info-postscript@SU-SCORE.ARPA
Cc: brian@sally.utexas.edu, km.emory@csnet-relay.arpa
Subject: Re:  Bit Smoothing on Apple Laserwriter?
ReSent-Date: Wed 16 Apr 86 09:47:22-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12199327493.39.REULING@SU-SCORE.ARPA>

  Yeah, we've done that here at UT.  It's no biggie.  What you need is
the laser-prep file which is downloaded by the Mac to prepare the LW
for receiving Mac Postscript files.  It has been posted to usenet
several times, both with and without the smoothing stuff.  The
smoothing algorithm is encoded hex, so it's opaque but it works fine.
The problem is that the hexified 68000 code is grokked by an eexec
command which reads to end-of-file, that makes it difficult to append
a Mac-prepared file to the end of it.

  The regular laser-prep file installs itself permanently in the LW so
that if you're mainly using it with a Mac it need only be downloaded
once.  Our LaserWriter is driven by a unix spooler (4.2) and is used
for ditroff and TeX mostly, only the occasional MacWrite or MacPaint
file is printed.  Laser-prep is quite large, so I didn't want it to be
continuosly resident.  I changed it to exist only for the current job
by removing the escape-from-server-loop stuff at the top and by making 
a small change to the encoded bit-smoothing data at the end.

  The end of the laser-prep file originally was something like this:

currentfile eexec
652E29AE551935C9A82086907FB876D510EC4D451220E0F80D63DBC0EA379346
(many lines of hex)
905B88019BC3EF0FF064AC6477442573C18EF7090E2C08EAA1A9

  The eexec would gooble hex digits until it hit EOF, I changed it to
look like this.

<652E29AE551935C9A82086907FB876D510EC4D451220E0F80D63DBC0EA379346
(many lines of hex)
905B88019BC3EF0FF064AC6477442573C18EF7090E2C08EAA1A9>
eexec

  All I've done here is define the large glob of hex as a string which is
pushed on the stack (by bounding it with <>).  Eexec happily uses the string
sitting on the stack rather than insisting on reading it from stdin.  What
this gains you is the ability to continue sending more Postscript following
the laser-prep which will be part of the same job.  When that job is finished
the whole shebang will be thrown away.  The penalty is that by pushing the
hex string on the stack that string space is wasted because PostScript
doesn't reclaim string space when they are popped off the stack.  It's
never caused a problem here however.

  So, to print a file prepared on a Mac, you just upload the PostScript
created by doing the CMD-P trick on the Mac.  Then concatenate the modified
laser-prep and your Mac file and feed it to lpr.  Presto, it prints just
like it would if you sent it via AppleTalk to a LaserWriter.  Here at
UT we've setup our spooler to prepend the laser-prep prolog if you spool
the Mac-generated file as a "fortran" type file (which was unused).  You
could also write a simple shell script something like this:

#!/bin/sh

cat /<somepath>/laser-prep.pro $@ | /usr/ucb/lpr -Plw

  I hope this helps.  The bit-smoothing function is very good and makes
a big difference when it's used.  

Ron Hitchens			University of Texas at Austin Computer Science
hitchens@uo.CS.UTEXAS.EDU	Ex-Text Processing Manager
ut-sally!hitchens		(What a relief.  Gimme Suns and leave me alone)

21-Apr-86 21:52:04-PST,1415;000000000000
Mail-From: BARCKLAY created at 21-Apr-86 21:51:42
Return-Path: <sunrise!awesome!jgc@SUN.COM>
Received: from sun.com by SU-SCORE.ARPA with TCP; Tue 15 Apr 86 12:14:57-PST
Received: from snail.sun.com (snail-ptp) by sun.com (3.2-/SMI-3.0)
	id AA05446; Tue, 15 Apr 86 12:11:17 PST
Received: from suntoo.sun.uucp by snail.sun.com (3.2/SMI-3.0DEV4)
	id AA12703; Tue, 15 Apr 86 12:11:16 PST
Received: by suntoo.sun.uucp (3.0-/SMI-2.0)
	id AA20244; Tue, 15 Apr 86 12:12:13 PST
Received: from awesome.sunrise.uucp by sunrise.uucp (2.2/SMI-2.2)
	id AA04808; Tue, 15 Apr 86 13:39:59 est
Return-Path: <jgc@awesome>
Received: by awesome.sunrise.uucp (2.2/SMI-2.2)
	id AA22908; Tue, 15 Apr 86 13:28:46 est
Date: Tue, 15 Apr 86 13:28:46 est
From: sunrise!awesome!jgc@SUN.COM (Jim Constantine)
Message-Id: <8604151828.AA22908@awesome.sunrise.uucp>
To: info-postscript@su-score.arpa
Subject: APL Font
ReSent-Date: Mon 21 Apr 86 21:51:42-PST
ReSent-From: Bob Barcklay <BARCKLAY@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12200770072.9.BARCKLAY@SU-SCORE.ARPA>


  I need a way to print the APL character set on an LaserWriter ?

  Does anyone have such a font ?    Is there any easy way to generate one ?

  I have a Berkeley vfont format APL font, but that is probably of little use
  on a postscript device, or can these be downloaded to the postscript
  printer.

  --Jim

22-Apr-86 16:59:44-PST,1220;000000000000
Mail-From: REULING created at 22-Apr-86 16:59:00
Return-Path: <MartinRR%multics.cardiff.ac.uk@Cs.Ucl.AC.UK>
Received: from Cs (CS.UCL.AC.UK.#Internet) by SU-SCORE.ARPA with TCP; Fri 18 Apr 86 03:20:05-PST
Received: from multics.cardiff.ac.uk by 44d.Cs.Ucl.AC.UK   via Janet with NIFTP
           id a004990; 18 Apr 86 9:56 BST
Date:  Fri, 18 Apr 86 09:21+0100
From:  Ralph <MartinRR%multics.cardiff.ac.uk@cs.ucl.ac.uk>
Subject:  Inconsistency in Appendix C of the PostScript manual
To:  @cs.ucl.ac.uk,@cs.ucl.ac.uk:info-postscript@su-score.arpa
MMDF-Warning:  Parse error in preceding line at 44d.Cs.Ucl.AC.UK
Message-ID:  <860418082125.944788@UK.AC.CARDIFF.MULTICS>
ReSent-Date: Tue 22 Apr 86 16:58:58-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12200978927.11.REULING@SU-SCORE.ARPA>

The structuring conventions say that
a minimally conforming program should a least contain a line
%%DocumentFonts: font1 font2 ...
And it also says that 
the keyword must be followed by one or more values...

Please, what am I supposed to do when my output is purely pictorial,
with no text in it at all. The above rules are inconsistent!

Ralph

22-Apr-86 17:00:49-PST,8155;000000000000
Mail-From: REULING created at 22-Apr-86 16:59:19
Return-Path: <cbosgd!nomad!ggr@seismo.CSS.GOV>
Received: from seismo.CSS.GOV by SU-SCORE.ARPA with TCP; Sun 20 Apr 86 08:50:39-PST
Return-Path: <cbosgd!nomad!ggr>
Received: from cbosgd.UUCP by seismo.CSS.GOV with UUCP; Sun, 20 Apr 86 11:38:08 EST
Received: from lc/lot/nomad.DK 
	by cbosgd.ATT.COM (4.12/UUCP-Project/11.09.85)
	id AA17317; Sat, 19 Apr 86 12:22:03 est
Date: 19 Apr 86 12:23:32 EST (Sat)
From: nomad!ggr@seismo.CSS.GOV (Guy Riddle)
Subject: herps: A Program to Convert Hershey Font Data to PostScript
Message-Id: <8604191723.AA09222@lc/lot/nomad.DK>
Received: by lc/lot/nomad.DK; 8604191723
Telephone: +1 201 580 4168
To: info-postscript@su-score.arpa
Cc: laser-lovers@washington.arpa
ReSent-Date: Tue 22 Apr 86 16:59:17-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12200978985.11.REULING@SU-SCORE.ARPA>

: Open attached package to find Free ReadMe file enclosed.
#! /bin/sh
# This is a shell archive, meaning:
# 1. Remove everything above the #! /bin/sh line.
# 2. Save the resulting text in a file.
# 3. Execute the file with /bin/sh (not csh) to create the files:
#	ReadMe
#	Makefile
#	herps.c
#	pagefinish.ps
#	pagestart.ps
#	prolog.ps
#	trailer.ps
# This archive created: Thu Apr 17 15:56:07 1986
export PATH; PATH=/bin:$PATH
if test -f 'ReadMe'
then
	echo shar: will not over-write existing file "'ReadMe'"
else
cat << \SHAR_EOF > 'ReadMe'
This program will take the Hershey Font files in the format recently
posted to USENET and converts them to a PostScript language stream
that will print sampler pages when shipped to a PostScript printer.

It won't generate anything suitable for consumption by troff, but it
gives you a starting point.

Usage:
	cat hersh.o?? ^ herps ^ lp -dPostScript

	(or "lpr something" on Berkeley UNIX) 

Notes:
	1.  The fonts look better than I expected, and certainly scale
	better than other bit-mapped fonts I've played with.  I'm particularly
	fond of the two Grade-School Script fonts and think a memo written
	using them might really impress a Vice President.

	2.  I set the baseline as if all characters were the large ("regular")
	size.  If you really want to use the smaller characters instead of
	scaling the larger ones to the right size, you'll have to tweak this.

	3.  I generated all characters with the same pen width, you might
	experiment with modifying that, too.

	4.  The program is lazy, takes no arguments, gives no usage message,
	and may be used only as a filter.  Sorry.

Author:
	Guy Riddle
	AT&T Bell Laboratories
	184 Liberty Corner Road
	Liberty Corner, NJ  07938

	<ihnp4!nomad!ggr> or <ggr@btl.csnet>
SHAR_EOF
fi # end of overwriting check
if test -f 'Makefile'
then
	echo shar: will not over-write existing file "'Makefile'"
else
cat << \SHAR_EOF > 'Makefile'
herps:		herps.o
		cc -o herps herps.o
herps.o:	prolog.h pagestart.h pagefinish.h trailer.h

.SUFFIXES: 	.ps
.ps.h:
		sed -e 's/.*/"&",/' $*.ps >$*.h
SHAR_EOF
fi # end of overwriting check
if test -f 'herps.c'
then
	echo shar: will not over-write existing file "'herps.c'"
else
cat << \SHAR_EOF > 'herps.c'
#include <stdio.h>

/*
 *	herps -- Convert Hershey Fonts to PostScript
 *
 * The output is a series of sample pages suitable for printing
 * on your Apple LaserWriter or other PostScript printer.  It doesn't
 * attempt to give you what to need to get something useful out of troff
 * or another formatter -- this is left as an exercise to the reader.
 *
 * Usage:
 *
 *	cat hersh.oc? ^ herps ^ lp -dPostScript
 *
 * Author:
 *
 *	Guy Riddle
 *	AT&T Bell Laboratories
 *
 *	<ihnp4!nomad!ggr> or <ggr@btl.csnet>
 */

	char	glyphnum[6], glyphlength[4];

	int	gcount, page;

	char	*prolog[] = {
#include "prolog.h"
		0
	};
	char	*pagestart[] = {
#include "pagestart.h"
		0
	};
	char	*pagefinish[] = {
#include "pagefinish.h"
		0
	};
	char	*trailer[] = {
#include "trailer.h"
		0
	};

main()
{
	squirt(prolog);

	while(fread(glyphnum, 1, sizeof(glyphnum)-1, stdin) == (sizeof(glyphnum)-1))
		glyph(atoi(glyphnum));

	finishpage();
	squirt(trailer);
	printf("%%%%Pages: %d\n", page);

	exit(0);
}

glyph(gnum)
{
	int	c, glen, xl, xr;

	if(gcount == 64){
		finishpage();
		gcount = 0;
	}
	if(gcount == 0)
		startpage();

	fread(glyphlength, 1, sizeof(glyphlength)-1, stdin);

	glen = atoi(glyphlength)*2 - 2;

	xl = getchar() - 'R';
	xr = getchar() - 'R';

	printf("/%d [%d %d %d\n(", gcount, gnum, xl, xr);

	while(--glen >= 0)
		switch(c = getchar()){
		case '\n':
			glen++;
			break;

		case ' ':
			putchar(c);
			(void) getchar();
			glen--;
			break;

		case '\\':
		case '(':
		case ')':
			putchar('\\');
		default:
			putchar(c);
		}

	printf(")\n] def\n");

	if(getchar() != '\n'){
		fprintf(stderr, "herps: Input format botch\n");
		exit(65);
	}
	if((c = getchar()) != '\n')
		ungetc(c, stdin);

	gcount++;
}

startpage()
{
	printf("%%%%Page: %d\n", ++page);

	squirt(pagestart);
}

finishpage()
{
	squirt(pagefinish);

	printf("%d HersheyPage\n", gcount);
}

squirt(stuff)
	char	**stuff;
{
	char	*p;

	while(p = *stuff++)
		printf("%s\n", p);
}
SHAR_EOF
fi # end of overwriting check
if test -f 'pagefinish.ps'
then
	echo shar: will not over-write existing file "'pagefinish.ps'"
else
cat << \SHAR_EOF > 'pagefinish.ps'
end
/FontBBox [-10 -10 30 30] def
end /Hershey exch definefont
SHAR_EOF
fi # end of overwriting check
if test -f 'pagestart.ps'
then
	echo shar: will not over-write existing file "'pagestart.ps'"
else
cat << \SHAR_EOF > 'pagestart.ps'
save
9 dict dup begin
	/FontType 3 def
	/FontMatrix [1 33 div 0 0 1 33 div 0 0] def

	/Encoding 64 array def 0 1 63 {Encoding exch dup charname put} for
	/BuildChar {10 dict begin BuildHershey end} def

	/CharData 64 dict def CharData begin
SHAR_EOF
fi # end of overwriting check
if test -f 'prolog.ps'
then
	echo shar: will not over-write existing file "'prolog.ps'"
else
cat << \SHAR_EOF > 'prolog.ps'
%!PS-Adobe-1.0
%%Title: Hershey Font Sample Pages
%%Creator: Program by Guy Riddle <ggr@BTL.CSNET>
%%Pages: (atend)
%%EndComments

/inch {72 mul} def
/xdef {exch def} def

/HersheyPage {
	1 sub /maxchar xdef

	30 scalefont /font-h xdef

	0 1 maxchar {
		/charnum xdef

		gsave
		charnum hplace
		font-h /CharData get charnum charname get /chardata xdef

		font-c setfont
		.3 inch .1 inch moveto
		chardata 0 get (????) cvs show

		.3 inch .2 inch moveto .3 inch .8 inch lineto
		.2 inch .3 inch moveto .8 inch .3 inch lineto
		0 setlinewidth stroke

		font-h setfont
		.3 inch .3 inch moveto
		(?) dup 0 charnum put show

		grestore
	} for

	font-r setfont
	.5 inch .9 inch moveto
	(Size 12: ) show

	/Hershey findfont 12 scalefont setfont
	all-64 0 maxchar 1 add getinterval show

	showpage
	restore
} def

/charname {
	(???) cvs cvn
} def

/hplace {
	dup
	8 mod /xc xdef
	8 idiv /yc xdef

	xc 0.45 add inch
	7 yc sub 2.00 add inch translate
} def

/BuildHershey {
	/charcode xdef
	/CharData get charcode charname get /cd xdef

	cd 2 get cd 1 get sub 0 -10 -20 50 60 setcachedevice

	/domove true def
	/isx true def

	cd 3 get {
		isx {
			dup 32 eq {
				pop
				/domove true def
			} {
				82 sub cd 1 get sub
				/isx false def
			} ifelse
		} {
			neg 91 add
			domove {
				moveto
				/domove false def
			} {
				lineto
			} ifelse

			/isx true def
		} ifelse
	} forall

	1 setmiterlimit 1 setlinejoin 1 setlinecap 1 setlinewidth stroke
} def

/Courier findfont 7 scalefont /font-c xdef
/Times-Roman findfont 12 scalefont /font-r xdef

64 string dup 0 1 63 {dup put dup} for pop /all-64 xdef

%%EndProlog
SHAR_EOF
fi # end of overwriting check
if test -f 'trailer.ps'
then
	echo shar: will not over-write existing file "'trailer.ps'"
else
cat << \SHAR_EOF > 'trailer.ps'
%%Trailer
SHAR_EOF
fi # end of overwriting check
#	End of shell archive
exit 0
22-Apr-86 17:01:58-PST,1574;000000000000
Mail-From: REULING created at 22-Apr-86 16:59:55
Return-Path: <allegra!phri!roy@seismo.CSS.GOV>
Received: from seismo.CSS.GOV by SU-SCORE.ARPA with TCP; Tue 22 Apr 86 05:55:43-PST
Return-Path: <allegra!phri!roy>
Received: from allegra.UUCP by seismo.CSS.GOV with UUCP; Tue, 22 Apr 86 07:51:17 EST
Received: by phri.UUCP (4.12/4.7)
	id AA23084; Mon, 21 Apr 86 13:09:50 est
Date: Mon, 21 Apr 86 13:09:50 est
From: allegra!phri!roy@seismo.CSS.GOV (Roy Smith)
Message-Id: <8604211809.AA23084@phri.UUCP>
To: allegra!seismo!su-score.arpa!info-postscript@seismo.CSS.GOV
Subject: Upgrading an Apple LaserWriter to LaserWriter Plus
ReSent-Date: Tue 22 Apr 86 16:59:55-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12200979098.11.REULING@SU-SCORE.ARPA>

	Does anybody know what is involved in upgrading an Apple
LaserWriter to a LaserWriter Plus?  From the "PostScript Language Update
for the Apple LaserWriter and LaserWriter Plus" from Adobe, it looks
like the only difference is a new ROM.  My local Apple dealer says the
upgrade is $799 and consists of a new PC board.  So far, I havn't been
able to even get a phone number of somebody to talk to at Apple who
might really know what the story is.

	Once (if) we get the upgrade, what do we have to do to make
TransScript know about the new fonts?  Do we just need new AFM files?
If so, how much do they cost?

Roy Smith, {allegra,philabs}!phri!roy
System Administrator, Public Health Research Institute
455 First Avenue, New York, NY 10016
22-Apr-86 17:02:57-PST,7826;000000000000
Mail-From: REULING created at 22-Apr-86 17:00:37
Return-Path: <adobe!greid@su-glacier.arpa>
Received: from su-glacier.arpa by SU-SCORE.ARPA with TCP; Tue 22 Apr 86 16:55:45-PST
Received: by su-glacier.arpa with Sendmail; Tue, 22 Apr 86 16:55:48 pst
Received: by adobe.UUCP (4.12/4.7)
	id AA16390; Tue, 22 Apr 86 16:50:21 pst
Message-Id: <8604230050.AA16390@adobe.UUCP>
Date: 22 Apr 1986 1650-PST (Tuesday)
To: Info-PostScript <glacier!info-postscript@SU-Score.ARPA>,
        Laser Lovers <laser-lovers@Washington.ARPA>
Subject: Quick "text-to-PS" PostScript header
Cc: Me <greid@su-glacier.arpa>
From: Glenn Reid <adobe!greid@su-glacier.arpa>
ReSent-Date: Tue 22 Apr 86 17:00:35-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: 9V
ReSent-Message-ID: <12200979222.11.REULING@SU-SCORE.ARPA>


This is a file which will allow a PostScript printer to behave like a
line printer for text files.  It is designed to be as short as possible
while maintaining great flexibility.  It works by reading from
"currentfile", and may simply be PREpended to the beginning of a text
file and shipped to the printer.
Unix(tm) example:

	prompt: cat printfile.ps textfile | lpr

There are a number of default parameters for page setup which may
easily be given alternate definitions by either prepending a short
text file or by downloading some permanenent definitions outside the
server loop of your PostScript printer (NOTE:  if you are using
TranScript(tm), make sure the included file starts with "%!").  These
include: top, left, and bottom margins, default font, point size,
leading, the capability for a header line and/or page numbering (as
well as specification of a default font and pointsize for the header
fields).  These are redefined by simply prepending lines like:

/header (printfile.ps Tue Apr 22 16:30:05 1986) def
/pagenumber false def
/fontname /Palatino-Roman def
/pointsize 12 def

I have tried to avoid complexity where possible, but it might be of use
to define a special dictionary for these parameters if they are to be
declared outside the serverloop.

NOTE:  this file MUST end with the line containing only the word
"printfile".  Everything after this line in the file will be considered
part of the DATA and will be printed on the page (include blank lines).

BUGS:  This is a very simple program.  It does not deal with tabs,
in-line font changes, or a host of other troublesome things.  You may
add whatever features you like to it.  Please mail me any
improvements you make.

Enough.  Herein follow two copies of the code, one fully commented, and
one with all unnecessary comments and whitespace stripped out (for
compactness)

---------------------- cut once -----------------------
%!-Adobe-1.0
%%Title: printfile.ps
%%Creator: Glenn Reid, Adobe Systems Incorporated
%%CreationDate: Tue Apr 22 15:35:53 1986
%%Pages: 0
%% Copyright (c) 1986 Glenn Reid and Adobe Systems Incorporated.
%% Use it, distribute it (with this message), but don't sell it.
%%
%% This program will take miscellaneous text concatenated at its
%% end and print it in some default font.  It is designed to be
%% minimal in its functionality, but flexible enough to be easily
%% adapted to other uses.

/in.	{72 mul}	def
/line	512	string def	% for input line buffering
/buff	10	string def	% for page number conversion

%% CHANGE THESE IF YOU LIKE

%% If any of these parameters are defined ahead of this file, then
%% those values will be used.  A typical way to use this is to
%% allow an application to redefine some of the parameters by
%% inserting definitions ahead of this file in the print stream.
%% Examples of redefinitions look like:
%% 
%%     /fontname /Palatino-Roman def
%%     /pointsize /13 def
%%     /header (document.ps) def
%%     /pagenumber false def
%%     /leftmargin 36 def
%% 
%% Any number (including 0) of these parameters may be defined to
%% be different from the defaults.  The defaults are quite
%% reasonable for general use, and will print in 11-point Courier
%% with a 12-point Courier-Bold header (only prints a header of
%% /header string is defined by the user).  Margins top, left and
%% bottom are: .75 in.,  .75 in., and .5 in.
%% 
%%  Otherwise, the following defaults will be used:

/leftmargin where not
    { /leftmargin .75 in. def } {pop} ifelse
/bottom where not
    { /bottom .5 in. def } {pop} ifelse
/startX where not
    { /startX leftmargin def } {pop} ifelse
/startY where not
    { /startY 10 in. def } {pop} ifelse
/fontname where not
    { /fontname /Courier def } {pop} ifelse
/pointsize where not
    { /pointsize 11 def } {pop} ifelse
/leading where not
    { /leading pointsize 2 add def } {pop} ifelse
/headerfontname where not
    { /headerfontname /Courier-Bold def } {pop} ifelse
/headerpointsize where not
    { /headerpointsize 12 def } {pop} ifelse
/headerfont
    headerfontname findfont headerpointsize scalefont
def
/page where not
    { /page 1 def } {pop} ifelse
/pagenumber where not
    { /pagenumber true def } {pop} ifelse

% This routine will print a header at the top of each page
/printheader {
    gsave
	currentdict /header known {
	    36 10.5 in. moveto
	    headerfont setfont
	    header show
	} if
	pagenumber {
	    8 in. 10.5 in. moveto
	    headerfont setfont
	    page buff cvs show
	    /page page 1 add def
	} if
    grestore
    startX startY moveto
} bind def

/crlf {
    leftmargin currentpoint exch pop	% replace X with leftmargin
    leading sub
    dup bottom le
    { pop pop showpage printheader }
    { moveto } ifelse
} bind def

/printfile {
    line readline		% read a line from the file
    {				% 'if' procedure body (+boolean)
	{			% 'while' procedure body
	    show crlf		% show what's left by readline
	    currentfile cvlit	% use as operand
	    line readline	% and read the next line
	    not {exit} if	% exit if no more input to be had
	} loop			% end of while-proc
    } if
    showpage			% when input file is exhausted
} bind def			% /printfile

fontname findfont pointsize scalefont setfont

printheader		% execute header
currentfile cvlit	% uses rest of this file as input

% everything following 'PrintFile' is treated as data, through EOF
printfile
---------------------- cut twice -----------------------
%! Adobe PasteUp Version 2.0 (35)
/in.{72
mul}def/line
512
string
def/buff
10
string
def/leftmargin
where
not{/leftmargin
.75
in.
def}{pop}ifelse/bottom
where
not{/bottom
.5
in.
def}{pop}ifelse/startX
where
not{/startX
leftmargin
def}{pop}ifelse/startY
where
not{/startY
10
in.
def}{pop}ifelse/fontname
where
not{/fontname/Courier
def}{pop}ifelse/pointsize
where
not{/pointsize
11
def}{pop}ifelse/leading
where
not{/leading
pointsize
2
add
def}{pop}ifelse/headerfontname
where
not{/headerfontname/Courier-Bold
def}{pop}ifelse/headerpointsize
where
not{/headerpointsize
12
def}{pop}ifelse/headerfont
headerfontname
findfont
headerpointsize
scalefont
def/page
where
not{/page
1
def}{pop}ifelse/pagenumber
where
not{/pagenumber
true
def}{pop}ifelse/printheader{gsave
currentdict/header
known{36
10.5
in.
moveto
headerfont
setfont
header
show}if
pagenumber{8
in.
10.5
in.
moveto
headerfont
setfont
page
buff
cvs
show/page
page
1
add
def}if
grestore
startX
startY
moveto}bind
def/crlf{leftmargin
currentpoint
exch
pop
leading
sub
dup
bottom
le{pop
pop
showpage
printheader}{moveto}ifelse}bind
def/printfile{line
readline{{show
crlf
currentfile
cvlit
line
readline
not{exit}if}loop}if
showpage}bind
def
fontname
findfont
pointsize
scalefont
setfont
printheader
currentfile
cvlit
printfile
22-Apr-86 17:12:09-PST,1412;000000000000
Mail-From: REULING created at 22-Apr-86 17:11:17
Return-Path: <CET1%PHOENIX.CAMBRIDGE.AC.UK%SERC-ICF.ENGINEERING.CAMBRIDGE.AC.UK@Cs.Ucl.AC.UK>
Received: from Cs (CS.UCL.AC.UK.#Internet) by SU-SCORE.ARPA with TCP; Tue 22 Apr 86 17:03:52-PST
Received: from serc-icf.engineering.cambridge.ac.uk by 44d.Cs.Ucl.AC.UK 
           via Janet with NIFTP  id a022077; 21 Apr 86 19:57 BST
Date: Monday, 21 April 1986 16:47:29
To: info-postscript <@cs.ucl.ac.uk,@cs.ucl.ac.uk:info-postscript@su-score.arpa>
Subject: LW bug in treatment of "syntaxerror"?
From: "Cambridge Phoenix - CAM.PHX@CAM.ENG-ICF" <CET1%phoenix.cambridge.ac.uk@cs.ucl.ac.uk>
Authentic-sender:   MAIL@CAGA
ReSent-Date: Tue 22 Apr 86 17:11:16-PST
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: 9V
ReSent-Message-ID: <12200981167.11.REULING@SU-SCORE.ARPA>

There seems to be a bug in the LaserWriter (revision 0, PostScript
version 23.0), when driven via the RS232 port, to do with "syntaxerror":
after the usual error message the input stream is not flushed. Instead
an EOT (ctrl/D) is sent immediately by the LW and it then starts to
interpret the rest of the stream as a new job. Can anyone confirm this
effect, and/or state whether it is restricted to "syntaxerror" (as it
appears to me to be), and/or indicate whether it is fixed in revision 2?
 
Chris Thompson
CET1%PHX.CAM.AC.UK@UCL-CS.ARPA

26-Apr-86 13:15:18-PST,1433;000000000000
Mail-From: BARCKLAY created at 26-Apr-86 13:14:48
Return-Path: <MartinRR%multics.cardiff.ac.uk@Cs.Ucl.AC.UK>
Received: from Cs (CS.UCL.AC.UK.#Internet) by SU-SCORE.ARPA with TCP; Thu 17 Apr 86 21:55:33-PST
Received: from multics.cardiff.ac.uk by 44d.Cs.Ucl.AC.UK   via Janet with NIFTP
           id a019114; 15 Apr 86 16:36 BST
Posted-Date:  15 Apr 86 16:35+0100
Date:  Tue, 15 Apr 86 16:34+0100
From:  Ralph <MartinRR%multics.cardiff.ac.uk@cs.ucl.ac.uk>
Subject:  sending postscript over appletalk
To:  @cs.ucl.ac.uk,@cs.ucl.ac.uk:info-postscript@su-score.arpa, 
     @cs.ucl.ac.uk,@cs.ucl.ac.uk:info-mac@sumex-aim.arpa
MMDF-Warning:  Parse error in preceding line at 44d.Cs.Ucl.AC.UK
Message-ID:  <860415153448.453096@UK.AC.CARDIFF.MULTICS>
ReSent-Date: Sat 26 Apr 86 13:14:48-PST
ReSent-From: Bob Barcklay <BARCKLAY@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12201986694.14.BARCKLAY@SU-SCORE.ARPA>

I want to be able to send arbitrary postscript files, saved as text
files on a macintosh, to a laserwriter connected via appletalk.  Does
anyone have a utility for doing this they would be willing to let me
have a .hqx file for?
 I know that PSTester does more or less this, but it has one drawback -
it can't cope with long files (I guess it tries to read them into memory
first).  I dont want to be able to fiddle about with the files, just
send them.
 Any offers ?
    Ralph

26-Apr-86 13:16:20-PST,875;000000000000
Mail-From: BARCKLAY created at 26-Apr-86 13:15:51
Return-Path: <HAAS@UTAH-20.ARPA>
Received: from UTAH-20.ARPA by SU-SCORE.ARPA with TCP; Thu 24 Apr 86 15:35:55-PST
Date: Thu 24 Apr 86 16:35:08-MST
From: Walt <Haas@UTAH-20.ARPA>
Subject: minor bug in TranScript 2.0
To: Info-PostScript@SU-SCORE.ARPA
Message-ID: <12201487954.9.HAAS@UTAH-20.ARPA>
ReSent-Date: Sat 26 Apr 86 13:15:51-PST
ReSent-From: Bob Barcklay <BARCKLAY@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: 9V
ReSent-Message-ID: <12201986884.14.BARCKLAY@SU-SCORE.ARPA>

pscatmap.c does not set the return value to 0 on a normal exit, but
just falls out the bottom of the main procedure.  This doesn't matter
on the VAX, but our Gould 9080 gives a garbage return value that causes
the invoking shell script to fail.

Solution: add "exit(0);" at the bottom of pscatmap.c.

Cheers  -- Walt
-------
 7-May-86 09:47:21-PDT,870;000000000000
Mail-From: REULING created at  7-May-86 09:46:39
Return-Path: <HAAS@UTAH-20.ARPA>
Received: from UTAH-20.ARPA by SU-SCORE.ARPA with TCP; Thu 24 Apr 86 15:35:55-PST
Date: Thu 24 Apr 86 16:35:08-MST
From: Walt <Haas@UTAH-20.ARPA>
Subject: minor bug in TranScript 2.0
To: Info-PostScript@SU-SCORE.ARPA
Message-ID: <12201487954.9.HAAS@UTAH-20.ARPA>
ReSent-Date: Wed 7 May 86 09:46:38-PDT
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12204821460.15.REULING@SU-SCORE.ARPA>

pscatmap.c does not set the return value to 0 on a normal exit, but
just falls out the bottom of the main procedure.  This doesn't matter
on the VAX, but our Gould 9080 gives a garbage return value that causes
the invoking shell script to fail.

Solution: add "exit(0);" at the bottom of pscatmap.c.

Cheers  -- Walt
-------
 7-May-86 09:48:05-PDT,1221;000000000000
Mail-From: REULING created at  7-May-86 09:46:53
Return-Path: <LISKOV@XX.LCS.MIT.EDU>
Received: from XX.LCS.MIT.EDU by SU-SCORE.ARPA with TCP; Sat 26 Apr 86 09:58:49-PST
Date: Sat 26 Apr 86 12:50:17-EST
From: Barbara H. Liskov <LISKOV@XX.LCS.MIT.EDU>
Subject: ascii/postscript conversion utility
To: laser-lovers@WASHINGTON.ARPA
cc: info-postscript@SU-SCORE.ARPA
Message-ID: <12201949464.71.LISKOV@XX.LCS.MIT.EDU>
ReSent-Date: Wed 7 May 86 09:46:53-PDT
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12204821504.15.REULING@SU-SCORE.ARPA>


	I have submitted a menu driven turbo pascal program for ascii to
postscript conversion for public domain non-commercial use.  It should be available in the info-ibmpc library at isib.arpa.

	This program allows font type selection, font size, line spacing
, optional header line, pagination.  It allows for one normal and one bold 
font per page.  The output may be sent to the printer directly or to a
file.  The program is not smart about character widths of various
fonts but has some smarts about tab positioning.

	I hope people find this useful.

	Nate Liskov  (nate@mit.bold.lcs.edu)
-------
 7-May-86 09:49:05-PDT,890;000000000000
Mail-From: REULING created at  7-May-86 09:47:10
Return-Path: <stew%lhasa.UUCP@harvard.HARVARD.EDU>
Received: from harvard.HARVARD.EDU by SU-SCORE.ARPA with TCP; Mon 28 Apr 86 07:13:43-PDT
Received: by harvard.HARVARD.EDU; Mon, 28 Apr 86 10:14:57 EDT
From: stew%lhasa.UUCP@harvard.HARVARD.EDU
Date: 	28 Apr 86 10:06 EDT
To: harvard!info-postscript@su-score.arpa
Subject:  bind
ReSent-Date: Wed 7 May 86 09:47:10-PDT
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12204821556.15.REULING@SU-SCORE.ARPA>

Does anyone know the semantics of the bind operator?  It is not defined
in Inside LaserWriter.  I am trying to fix the Adobe Error Handler routines,
which give a typecheck on the bind on the last line of the file.  Does
anyone have this fixed?

Thanx
Stew
rubenstein@harvard.harvard.edu
seismo!harvard!rubenstein
 7-May-86 09:49:55-PDT,4320;000000000000
Mail-From: REULING created at  7-May-86 09:47:36
Return-Path: <adobe!shore@su-glacier.arpa>
Received: from su-glacier.arpa by SU-SCORE.ARPA with TCP; Tue 29 Apr 86 23:57:57-PDT
Received: by su-glacier.arpa with Sendmail; Tue, 29 Apr 86 23:58:31 pdt
Received: by adobe.UUCP (4.12/4.7)
	id AA07223; Tue, 29 Apr 86 21:20:44 pdt
From: adobe!shore@su-glacier.arpa (Andrew Shore)
Message-Id: <8604300420.AA07223@adobe.UUCP>
Date: 29 Apr 1986 2120-PDT (Tuesday)
To: glacier!info-postscript@su-glacier.arpa
Subject: revised PostScript downloadable error handler
ReSent-Date: Wed 7 May 86 09:47:35-PDT
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12204821634.15.REULING@SU-SCORE.ARPA>

Here is our latest version of the downloadable PostScript error
handler (ehandler.ps).  When sent to any PostScript printer, it
will download itself outside the printer's "server loop"
(assuming the server loop password is correct) and redefine the
action taken on a PostScript error. 

This handler prints a sometimes-helpful summary of the error on
the thus-far-completed page and then executes the previous
handleerror code as well (which in most PostScript printers will
echo the error name and offending command over the
communications channel).  This version works on all existing
Adobe PostScript implementations.

It really helps when debugging raw PostScript code and new
PostScript-generating applications.

Enjoy,
--Andy

%!
% lib/ehandler.ps -- Downloaded Error Break-page handler
% Copyright (c) 1984, 1985, 1986 Adobe Systems Incorporated. 
% All Rights Reserved.

0000 % serverloop password
/$brkpage where
{pop pop(Error Handler in place - not loaded again\n)print flush stop}
{dup serverdict begin statusdict begin checkpassword
 {(Error Handler downloaded.\n)print flush exitserver}
 {pop(Bad Password on loading error handler!!!\n)print flush stop}ifelse
}ifelse
/$brkpage 64 dict def $brkpage begin
/prnt
 {dup type/stringtype ne{=string cvs}if dup length 6 mul/tx exch def/ty 10 def
  currentpoint/toy exch def/tox exch def 1 setgray newpath
  tox toy 2 sub moveto 0 ty rlineto tx 0 rlineto 0 ty neg rlineto
  closepath fill tox toy moveto 0 setgray show}bind def
/nl{currentpoint exch pop lmargin exch moveto 0 -10 rmoveto}def
/=={/cp 0 def typeprint nl}def
/typeprint{dup type dup currentdict exch known
  {exec}{unknowntype}ifelse}readonly def
/lmargin 72 def/rmargin 72 def
/tprint{dup length cp add rmargin gt{nl/cp 0 def}if
  dup length cp add/cp exch def prnt}readonly def
/cvsprint{=string cvs tprint( )tprint}readonly def
/unknowntype{exch pop cvlit(??)tprint cvsprint}readonly def
/integertype{cvsprint}readonly def
/realtype{cvsprint}readonly def
/booleantype{cvsprint}readonly def
/operatortype{(//)tprint cvsprint}readonly def
/marktype{pop(-mark- )tprint}readonly def
/dicttype{pop(-dictionary- )tprint}readonly def
/nulltype{pop(-null- )tprint}readonly def
/filetype{pop(-filestream- )tprint}readonly def
/savetype{pop(-savelevel- )tprint}readonly def
/fonttype{pop(-fontid- )tprint}readonly def
/nametype{dup xcheck not{(/)tprint}if cvsprint}readonly def
/stringtype
 {dup rcheck{(\()tprint tprint(\))tprint}{pop(-string- )tprint}ifelse
 }readonly def
/arraytype
 {dup rcheck{dup xcheck
  {({)tprint{typeprint}forall(})tprint}
  {([)tprint{typeprint}forall(])tprint}ifelse}{pop(-array- )tprint}ifelse
 }readonly def
/packedarraytype
 {dup rcheck{dup xcheck
  {({)tprint{typeprint}forall(})tprint}
  {([)tprint{typeprint}forall(])tprint}ifelse}{pop(-packedarray- )tprint}ifelse
 }readonly def
/courier/Courier findfont 10 scalefont def
/OLDhandleerror errordict /handleerror get def
end %$brkpage
errordict/handleerror
 {systemdict begin $error begin $brkpage begin newerror
   {/newerror false store 
    vmstatus pop pop 0 ne{grestoreall}if initgraphics courier setfont
    lmargin 720 moveto(ERROR: )prnt errorname prnt
    nl(OFFENDING COMMAND: )prnt/command load prnt
    $error/ostack 
    known{nl nl(STACK:)prnt nl nl $error/ostack get aload length{==}repeat}if
    systemdict/showpage get exec
    /newerror true store/OLDhandleerror load end end end exec}{end end end}
  ifelse}
dup 0 systemdict put dup 4 $brkpage put bind readonly put


 7-May-86 09:54:55-PDT,49870;000000000000
Mail-From: REULING created at  7-May-86 09:53:44
Return-Path: <cbosgd!nomad!ggr@seismo.CSS.GOV>
Received: from seismo.CSS.GOV by SU-SCORE.ARPA with TCP; Sat 3 May 86 02:05:15-PDT
Return-Path: <cbosgd!nomad!ggr>
Received: from cbosgd.UUCP by seismo.CSS.GOV with UUCP; Sat, 3 May 86 01:54:20 EDT
Received: from lc/lot/nomad.DK 
	by cbosgd.ATT.COM (4.12/UUCP-Project/11.09.85)
	id AA04838; Mon, 28 Apr 86 21:26:13 edt
Date: 28 Apr 86 21:27:29 EDT (Mon)
From: nomad!ggr@seismo.CSS.GOV (Guy Riddle)
Subject: hersel: Make a PostScript Font from Selected Hershey Characters
Message-Id: <8604290127.AA16071@lc/lot/nomad.DK>
Received: by lc/lot/nomad.DK; 8604290127
Telephone: +1 201 580 4168
To: info-postscript@su-score.arpa
Cc: laser-lovers@washington.arpa
ReSent-Date: Wed 7 May 86 09:53:42-PDT
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12204822747.15.REULING@SU-SCORE.ARPA>

: If you enjoyed the recently released *herps*, the sequel, *hersel*, should be
: coming very soon to a file near you.

#! /bin/sh
# This is a shell archive, meaning:
# 1. Remove everything above the #! /bin/sh line.
# 2. Save the resulting text in a file.
# 3. Execute the file with /bin/sh (not csh) to create the files:
#	READme
#	Makefile
#	hersel.c
#	standard.enc
#	makefont.ps
#	font.map+
#	morefonts
#	HerGotEng.sel
#	HerGotEngB.sel
#	HerGotEngO.sel
#	HerGotGer.sel
#	HerGotGerB.sel
#	HerGotGerO.sel
#	HerGotIta.sel
#	HerGotItaB.sel
#	HerGotItaO.sel
#	HerPla.sel
#	HerPlaB.sel
#	HerPlaO.sel
#	HerScrCom.sel
#	HerScrComB.sel
#	HerScrComO.sel
#	HerScrSim.sel
#	HerScrSimB.sel
#	HerScrSimO.sel
#	HerTri.sel
#	HerTriB.sel
#	HerTriBI.sel
#	HerTriI.sel
# This archive created: Mon Apr 28 15:22:38 1986
export PATH; PATH=/bin:$PATH
if test -f 'READme'
then
	echo shar: will not over-write existing file "'READme'"
else
cat << \SHAR_EOF > 'READme'
This program takes a "selection file" and a file of Hershey glyphs
and creates 3 output files:

	a .pro file -- PostScript code that when included in a PostScript
		program makes a font that may then be accessed via 'findfont'
	a .afm file -- provides the Adobe Font Metrics information needed
		by the TranScript shell file 'afmdit' to construct a
		troff .out file
	a .map file -- used by TranScript software to map the 2-character
		troff font name to the internal font name

To make the whole shebang, just say "make".

If you have Adobe's TranScript package, you dispose of the output
files as follows:

	.pro -- goes in /usr/add-on/ps/lib [Your Directories May Vary]

	.afm -- goes in /usr/add-on/ps/lib and /usr/lsrc/transcript/lib

	.map -- goes in /usr/lsrc/transcript/lib/ditroff.font

Then sort the `font.map+' lines into your font.map, merge the `moreout' line
into your /usr/lsrc/transcript/lib/ditroff.font/Makefile, and run make in
this directory.  Scatter the .out and .aux files to their proper places
[probably /usr/lib/font/devpsc].

Now if you have the version of TranScript I do, you are done.  (I've locally
modified mine to automatically merge the .pro file with the rest of the
psdit output whenever a "non-standard font" is used in a document.  I can't
send you these modifications but you might try expressing your wishes
to adobe!shore in hope of altering the future.)  Otherwise you need to
arrange some other method of merging the proper .pro files before printing
the output.

Usage:	(if you wish to build fonts other than the ones I did)
 	hersel font.sel hersh.oc

Notes:
	1.  I didn't bother with ligatures (none of the fonts I encoded
	had any).

	2.  I only encoded characters in Adobe's Standard Encoding.  You'll
	have to do some twiddling to get the Christmas tree into a font.

	3.  To keep the regular fonts dainty, I have used a rather narrow
	pen width.  This looks fine at small character sizes, but at
	larger sizes the characters show gaps in the strokes.  I'd just
	use the "bold" variety of the font when this happens but you might
	feel like adjusting the penwidth for the basic font.

	4.  I didn't like the spacing on most of the fonts so put a provision
	in the select file to adjust the left and right "boundaries" (not
	really side-bearings as the character origin isn't given and had
	to be divined) of a character.  These are the third and fourth fields
	on the character selection line when present.  You may feel like
	adjusting them again.  The Gothic fonts probably could use some
	tuning, too, but I haven't done them.

Author:
	Guy Riddle
	AT&T Bell Laboratories
	184 Liberty Corner Road
	Liberty Corner, NJ  07938

	<allegra!nomad!ggr> or <ggr@btl.csnet>
SHAR_EOF
fi # end of overwriting check
if test -f 'Makefile'
then
	echo shar: will not over-write existing file "'Makefile'"
else
cat << \SHAR_EOF > 'Makefile'
AFM =	HerGotEng.afm HerGotEngB.afm HerGotEngO.afm HerGotGer.afm \
	HerGotGerB.afm HerGotGerO.afm HerGotIta.afm HerGotItaB.afm \
	HerGotItaO.afm HerPla.afm HerPlaB.afm HerPlaO.afm HerScrCom.afm \
	HerScrComB.afm HerScrComO.afm HerScrSim.afm HerScrSimB.afm \
	HerScrSimO.afm HerTri.afm HerTriB.afm HerTriBI.afm HerTriI.afm

fonts:		$(AFM)
		touch fonts
$(AFM):		hersel hersh.oc
hersh.oc:	hersh.oc1 hersh.oc2 hersh.oc3 hersh.oc4
		cat hersh.oc[1234] >hersh.oc

hersel:		hersel.o
		cc -o hersel hersel.o
hersel.o:	standard.h makefont.h

herps:		herps.o
		cc -o herps herps.o
herps.o:	prolog.h pagestart.h pagefinish.h trailer.h

.SUFFIXES: 	.ps .enc .afm .sel
.ps.h:
		sed -e 's/.*/"&",/' $*.ps >$*.h
.enc.h:
		sed -e 's/.*/{"&"},/' $*.enc >$*.h
.sel.afm:
		hersel $*.sel hersh.oc
SHAR_EOF
fi # end of overwriting check
if test -f 'hersel.c'
then
	echo shar: will not over-write existing file "'hersel.c'"
else
cat << \SHAR_EOF > 'hersel.c'
#include <stdio.h>

/*
 *	hersel -- Make a PostScript Font from Selected Hershey Characters
 *
 * This program takes a "selection file" and a file of Hershey glyphs
 * and creates 3 output files:
 *
 *	a .pro file -- PostScript code that when included in a PostScript
 *		program makes a font that may then be accessed via 'findfont'
 *	a .afm file -- provides the Adobe Font Metrics information needed
 *		by the TranScript shell file 'afmdit' to construct a
 *		troff .out file
 *	a .map file -- used by TranScript software to map the 2-character
 *		troff font name to the internal font name
 *
 * You should be able to deduce the format of the .sel file from the
 * enclosed examples without much trouble.
 *
 * Usage:
 *
 *	hersel font.sel hersh.oc
 *
 * Author:
 *
 *	Guy Riddle
 *	AT&T Bell Laboratories
 *	Liberty Corner, NJ  07938
 *
 *	<attmail!ggr> or <ihnp4!garage!ggr> or <ggr@btl.csnet>
 */


	typedef struct {
		char	*key;
		char	*value;
		short	glyph;
		short	adjleft;
		short	adjright;
	} Tmt;

	int	glyphcount;
	char	*iam;
	FILE	*sel, *font, *map, *afm, *pro;

	char	longname[128], shortname[16], troffname[4];
	char	penwidth[8]	= "1";
	char	italicangle[8]	= "0";

	FILE	*openin(), *openout();
	Tmt	*match();

	Tmt 	keywords[] = {
		{ "longname", longname },
		{ "shortname", shortname },
		{ "troffname", troffname },
		{ "penwidth", penwidth },
		{ "italicangle", italicangle },
		0
	};

	Tmt	encoding[] = {
#include "standard.h"
		0
	};

	char	*makefont[] = {
#include "makefont.h"
		0
	};

main(argc, argv)
	char	*argv[];
{
	iam = argv[0];

	if(argc != 3){
		fprintf(stderr, "Usage:  %s select-file font-file\n", iam);
		exit(64);
	}

	sel = openin(argv[1]);
	font = openin(argv[2]);

	readselect();

	if(troffname[0]){
		map = openout(troffname, "map");
		fprintf(map, "%s\n", longname);
	}

	afm = openout(shortname, "afm");
	pro = openout(shortname, "pro");

	fprintf(afm, "StartFontMetrics 1.0\n");
	fprintf(afm, "Comment Selected characters from the Hershey Fonts\n");
	fprintf(afm, "FontName %s\n", longname);
	fprintf(afm, "Notice Created by the program `hersel'\n");
	fprintf(afm, "Notice Program author Guy Riddle <ihnp4!nomad!ggr>\n");
	fprintf(afm, "Comment The bounding boxes are bogus\n");
	fprintf(afm, "FontBBox 0 0 1000 1000\n");
	fprintf(afm, "StartCharMetrics\n");

	makepro();

	fprintf(afm, "EndCharMetrics\n");
	fprintf(afm, "EndFontMetrics\n");

	exit(0);
}

readselect()
{
	Tmt	*p;
	char	line[128], left[64], right[64], adjleft[8], adjright[8];

	while(fgets(line, sizeof(line), sel)){
		if(line[0] == '#')
			continue;

		adjleft[0] = adjright[0] = '\0';

		sscanf(line, "%s %s %s %s", left, right, adjleft, adjright);

		if(p = match(left, keywords))
			strcpy(p->value, right);
		else if(p = match(left, encoding)){
			p->glyph = atoi(right);
			p->adjleft = atoi(adjleft);
			p->adjright = atoi(adjright);
			glyphcount++;
		}else
			fprintf(stderr, "%s: no keyword or character %s\n", iam, left);
	}
}

makepro()
{
	Tmt	*p;
	int	glyph, xl, xr, wx;
	char	strokes[2048];

	squirt(pro, makefont);

	fprintf(pro, "%d dict dup begin\n", glyphcount);

	while(glyph = hersheyglyph(&xl, &xr, strokes))
		for(p = encoding; p->key; p++)
			if(glyph == p->glyph){
				xl += p->adjleft;
				xr += p->adjright;

				fprintf(pro, "/%s [%d %d (%s)] def\n",
				  p->key, xl, xr, strokes);

				if(p->key[0] != '.'){
					wx = ((xr - xl) * 1000) / 33;
					fprintf(afm, "C %d ; WX %d ; N %s ; B 0 0 1000 1000 ;\n",
					  (p - encoding), wx, p->key);
				}
			}

	fprintf(pro, "end /%s %s %s MakeHersheyFont\n", longname, penwidth, italicangle);
}

hersheyglyph(xlp, xrp, sp)
	int	*xlp, *xrp;
	char	*sp;
{
	int	c, glen;
	char	glyphnum[6], glyphlength[4];
	
	if(fread(glyphnum, 1, sizeof(glyphnum)-1, font) != (sizeof(glyphnum)-1))
		return(0);

	fread(glyphlength, 1, sizeof(glyphlength)-1, font);

	glen = atoi(glyphlength)*2 - 2;

	*xlp = getc(font) - 'R';
	*xrp = getc(font) - 'R';

	while(--glen >= 0)
		switch(c = getc(font)){
		case '\n':
			glen++;
			break;

		case ' ':
			*sp++ = c;
			(void) getc(font);
			glen--;
			break;

		case '\\':
		case '(':
		case ')':
			*sp++ = '\\';
		default:
			*sp++ = c;
		}
	*sp = '\0';

	if(getc(font) != '\n'){
		fprintf(stderr, "%s: font input format botch\n", iam);
		exit(65);
	}
	if((c = getc(font)) != '\n')
		ungetc(c, font);
	return(atoi(glyphnum));
}

squirt(fp, stuff)
	FILE	*fp;
	char	**stuff;
{
	char	*p;

	while(p = *stuff++)
		fprintf(fp, "%s\n", p);
}

	FILE *
openin(name)
	char	*name;
{
	FILE	*fp;

	fp = fopen(name, "r");

	if(fp == NULL){
		fprintf(stderr, "%s: can't open %s\n", iam, name);
		exit(66);
	}

	return(fp);
}

	FILE *
openout(pre, suf)
	char	*pre, *suf;
{
	FILE	*fp;
	char	name[16];

	sprintf(name, "%s.%s", pre, suf);

	fp = fopen(name, "w");

	if(fp == NULL){
		fprintf(stderr, "%s: can't create %s\n", iam, name);
		exit(73);
	}

	return(fp);
}

	Tmt *
match(key, table)
	char	*key;
	Tmt	table[];
{
	Tmt	*p;

	for(p = table; p->key; p++)
		if(strcmp(key, p->key) == 0)
			return(p);
	return(0);
}
SHAR_EOF
fi # end of overwriting check
if test -f 'standard.enc'
then
	echo shar: will not over-write existing file "'standard.enc'"
else
cat << \SHAR_EOF > 'standard.enc'
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
space
exclam
quotedbl
numbersign
dollar
percent
ampersand
quoteright
parenleft
parenright
asterisk
plus
comma
hyphen
period
slash
zero
one
two
three
four
five
six
seven
eight
nine
colon
semicolon
less
equal
greater
question
at
A
B
C
D
E
F
G
H
I
J
K
L
M
N
O
P
Q
R
S
T
U
V
W
X
Y
Z
bracketleft
backslash
bracketright
asciicircum
underscore
quoteleft
a
b
c
d
e
f
g
h
i
j
k
l
m
n
o
p
q
r
s
t
u
v
w
x
y
z
braceleft
bar
braceright
asciitilde
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
exclamdown
cent
sterling
fraction
yen
florin
section
currency
quotesingle
quotedblleft
guillemotleft
guilsinglleft
guilsinglright
fi
fl
.notdef
endash
dagger
daggerdbl
periodcentered
.notdef
paragraph
bullet
quotesinglbase
quotedblbase
quotedblright
guillemotright
ellipsis
perthousand
.notdef
questiondown
.notdef
grave
acute
circumflex
tilde
macron
breve
dotaccent
dieresis
.notdef
ring
cedilla
.notdef
hungarumlaut
ogonek
caron
emdash
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
.notdef
AE
.notdef
ordfeminine
.notdef
.notdef
.notdef
.notdef
Lslash
Oslash
OE
ordmasculine
.notdef
.notdef
.notdef
.notdef
.notdef
ae
.notdef
.notdef
.notdef
dotlessi
.notdef
.notdef
lslash
oslash
oe
germandbls
.notdef
.notdef
.notdef
.notdef
SHAR_EOF
fi # end of overwriting check
if test -f 'makefont.ps'
then
	echo shar: will not over-write existing file "'makefont.ps'"
else
cat << \SHAR_EOF > 'makefont.ps'
%!
/HersheyBuildDict 10 dict def

/BuildHersheyChar {
	/char exch def
	/fontdict exch def

	/cd fontdict /CharData get fontdict /Encoding get char get get def

	/llx 99 def /lly 99 def /urx -99 def /ury -99 def

	/isx true def

	cd 2 get {
		isx {
			dup 32 eq {
				pop
			} {
				82 sub cd 0 get sub

				dup llx lt {
					dup /llx exch def
				} if
				dup urx gt {
					dup /urx exch def
				} if
				pop

				/isx false def
			} ifelse
		} {
			neg 91 add

			dup lly lt {
				dup /lly exch def
			} if
			dup ury gt {
				dup /ury exch def
			} if
			pop

			/isx true def
		} ifelse
	} forall

	cd 1 get cd 0 get sub 0 llx 1 sub lly 1 sub urx 1 add ury 1 add setcachedevice

	/domove true def
	/isx true def

	cd 2 get {
		isx {
			dup 32 eq {
				pop
				/domove true def
			} {
				82 sub cd 0 get sub
				/isx false def
			} ifelse
		} {
			neg 91 add
			domove {
				moveto
				/domove false def
			} {
				lineto
			} ifelse

			/isx true def
		} ifelse
	} forall


	1 setmiterlimit 1 setlinejoin 1 setlinecap
	fontdict /PenWidth get setlinewidth stroke
} bind def

/MakeHersheyFont {
	10 dict dup begin
	exch /ItalicAngle exch def
	exch /PenWidth exch def
	exch /FontName exch def
	exch /CharData exch def

	/FontType 3 def
	/FontMatrix [1 33 div 0 ItalicAngle neg dup sin exch cos div 33 div 1 33 div 0 0] def

	/Encoding StandardEncoding def
	/BuildChar {HersheyBuildDict begin BuildHersheyChar end} def
	/FontBBox [-10 -10 30 30] def

	FontName end exch definefont
} bind def
SHAR_EOF
fi # end of overwriting check
if test -f 'font.map+'
then
	echo shar: will not over-write existing file "'font.map+'"
else
cat << \SHAR_EOF > 'font.map+'
Hershey-Gothic-English		HerGotEng
Hershey-Gothic-English-Bold	HerGotEngB
Hershey-Gothic-English-Oblique	HerGotEngO
Hershey-Gothic-German		HerGotGer
Hershey-Gothic-German-Bold	HerGotGerB
Hershey-Gothic-German-Oblique	HerGotGerO
Hershey-Gothic-Italian		HerGotIta
Hershey-Gothic-Italian-Bold	HerGotItaB
Hershey-Gothic-Italian-Oblique	HerGotItaO
Hershey-Plain			HerPla
Hershey-Plain-Bold		HerPlaB
Hershey-Plain-Oblique		HerPlaO
Hershey-Script-Complex		HerScrCom
Hershey-Script-Complex-Bold	HerScrComB
Hershey-Script-Complex-Oblique	HerScrComO
Hershey-Script-Simplex		HerScrSim
Hershey-Script-Simplex-Bold	HerScrSimB
Hershey-Script-Simplex-Oblique	HerScrSimO
Hershey-Triplex			HerTri
Hershey-Triplex-Bold		HerTriB
Hershey-Triplex-Bold-Italic	HerTriBI
Hershey-Triplex-Italic		HerTriI
SHAR_EOF
fi # end of overwriting check
if test -f 'morefonts'
then
	echo shar: will not over-write existing file "'morefonts'"
else
cat << \SHAR_EOF > 'morefonts'
MOREFONTS = ht Ht hT HT hp Hp hP ge Ge gE sc Sc sC gg Gg gG gi Gi gI ss Ss sS
SHAR_EOF
fi # end of overwriting check
if test -f 'HerGotEng.sel'
then
	echo shar: will not over-write existing file "'HerGotEng.sel'"
else
cat << \SHAR_EOF > 'HerGotEng.sel'
longname	Hershey-Gothic-English
shortname	HerGotEng
troffname	ge
penwidth	0.6
#
space		3698
.notdef		735
a		3601
b		3602
c		3603
d		3604
e		3605
f		3606
g		3607
h		3608
i		3609
j		3610
k		3611
l		3612
m		3613
n		3614
o		3615
p		3616
q		3617
r		3618
s		3619
t		3620
u		3621
v		3622
w		3623
x		3624
y		3625
z		3626
A		3501
B		3502
C		3503
D		3504
E		3505
F		3506
G		3507
H		3508
I		3509
J		3510
K		3511
L		3512
M		3513
N		3514
O		3515
P		3516
Q		3517
R		3518
S		3519
T		3520
U		3521
V		3522
W		3523
X		3524
Y		3525
Z		3526
zero		3700
one		3701
two		3702
three		3703
four		3704
five		3705
six		3706
seven		3707
eight		3708
nine		3709
period		3710
comma		3711
colon		3712
semicolon	3713
exclam		3714
question	3715
quotesingle	3727
dollar		3719
slash		802
backslash	804
parenleft	3721
parenright	3722
bar		723
hyphen		224
plus		3725
equal		3726
asterisk	3723
periodcentered	729
quoteleft	3716
quoteright	3717
numbersign	733
ampersand	3718
bullet		751
bracketleft	1405
bracketright	1406
braceleft	1407
braceright	1408
asciitilde	2246
asciicircum	2247
less		2241
greater		2242
at		2273
percent		2271
section		2276
quotedbl	3728
tilde		1246
dagger		2277
daggerdbl	2278
SHAR_EOF
fi # end of overwriting check
if test -f 'HerGotEngB.sel'
then
	echo shar: will not over-write existing file "'HerGotEngB.sel'"
else
cat << \SHAR_EOF > 'HerGotEngB.sel'
longname	Hershey-Gothic-English-Bold
shortname	HerGotEngB
troffname	Ge
penwidth	2.0
#
space		3698
.notdef		735
a		3601
b		3602
c		3603
d		3604
e		3605
f		3606
g		3607
h		3608
i		3609
j		3610
k		3611
l		3612
m		3613
n		3614
o		3615
p		3616
q		3617
r		3618
s		3619
t		3620
u		3621
v		3622
w		3623
x		3624
y		3625
z		3626
A		3501
B		3502
C		3503
D		3504
E		3505
F		3506
G		3507
H		3508
I		3509
J		3510
K		3511
L		3512
M		3513
N		3514
O		3515
P		3516
Q		3517
R		3518
S		3519
T		3520
U		3521
V		3522
W		3523
X		3524
Y		3525
Z		3526
zero		3700
one		3701
two		3702
three		3703
four		3704
five		3705
six		3706
seven		3707
eight		3708
nine		3709
period		3710
comma		3711
colon		3712
semicolon	3713
exclam		3714
question	3715
quotesingle	3727
dollar		3719
slash		802
backslash	804
parenleft	3721
parenright	3722
bar		723
hyphen		224
plus		3725
equal		3726
asterisk	3723
periodcentered	729
quoteleft	3716
quoteright	3717
numbersign	733
ampersand	3718
bullet		751
bracketleft	1405
bracketright	1406
braceleft	1407
braceright	1408
asciitilde	2246
asciicircum	2247
less		2241
greater		2242
at		2273
percent		2271
section		2276
quotedbl	3728
tilde		1246
dagger		2277
daggerdbl	2278
SHAR_EOF
fi # end of overwriting check
if test -f 'HerGotEngO.sel'
then
	echo shar: will not over-write existing file "'HerGotEngO.sel'"
else
cat << \SHAR_EOF > 'HerGotEngO.sel'
longname	Hershey-Gothic-English-Oblique
shortname	HerGotEngO
troffname	gE
penwidth	0.9
italicangle	-20
#
space		3698
.notdef		735
a		3601
b		3602
c		3603
d		3604
e		3605
f		3606
g		3607
h		3608
i		3609
j		3610
k		3611
l		3612
m		3613
n		3614
o		3615
p		3616
q		3617
r		3618
s		3619
t		3620
u		3621
v		3622
w		3623
x		3624
y		3625
z		3626
A		3501
B		3502
C		3503
D		3504
E		3505
F		3506
G		3507
H		3508
I		3509
J		3510
K		3511
L		3512
M		3513
N		3514
O		3515
P		3516
Q		3517
R		3518
S		3519
T		3520
U		3521
V		3522
W		3523
X		3524
Y		3525
Z		3526
zero		3700
one		3701
two		3702
three		3703
four		3704
five		3705
six		3706
seven		3707
eight		3708
nine		3709
period		3710
comma		3711
colon		3712
semicolon	3713
exclam		3714
question	3715
quotesingle	3727
dollar		3719
slash		802
backslash	804
parenleft	3721
parenright	3722
bar		723
hyphen		224
plus		3725
equal		3726
asterisk	3723
periodcentered	729
quoteleft	3716
quoteright	3717
numbersign	733
ampersand	3718
bullet		751
bracketleft	1405
bracketright	1406
braceleft	1407
braceright	1408
asciitilde	2246
asciicircum	2247
less		2241
greater		2242
at		2273
percent		2271
section		2276
quotedbl	3728
tilde		1246
dagger		2277
daggerdbl	2278
SHAR_EOF
fi # end of overwriting check
if test -f 'HerGotGer.sel'
then
	echo shar: will not over-write existing file "'HerGotGer.sel'"
else
cat << \SHAR_EOF > 'HerGotGer.sel'
longname	Hershey-Gothic-German
shortname	HerGotGer
troffname	gg
penwidth	0.6
#
space		3698
.notdef		735
a		3401
b		3402
c		3403
d		3404
e		3405
f		3406
g		3407
h		3408
i		3409
j		3410
k		3411
l		3412
m		3413
n		3414
o		3415
p		3416
q		3417
r		3418
s		3419
t		3420
u		3421
v		3422
w		3423
x		3424
y		3425
z		3426
germandbls	3429
A		3301
B		3302
C		3303
D		3304
E		3305
F		3306
G		3307
H		3308
I		3309
J		3310
K		3311
L		3312
M		3313
N		3314
O		3315
P		3316
Q		3317
R		3318
S		3319
T		3320
U		3321
V		3322
W		3323
X		3324
Y		3325
Z		3326
zero		3700
one		3701
two		3702
three		3703
four		3704
five		3705
six		3706
seven		3707
eight		3708
nine		3709
period		3710
comma		3711
colon		3712
semicolon	3713
exclam		3714
question	3715
quotesingle	3727
dollar		3719
slash		802
backslash	804
parenleft	3721
parenright	3722
bar		723
hyphen		224
plus		3725
equal		3726
asterisk	3723
periodcentered	729
quoteleft	3716
quoteright	3717
numbersign	733
ampersand	3718
bullet		751
bracketleft	1405
bracketright	1406
braceleft	1407
braceright	1408
asciitilde	2246
asciicircum	2247
less		2241
greater		2242
at		2273
percent		2271
section		2276
quotedbl	3728
tilde		1246
dagger		2277
daggerdbl	2278
SHAR_EOF
fi # end of overwriting check
if test -f 'HerGotGerB.sel'
then
	echo shar: will not over-write existing file "'HerGotGerB.sel'"
else
cat << \SHAR_EOF > 'HerGotGerB.sel'
longname	Hershey-Gothic-German-Bold
shortname	HerGotGerB
troffname	Gg
penwidth	2.0
#
space		3698
.notdef		735
a		3401
b		3402
c		3403
d		3404
e		3405
f		3406
g		3407
h		3408
i		3409
j		3410
k		3411
l		3412
m		3413
n		3414
o		3415
p		3416
q		3417
r		3418
s		3419
t		3420
u		3421
v		3422
w		3423
x		3424
y		3425
z		3426
germandbls	3429
A		3301
B		3302
C		3303
D		3304
E		3305
F		3306
G		3307
H		3308
I		3309
J		3310
K		3311
L		3312
M		3313
N		3314
O		3315
P		3316
Q		3317
R		3318
S		3319
T		3320
U		3321
V		3322
W		3323
X		3324
Y		3325
Z		3326
zero		3700
one		3701
two		3702
three		3703
four		3704
five		3705
six		3706
seven		3707
eight		3708
nine		3709
period		3710
comma		3711
colon		3712
semicolon	3713
exclam		3714
question	3715
quotesingle	3727
dollar		3719
slash		802
backslash	804
parenleft	3721
parenright	3722
bar		723
hyphen		224
plus		3725
equal		3726
asterisk	3723
periodcentered	729
quoteleft	3716
quoteright	3717
numbersign	733
ampersand	3718
bullet		751
bracketleft	1405
bracketright	1406
braceleft	1407
braceright	1408
asciitilde	2246
asciicircum	2247
less		2241
greater		2242
at		2273
percent		2271
section		2276
quotedbl	3728
tilde		1246
dagger		2277
daggerdbl	2278
SHAR_EOF
fi # end of overwriting check
if test -f 'HerGotGerO.sel'
then
	echo shar: will not over-write existing file "'HerGotGerO.sel'"
else
cat << \SHAR_EOF > 'HerGotGerO.sel'
longname	Hershey-Gothic-German-Oblique
shortname	HerGotGerO
troffname	gG
penwidth	0.9
italicangle	-20
#
space		3698
.notdef		735
a		3401
b		3402
c		3403
d		3404
e		3405
f		3406
g		3407
h		3408
i		3409
j		3410
k		3411
l		3412
m		3413
n		3414
o		3415
p		3416
q		3417
r		3418
s		3419
t		3420
u		3421
v		3422
w		3423
x		3424
y		3425
z		3426
germandbls	3429
A		3301
B		3302
C		3303
D		3304
E		3305
F		3306
G		3307
H		3308
I		3309
J		3310
K		3311
L		3312
M		3313
N		3314
O		3315
P		3316
Q		3317
R		3318
S		3319
T		3320
U		3321
V		3322
W		3323
X		3324
Y		3325
Z		3326
zero		3700
one		3701
two		3702
three		3703
four		3704
five		3705
six		3706
seven		3707
eight		3708
nine		3709
period		3710
comma		3711
colon		3712
semicolon	3713
exclam		3714
question	3715
quotesingle	3727
dollar		3719
slash		802
backslash	804
parenleft	3721
parenright	3722
bar		723
hyphen		224
plus		3725
equal		3726
asterisk	3723
periodcentered	729
quoteleft	3716
quoteright	3717
numbersign	733
ampersand	3718
bullet		751
bracketleft	1405
bracketright	1406
braceleft	1407
braceright	1408
asciitilde	2246
asciicircum	2247
less		2241
greater		2242
at		2273
percent		2271
section		2276
quotedbl	3728
tilde		1246
dagger		2277
daggerdbl	2278
SHAR_EOF
fi # end of overwriting check
if test -f 'HerGotIta.sel'
then
	echo shar: will not over-write existing file "'HerGotIta.sel'"
else
cat << \SHAR_EOF > 'HerGotIta.sel'
longname	Hershey-Gothic-Italian
shortname	HerGotIta
troffname	gi
penwidth	0.6
#
space		3698
.notdef		735
a		3901
b		3902
c		3903
d		3904
e		3905
f		3906
g		3907
h		3908
i		3909
j		3910
k		3911
l		3912
m		3913
n		3914
o		3915
p		3916
q		3917
r		3918
s		3919
t		3920
u		3921
v		3922
w		3923
x		3924
y		3925
z		3926
A		3801
B		3802
C		3803
D		3804
E		3805
F		3806
G		3807
H		3808
I		3809
J		3810
K		3811
L		3812
M		3813
N		3814
O		3815
P		3816
Q		3817
R		3818
S		3819
T		3820
U		3821
V		3822
W		3823
X		3824
Y		3825
Z		3826
zero		3700
one		3701
two		3702
three		3703
four		3704
five		3705
six		3706
seven		3707
eight		3708
nine		3709
period		3710
comma		3711
colon		3712
semicolon	3713
exclam		3714
question	3715
quotesingle	3727
dollar		3719
slash		802
backslash	804
parenleft	3721
parenright	3722
bar		723
hyphen		224
plus		3725
equal		3726
asterisk	3723
periodcentered	729
quoteleft	3716
quoteright	3717
numbersign	733
ampersand	3718
bullet		751
bracketleft	1405
bracketright	1406
braceleft	1407
braceright	1408
asciitilde	2246
asciicircum	2247
less		2241
greater		2242
at		2273
percent		2271
section		2276
quotedbl	3728
tilde		1246
dagger		2277
daggerdbl	2278
SHAR_EOF
fi # end of overwriting check
if test -f 'HerGotItaB.sel'
then
	echo shar: will not over-write existing file "'HerGotItaB.sel'"
else
cat << \SHAR_EOF > 'HerGotItaB.sel'
longname	Hershey-Gothic-Italian-Bold
shortname	HerGotItaB
troffname	Gi
penwidth	2.0
#
space		3698
.notdef		735
a		3901
b		3902
c		3903
d		3904
e		3905
f		3906
g		3907
h		3908
i		3909
j		3910
k		3911
l		3912
m		3913
n		3914
o		3915
p		3916
q		3917
r		3918
s		3919
t		3920
u		3921
v		3922
w		3923
x		3924
y		3925
z		3926
A		3801
B		3802
C		3803
D		3804
E		3805
F		3806
G		3807
H		3808
I		3809
J		3810
K		3811
L		3812
M		3813
N		3814
O		3815
P		3816
Q		3817
R		3818
S		3819
T		3820
U		3821
V		3822
W		3823
X		3824
Y		3825
Z		3826
zero		3700
one		3701
two		3702
three		3703
four		3704
five		3705
six		3706
seven		3707
eight		3708
nine		3709
period		3710
comma		3711
colon		3712
semicolon	3713
exclam		3714
question	3715
quotesingle	3727
dollar		3719
slash		802
backslash	804
parenleft	3721
parenright	3722
bar		723
hyphen		224
plus		3725
equal		3726
asterisk	3723
periodcentered	729
quoteleft	3716
quoteright	3717
numbersign	733
ampersand	3718
bullet		751
bracketleft	1405
bracketright	1406
braceleft	1407
braceright	1408
asciitilde	2246
asciicircum	2247
less		2241
greater		2242
at		2273
percent		2271
section		2276
quotedbl	3728
tilde		1246
dagger		2277
daggerdbl	2278
SHAR_EOF
fi # end of overwriting check
if test -f 'HerGotItaO.sel'
then
	echo shar: will not over-write existing file "'HerGotItaO.sel'"
else
cat << \SHAR_EOF > 'HerGotItaO.sel'
longname	Hershey-Gothic-Italian-Oblique
shortname	HerGotItaO
troffname	gI
penwidth	0.9
italicangle	-20
#
space		3698
.notdef		735
a		3901
b		3902
c		3903
d		3904
e		3905
f		3906
g		3907
h		3908
i		3909
j		3910
k		3911
l		3912
m		3913
n		3914
o		3915
p		3916
q		3917
r		3918
s		3919
t		3920
u		3921
v		3922
w		3923
x		3924
y		3925
z		3926
A		3801
B		3802
C		3803
D		3804
E		3805
F		3806
G		3807
H		3808
I		3809
J		3810
K		3811
L		3812
M		3813
N		3814
O		3815
P		3816
Q		3817
R		3818
S		3819
T		3820
U		3821
V		3822
W		3823
X		3824
Y		3825
Z		3826
zero		3700
one		3701
two		3702
three		3703
four		3704
five		3705
six		3706
seven		3707
eight		3708
nine		3709
period		3710
comma		3711
colon		3712
semicolon	3713
exclam		3714
question	3715
quotesingle	3727
dollar		3719
slash		802
backslash	804
parenleft	3721
parenright	3722
bar		723
hyphen		224
plus		3725
equal		3726
asterisk	3723
periodcentered	729
quoteleft	3716
quoteright	3717
numbersign	733
ampersand	3718
bullet		751
bracketleft	1405
bracketright	1406
braceleft	1407
braceright	1408
asciitilde	2246
asciicircum	2247
less		2241
greater		2242
at		2273
percent		2271
section		2276
quotedbl	3728
tilde		1246
dagger		2277
daggerdbl	2278
SHAR_EOF
fi # end of overwriting check
if test -f 'HerPla.sel'
then
	echo shar: will not over-write existing file "'HerPla.sel'"
else
cat << \SHAR_EOF > 'HerPla.sel'
longname	Hershey-Plain
shortname	HerPla
troffname	hp
penwidth	0.6
#
space		2698
.notdef		735
a		2601	+1 -1
b		2602	+1 -1
c		2603	+1 -1
d		2604	+1 -1
e		2605	+1 -1
f		2606	+1 -1
g		2607	+1 -1
h		2608	+1 -1
i		2609	+1 -1
j		2610	+1 -1
k		2611	+1 -1
l		2612	+1 -1
m		2613	+1 -1
n		2614	+1 -1
o		2615	+1 -1
p		2616	+1 -1
q		2617	+1 -1
r		2618	+1 -0
s		2619	+1 -1
t		2620	+0 -1
u		2621	+1 -1
v		2622	+1 -1
w		2623	+1 -1
x		2624	+1 -1
y		2625	+1 -1
z		2626	+1 -1
A		2501	+1 -1
B		2502	+1 -1
C		2503	+1 -1
D		2504	+1 -1
E		2505	+1 -1
F		2506	+1 -1
G		2507	+1 -1
H		2508	+1 -1
I		2509	+1 -1
J		2510	+1 -1
K		2511	+1 -1
L		2512	+1 -1
M		2513	+1 -1
N		2514	+1 -1
O		2515	+1 -1
P		2516	+1 -1
Q		2517	+1 -1
R		2518	+1 -1
S		2519	+1 -1
T		2520	+1 -1
U		2521	+1 -1
V		2522	+1 -1
W		2523	+1 -1
X		2524	+1 -1
Y		2525	+1 -1
Z		2526	+1 -1
zero		2700
one		2701
two		2702
three		2703
four		2704
five		2705
six		2706
seven		2707
eight		2708
nine		2709
period		2710
comma		2711
colon		2712
semicolon	2713
exclam		2714
question	2715
quotesingle	2727
dollar		2719
slash		802
backslash	804
parenleft	2721	+0 -2
parenright	2722	+2 -0
bar		723
hyphen		224
plus		2725
equal		2726
asterisk	2723
periodcentered	729
quoteleft	2716
quoteright	2717
numbersign	733
ampersand	2718
bullet		751
bracketleft	1405
bracketright	1406
braceleft	1407
braceright	1408
asciitilde	2246
asciicircum	2247
less		2241
greater		2242
at		2273
percent		2271
section		2276
quotedbl	2728
tilde		1246
dagger		2277
daggerdbl	2278
SHAR_EOF
fi # end of overwriting check
if test -f 'HerPlaB.sel'
then
	echo shar: will not over-write existing file "'HerPlaB.sel'"
else
cat << \SHAR_EOF > 'HerPlaB.sel'
longname	Hershey-Plain-Bold
shortname	HerPlaB
troffname	Hp
penwidth	2.2
#
space		2698
.notdef		735
a		2601	+1 -1
b		2602	+1 -1
c		2603	+1 -1
d		2604	+1 -1
e		2605	+1 -1
f		2606	+1 -1
g		2607	+1 -1
h		2608	+1 -1
i		2609	+1 -1
j		2610	+1 -1
k		2611	+1 -1
l		2612	+1 -1
m		2613	+1 -1
n		2614	+1 -1
o		2615	+1 -1
p		2616	+1 -1
q		2617	+1 -1
r		2618	+1 -0
s		2619	+1 -1
t		2620	+0 -1
u		2621	+1 -1
v		2622	+1 -1
w		2623	+1 -1
x		2624	+1 -1
y		2625	+1 -1
z		2626	+1 -1
A		2501	+1 -1
B		2502	+1 -1
C		2503	+1 -1
D		2504	+1 -1
E		2505	+1 -1
F		2506	+1 -1
G		2507	+1 -1
H		2508	+1 -1
I		2509	+1 -1
J		2510	+1 -1
K		2511	+1 -1
L		2512	+1 -1
M		2513	+1 -1
N		2514	+1 -1
O		2515	+1 -1
P		2516	+1 -1
Q		2517	+1 -1
R		2518	+1 -1
S		2519	+1 -1
T		2520	+1 -1
U		2521	+1 -1
V		2522	+1 -1
W		2523	+1 -1
X		2524	+1 -1
Y		2525	+1 -1
Z		2526	+1 -1
zero		2700
one		2701
two		2702
three		2703
four		2704
five		2705
six		2706
seven		2707
eight		2708
nine		2709
period		2710
comma		2711
colon		2712
semicolon	2713
exclam		2714
question	2715
quotesingle	2727
dollar		2719
slash		802
backslash	804
parenleft	2721	+0 -2
parenright	2722	+2 -0
bar		723
hyphen		224
plus		2725
equal		2726
asterisk	2723
periodcentered	729
quoteleft	2716
quoteright	2717
numbersign	733
ampersand	2718
bullet		751
bracketleft	1405
bracketright	1406
braceleft	1407
braceright	1408
asciitilde	2246
asciicircum	2247
less		2241
greater		2242
at		2273
percent		2271
section		2276
quotedbl	2728
tilde		1246
dagger		2277
daggerdbl	2278
SHAR_EOF
fi # end of overwriting check
if test -f 'HerPlaO.sel'
then
	echo shar: will not over-write existing file "'HerPlaO.sel'"
else
cat << \SHAR_EOF > 'HerPlaO.sel'
longname	Hershey-Plain-Oblique
shortname	HerPlaO
troffname	hP
penwidth	0.8
italicangle	-20
#
space		2698
.notdef		735
a		2601	+1 -1
b		2602	+1 -1
c		2603	+1 -1
d		2604	+1 -1
e		2605	+1 -1
f		2606	+1 -1
g		2607	+1 -1
h		2608	+1 -1
i		2609	+1 -1
j		2610	+1 -1
k		2611	+1 -1
l		2612	+1 -1
m		2613	+1 -1
n		2614	+1 -1
o		2615	+1 -1
p		2616	+1 -1
q		2617	+1 -1
r		2618	+1 -0
s		2619	+1 -1
t		2620	+0 -1
u		2621	+1 -1
v		2622	+1 -1
w		2623	+1 -1
x		2624	+1 -1
y		2625	+1 -1
z		2626	+1 -1
A		2501	+1 -1
B		2502	+1 -1
C		2503	+1 -1
D		2504	+1 -1
E		2505	+1 -1
F		2506	+1 -1
G		2507	+1 -1
H		2508	+1 -1
I		2509	+1 -1
J		2510	+1 -1
K		2511	+1 -1
L		2512	+1 -1
M		2513	+1 -1
N		2514	+1 -1
O		2515	+1 -1
P		2516	+1 -1
Q		2517	+1 -1
R		2518	+1 -1
S		2519	+1 -1
T		2520	+1 -1
U		2521	+1 -1
V		2522	+1 -1
W		2523	+1 -1
X		2524	+1 -1
Y		2525	+1 -1
Z		2526	+1 -1
zero		2700
one		2701
two		2702
three		2703
four		2704
five		2705
six		2706
seven		2707
eight		2708
nine		2709
period		2710
comma		2711
colon		2712
semicolon	2713
exclam		2714
question	2715
quotesingle	2727
dollar		2719
slash		802
backslash	804
parenleft	2721	+0 -2
parenright	2722	+2 -0
bar		723
hyphen		224
plus		2725
equal		2726
asterisk	2723
periodcentered	729
quoteleft	2716
quoteright	2717
numbersign	733
ampersand	2718
bullet		751
bracketleft	1405
bracketright	1406
braceleft	1407
braceright	1408
asciitilde	2246
asciicircum	2247
less		2241
greater		2242
at		2273
percent		2271
section		2276
quotedbl	2728
tilde		1246
dagger		2277
daggerdbl	2278
SHAR_EOF
fi # end of overwriting check
if test -f 'HerScrCom.sel'
then
	echo shar: will not over-write existing file "'HerScrCom.sel'"
else
cat << \SHAR_EOF > 'HerScrCom.sel'
longname	Hershey-Script-Complex
shortname	HerScrCom
troffname	sc
penwidth	0.5
#
space		2748
.notdef		735
a		2651	+1 -0
b		2652
c		2653	+1 -0
d		2654
e		2655
f		2656
g		2657
h		2658
i		2659	+1 -0
j		2660
k		2661
l		2662
m		2663
n		2664
o		2665	+1 -0
p		2666
q		2667
r		2668
s		2669
t		2670
u		2671	+1 -0
v		2672	+1 -0
w		2673
x		2674
y		2675	+1 -0
z		2676
A		2551
B		2552
C		2553
D		2554
E		2555
F		2556
G		2557
H		2558
I		2559
J		2560
K		2561
L		2562
M		2563
N		2564
O		2565
P		2566
Q		2567
R		2568
S		2569
T		2570
U		2571
V		2572
W		2573
X		2574
Y		2575
Z		2576
zero		2750
one		2751
two		2752
three		2753
four		2754
five		2755
six		2756
seven		2757
eight		2758
nine		2759
period		2760
comma		2761
colon		2762
semicolon	2763
exclam		2764
question	2765
quotesingle	2777
dollar		2769
slash		802
backslash	804
parenleft	2771	+0 -1
parenright	2772	+1 -0
bar		723
hyphen		224
plus		2725
equal		2726
asterisk	2773
periodcentered	729
quoteleft	2766
quoteright	2767
numbersign	733
ampersand	734
bullet		751	
bracketleft	1405
bracketright	1406
braceleft	1407
braceright	1408
asciitilde	2246
asciicircum	2247
less		2241
greater		2242
at		2273
percent		2271
section		2276
quotedbl	2778
tilde		1246
dagger		2277
daggerdbl	2278
SHAR_EOF
fi # end of overwriting check
if test -f 'HerScrComB.sel'
then
	echo shar: will not over-write existing file "'HerScrComB.sel'"
else
cat << \SHAR_EOF > 'HerScrComB.sel'
longname	Hershey-Script-Complex-Bold
shortname	HerScrComB
troffname	Sc
penwidth	2.2
#
space		2748
.notdef		735
a		2651
b		2652
c		2653
d		2654
e		2655
f		2656
g		2657
h		2658
i		2659
j		2660
k		2661
l		2662
m		2663
n		2664
o		2665
p		2666
q		2667
r		2668
s		2669
t		2670
u		2671
v		2672
w		2673
x		2674
y		2675
z		2676
A		2551
B		2552
C		2553
D		2554
E		2555
F		2556
G		2557
H		2558
I		2559
J		2560
K		2561
L		2562
M		2563
N		2564
O		2565
P		2566
Q		2567
R		2568
S		2569
T		2570
U		2571
V		2572
W		2573
X		2574
Y		2575
Z		2576
zero		2750
one		2751
two		2752
three		2753
four		2754
five		2755
six		2756
seven		2757
eight		2758
nine		2759
period		2760
comma		2761
colon		2762
semicolon	2763
exclam		2764
question	2765
quotesingle	2777
dollar		2769
slash		802
backslash	804
parenleft	2771
parenright	2772
bar		723
hyphen		224
plus		2725
equal		2726
asterisk	2773
periodcentered	729
quoteleft	2766
quoteright	2767
numbersign	733
ampersand	734
bullet		751	
bracketleft	1405
bracketright	1406
braceleft	1407
braceright	1408
asciitilde	2246
asciicircum	2247
less		2241
greater		2242
at		2273
percent		2271
section		2276
quotedbl	2778
tilde		1246
dagger		2277
daggerdbl	2278
SHAR_EOF
fi # end of overwriting check
if test -f 'HerScrComO.sel'
then
	echo shar: will not over-write existing file "'HerScrComO.sel'"
else
cat << \SHAR_EOF > 'HerScrComO.sel'
longname	Hershey-Script-Complex-Oblique
shortname	HerScrComO
troffname	sC
penwidth	1.0
italicangle	-30
#
space		2748
.notdef		735
a		2651
b		2652
c		2653
d		2654
e		2655
f		2656
g		2657
h		2658
i		2659
j		2660
k		2661
l		2662
m		2663
n		2664
o		2665
p		2666
q		2667
r		2668
s		2669
t		2670
u		2671
v		2672
w		2673
x		2674
y		2675
z		2676
A		2551
B		2552
C		2553
D		2554
E		2555
F		2556
G		2557
H		2558
I		2559
J		2560
K		2561
L		2562
M		2563
N		2564
O		2565
P		2566
Q		2567
R		2568
S		2569
T		2570
U		2571
V		2572
W		2573
X		2574
Y		2575
Z		2576
zero		2750
one		2751
two		2752
three		2753
four		2754
five		2755
six		2756
seven		2757
eight		2758
nine		2759
period		2760
comma		2761
colon		2762
semicolon	2763
exclam		2764
question	2765
quotesingle	2777
dollar		2769
slash		802
backslash	804
parenleft	2771
parenright	2772
bar		723
hyphen		224
plus		2725
equal		2726
asterisk	2773
periodcentered	729
quoteleft	2766
quoteright	2767
numbersign	733
ampersand	734
bullet		751	
bracketleft	1405
bracketright	1406
braceleft	1407
braceright	1408
asciitilde	2246
asciicircum	2247
less		2241
greater		2242
at		2273
percent		2271
section		2276
quotedbl	2778
tilde		1246
dagger		2277
daggerdbl	2278
SHAR_EOF
fi # end of overwriting check
if test -f 'HerScrSim.sel'
then
	echo shar: will not over-write existing file "'HerScrSim.sel'"
else
cat << \SHAR_EOF > 'HerScrSim.sel'
longname	Hershey-Script-Simplex
shortname	HerScrSim
troffname	ss
penwidth	0.5
#
space		698
.notdef		735
a		651
b		652
c		653
d		654
e		655
f		656
g		657
h		658
i		659
j		660
k		661
l		662
m		663
n		664
o		665
p		666
q		667
r		668
s		669
t		670
u		671
v		672
w		673
x		674
y		675
z		676
A		551
B		552
C		553
D		554
E		555
F		556
G		557
H		558
I		559
J		560
K		561
L		562
M		563
N		564
O		565
P		566
Q		567
R		568
S		569
T		570
U		571
V		572
W		573
X		574
Y		575
Z		576
zero		700
one		701
two		702
three		703
four		704
five		705
six		706
seven		707
eight		708
nine		709
period		710
comma		711
colon		712
semicolon	713
exclam		714
question	715
quotesingle	716
dollar		719
slash		802
backslash	804
parenleft	721
parenright	722
bar		723
hyphen		224
plus		725
equal		726
asterisk	728
periodcentered	729
quoteleft	730
quoteright	731
numbersign	733
ampersand	734
bullet		751	
bracketleft	1405
bracketright	1406
braceleft	1407
braceright	1408
asciitilde	2246
asciicircum	2247
less		2241
greater		2242
at		2273
percent		2271
section		2276
quotedbl	717
tilde		1246
dagger		2277
daggerdbl	2278
SHAR_EOF
fi # end of overwriting check
if test -f 'HerScrSimB.sel'
then
	echo shar: will not over-write existing file "'HerScrSimB.sel'"
else
cat << \SHAR_EOF > 'HerScrSimB.sel'
longname	Hershey-Script-Simplex-Bold
shortname	HerScrSimB
troffname	Ss
penwidth	2.2
#
space		698
.notdef		735
a		651
b		652
c		653
d		654
e		655
f		656
g		657
h		658
i		659
j		660
k		661
l		662
m		663
n		664
o		665
p		666
q		667
r		668
s		669
t		670
u		671
v		672
w		673
x		674
y		675
z		676
A		551
B		552
C		553
D		554
E		555
F		556
G		557
H		558
I		559
J		560
K		561
L		562
M		563
N		564
O		565
P		566
Q		567
R		568
S		569
T		570
U		571
V		572
W		573
X		574
Y		575
Z		576
zero		700
one		701
two		702
three		703
four		704
five		705
six		706
seven		707
eight		708
nine		709
period		710
comma		711
colon		712
semicolon	713
exclam		714
question	715
quotesingle	716
dollar		719
slash		802
backslash	804
parenleft	721
parenright	722
bar		723
hyphen		224
plus		725
equal		726
asterisk	728
periodcentered	729
quoteleft	730
quoteright	731
numbersign	733
ampersand	734
bullet		751	
bracketleft	1405
bracketright	1406
braceleft	1407
braceright	1408
asciitilde	2246
asciicircum	2247
less		2241
greater		2242
at		2273
percent		2271
section		2276
quotedbl	717
tilde		1246
dagger		2277
daggerdbl	2278
SHAR_EOF
fi # end of overwriting check
if test -f 'HerScrSimO.sel'
then
	echo shar: will not over-write existing file "'HerScrSimO.sel'"
else
cat << \SHAR_EOF > 'HerScrSimO.sel'
longname	Hershey-Script-Simplex-Oblique
shortname	HerScrSimO
troffname	sS
penwidth	0.7
italicangle	-30
#
space		698
.notdef		735
a		651
b		652
c		653
d		654
e		655
f		656
g		657
h		658
i		659
j		660
k		661
l		662
m		663
n		664
o		665
p		666
q		667
r		668
s		669
t		670
u		671
v		672
w		673
x		674
y		675
z		676
A		551
B		552
C		553
D		554
E		555
F		556
G		557
H		558
I		559
J		560
K		561
L		562
M		563
N		564
O		565
P		566
Q		567
R		568
S		569
T		570
U		571
V		572
W		573
X		574
Y		575
Z		576
zero		700
one		701
two		702
three		703
four		704
five		705
six		706
seven		707
eight		708
nine		709
period		710
comma		711
colon		712
semicolon	713
exclam		714
question	715
quotesingle	716
dollar		719
slash		802
backslash	804
parenleft	721
parenright	722
bar		723
hyphen		224
plus		725
equal		726
asterisk	728
periodcentered	729
quoteleft	730
quoteright	731
numbersign	733
ampersand	734
bullet		751	
bracketleft	1405
bracketright	1406
braceleft	1407
braceright	1408
asciitilde	2246
asciicircum	2247
less		2241
greater		2242
at		2273
percent		2271
section		2276
quotedbl	717
tilde		1246
dagger		2277
daggerdbl	2278
SHAR_EOF
fi # end of overwriting check
if test -f 'HerTri.sel'
then
	echo shar: will not over-write existing file "'HerTri.sel'"
else
cat << \SHAR_EOF > 'HerTri.sel'
longname	Hershey-Triplex
shortname	HerTri
troffname	ht
penwidth	0.6
#
space		3198
.notdef		735
a		3101	+1 -1
b		3102	+1 -1
c		3103	+1 -1
d		3104	+1 -0
e		3105	+2 -1
f		3106	+0 -1
g		3107	+1 -1
h		3108	+1 -1
i		3109
j		3110	+2 -1
k		3111
l		3112
m		3113	+0 -1
n		3114	+0 -1
o		3115	+2 -1
p		3116	+0 -1
q		3117	+1 -0
r		3118
s		3119	+1 -1
t		3120	+1 -0
u		3121	+1 -1
v		3122
w		3123
x		3124
y		3125	+1 -0
z		3126
A		3001
B		3002
C		3003
D		3004
E		3005	+0 -1
F		3006
G		3007
H		3008
I		3009
J		3010
K		3011
L		3012
M		3013
N		3014
O		3015	+1 -1
P		3016	+0 -1
Q		3017
R		3018
S		3019	+1 -1
T		3020
U		3021
V		3022
W		3023
X		3024
Y		3025
Z		3026
zero		3200
one		3201
two		3202
three		3203
four		3204
five		3205
six		3206
seven		3207
eight		3208
nine		3209
period		3210
comma		3211
colon		3212
semicolon	3213
exclam		3214
question	3215
quotesingle	3227
dollar		3219
slash		802
backslash	804
parenleft	3221	+0 -1
parenright	3222	+1 -0
bar		723
hyphen		224
plus		3225
equal		3226
asterisk	3223
periodcentered	729
quoteleft	3216
quoteright	3217
numbersign	733
ampersand	3218
bullet		751
bracketleft	1405
bracketright	1406
braceleft	1407
braceright	1408
asciitilde	2246
asciicircum	2247
less		2241
greater		2242
at		2273
percent		2271
section		2276
quotedbl	3228
tilde		1246
dagger		2277
daggerdbl	2278
SHAR_EOF
fi # end of overwriting check
if test -f 'HerTriB.sel'
then
	echo shar: will not over-write existing file "'HerTriB.sel'"
else
cat << \SHAR_EOF > 'HerTriB.sel'
longname	Hershey-Triplex-Bold
shortname	HerTriB
troffname	Ht
penwidth	2.1
#
space		3198
.notdef		735
a		3101	+1 -1
b		3102	+1 -1
c		3103	+1 -1
d		3104	+1 -0
e		3105	+2 -1
f		3106	+0 -1
g		3107	+1 -1
h		3108	+1 -1
i		3109
j		3110	+2 -1
k		3111
l		3112
m		3113	+0 -1
n		3114	+0 -1
o		3115	+2 -1
p		3116	+0 -1
q		3117	+1 -0
r		3118
s		3119	+1 -1
t		3120	+1 -0
u		3121	+1 -1
v		3122
w		3123
x		3124
y		3125	+1 -0
z		3126
A		3001
B		3002
C		3003
D		3004
E		3005	+0 -1
F		3006
G		3007
H		3008
I		3009
J		3010
K		3011
L		3012
M		3013
N		3014
O		3015	+1 -1
P		3016	+0 -1
Q		3017
R		3018
S		3019	+1 -1
T		3020
U		3021
V		3022
W		3023
X		3024
Y		3025
Z		3026
zero		3200
one		3201
two		3202
three		3203
four		3204
five		3205
six		3206
seven		3207
eight		3208
nine		3209
period		3210
comma		3211
colon		3212
semicolon	3213
exclam		3214
question	3215
quotesingle	3227
dollar		3219
slash		802
backslash	804
parenleft	3221	+0 -1
parenright	3222	+1 -0
bar		723
hyphen		224
plus		3225
equal		3226
asterisk	3223
periodcentered	729
quoteleft	3216
quoteright	3217
numbersign	733
ampersand	3218
bullet		751
bracketleft	1405
bracketright	1406
braceleft	1407
braceright	1408
asciitilde	2246
asciicircum	2247
less		2241
greater		2242
at		2273
percent		2271
section		2276
quotedbl	3228
tilde		1246
dagger		2277
daggerdbl	2278
SHAR_EOF
fi # end of overwriting check
if test -f 'HerTriBI.sel'
then
	echo shar: will not over-write existing file "'HerTriBI.sel'"
else
cat << \SHAR_EOF > 'HerTriBI.sel'
longname	Hershey-Triplex-Bold-Italic
shortname	HerTriBI
troffname	HT
penwidth	2.0
italicangle	-20
#
space		3198
.notdef		735
a		3151	+1 -1
b		3152	+1 -1
c		3153	+1 -1
d		3154	+1 -0
e		3155	+1 -1
f		3156	+0 -1
g		3157	+1 -1
h		3158	+1 -1
i		3159
j		3160	+2 -1
k		3161
l		3162	+1 -0
m		3163	+0 -1
n		3164	+0 -1
o		3165	+2 -1
p		3166	+0 -1
q		3167	+1 -0
r		3168
s		3169
t		3170	+1 -0
u		3171	+1 -0
v		3172	+0 -1
w		3173
x		3174
y		3175
z		3176
A		3051	+0 -1
B		3052
C		3053
D		3054
E		3055	+0 -1
F		3056
G		3057
H		3058
I		3059
J		3060
K		3061
L		3062
M		3063
N		3064
O		3065	+1 -1
P		3066	+0 -1
Q		3067
R		3068
S		3069	+1 -1
T		3070
U		3071
V		3072
W		3073
X		3074
Y		3075
Z		3076
zero		3250
one		3251
two		3252
three		3253
four		3254
five		3255
six		3256
seven		3257
eight		3258
nine		3259
period		3260
comma		3261
colon		3262
semicolon	3263
exclam		3264
question	3265
quotesingle	3277
dollar		3269
slash		802
backslash	804
parenleft	3271	+0 -1
parenright	3272	+1 -0
bar		723
hyphen		224
plus		3275
equal		3276
asterisk	3273
periodcentered	729
quoteleft	3266
quoteright	3267
numbersign	733
ampersand	3268
bullet		751
bracketleft	1405
bracketright	1406
braceleft	1407
braceright	1408
asciitilde	2246
asciicircum	2247
less		2241
greater		2242
at		2273
percent		2271
section		2276
quotedbl	3278
tilde		1246
dagger		2277
daggerdbl	2278
SHAR_EOF
fi # end of overwriting check
if test -f 'HerTriI.sel'
then
	echo shar: will not over-write existing file "'HerTriI.sel'"
else
cat << \SHAR_EOF > 'HerTriI.sel'
longname	Hershey-Triplex-Italic
shortname	HerTriI
troffname	hT
penwidth	0.7
#
space		3198
.notdef		735
a		3151	+1 -1
b		3152	+1 -1
c		3153	+1 -1
d		3154	+1 -0
e		3155	+1 -1
f		3156	+0 -1
g		3157	+1 -1
h		3158	+1 -1
i		3159
j		3160	+2 -1
k		3161
l		3162	+1 -0
m		3163	+0 -1
n		3164	+0 -1
o		3165	+2 -1
p		3166	+0 -1
q		3167	+1 -0
r		3168
s		3169
t		3170	+1 -0
u		3171	+1 -0
v		3172	+0 -1
w		3173
x		3174
y		3175
z		3176
A		3051	+0 -1
B		3052
C		3053
D		3054
E		3055	+0 -1
F		3056
G		3057
H		3058
I		3059
J		3060
K		3061
L		3062
M		3063
N		3064
O		3065	+1 -1
P		3066	+0 -1
Q		3067
R		3068
S		3069	+1 -1
T		3070
U		3071
V		3072
W		3073
X		3074
Y		3075
Z		3076
zero		3250
one		3251
two		3252
three		3253
four		3254
five		3255
six		3256
seven		3257
eight		3258
nine		3259
period		3260
comma		3261
colon		3262
semicolon	3263
exclam		3264
question	3265
quotesingle	3277
dollar		3269
slash		802
backslash	804
parenleft	3271	+0 -1
parenright	3272	+1 -0
bar		723
hyphen		224
plus		3275
equal		3276
asterisk	3273
periodcentered	729
quoteleft	3266
quoteright	3267
numbersign	733
ampersand	3268
bullet		751
bracketleft	1405
bracketright	1406
braceleft	1407
braceright	1408
asciitilde	2246
asciicircum	2247
less		2241
greater		2242
at		2273
percent		2271
section		2276
quotedbl	3278
tilde		1246
dagger		2277
daggerdbl	2278
SHAR_EOF
fi # end of overwriting check
#	End of shell archive
exit 0
12-May-86 19:07:55-PDT,1194;000000000000
Mail-From: REULING created at 12-May-86 19:07:19
Return-Path: <@Cs.Ucl.AC.UK,@serc-icf.engineering.cambridge.ac.uk:PH10@phoenix.cambridge.ac.uk>
Received: from Cs.Ucl.AC.UK by SU-SCORE.ARPA with TCP; Fri 9 May 86 07:32:25-PDT
Received: from serc-icf.engineering.cambridge.ac.uk by 44d.Cs.Ucl.AC.UK 
           via Janet with NIFTP  id a004951; 9 May 86 15:04 BST
Date: Friday, 9 May 1986 15:03:16
To: INFO-POSTSCRIPT <@Cs.Ucl.AC.UK,@cs.ucl.ac.uk:INFO-POSTSCRIPT@su-score.arpa>
Subject: LaserWriter
From: "Cambridge Phoenix - CAM.PHX@CAM.ENG-ICF" <PH10%phoenix.cambridge.ac.uk@Cs.Ucl.AC.UK>
Authentic-sender:   MAIL@CAGA
ReSent-Date: Mon 12 May 86 19:07:19-PDT
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12206234248.16.REULING@SU-SCORE.ARPA>

It appears that the character `bar' (ASCII code 124) in the Times-Roman
font in the LaserWriter Plus is not the same as in the original
LaserWriter. The character is shorter and fatter, though its width
is unaltered. This change is not mentioned in the update document
for the LaserWriter Plus, and seems rather gratuitous.
      Philip Hazel
      University of Cambridge
12-May-86 19:08:19-PDT,1048;000000000000
Mail-From: REULING created at 12-May-86 19:07:35
Return-Path: <micropro!kepler!mojo@lll-crg.ARPA>
Received: from lll-crg.ARPA by SU-SCORE.ARPA with TCP; Mon 12 May 86 12:20:37-PDT
Received: by lll-crg.ARPA id AA25310; Mon, 12 May 86 11:43:15 pdt
	id AA25310; Mon, 12 May 86 11:43:15 pdt
Date: Mon, 12 May 86 11:43:15 pdt
Message-Id: <8605121843.AA25310@lll-crg.ARPA>
To: info-postscript@score.stanford.edu
From: micropro!kepler!mojo@lll-crg.ARPA
Subject: Wanted: an image scan
ReSent-Date: Mon 12 May 86 19:07:34-PDT
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12206234296.16.REULING@SU-SCORE.ARPA>

I have a piece of line art for which I need a PostScript image scan.
Is there anyone in the Bay Area who could make one for me?

Mini tanks...
    __  /        __  /        __  /
 __||||/__    __||||/__    __||||/__
(O_O_O_O_O)  (O_O_O_O_O)  (O_O_O_O_O)

Mojo
... Morris Jones, MicroPro Product Development
{lll-crg,ptsfa,dual,well,pyramid}!micropro!kepler!mojo


12-May-86 19:08:45-PDT,960;000000000000
Mail-From: REULING created at 12-May-86 19:08:11
Return-Path: <BILL@CS.COLUMBIA.EDU>
Received: from CS.COLUMBIA.EDU by SU-SCORE.ARPA with TCP; Mon 5 May 86 10:57:43-PDT
Date: Mon 5 May 86 13:28:09-EDT
From: Bill Schilit <BILL@CS.COLUMBIA.EDU>
Subject: QED in postscript
To: scribe-hacks@UTAH-CS.ARPA
cc: info-postscript@SU-SCORE.ARPA
ReSent-Date: Mon 12 May 86 19:08:11-PDT
ReSent-From: John Reuling <Reuling@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12206234406.16.REULING@SU-SCORE.ARPA>


I'm trying to print the QED symbol (a small box) using scribe 1405,
mathematics10 library, and the laserwriter... but scribe tells me the
character is "unavailable".  So I went to add QED to scribe's
pssymb.fon file but, surprise, QED does not exist in the laserwriter
font manuals I have!

Does anyone know if the QED symbol is available in the laserwriter
or if there is a way to make scribe print one?

- Bill
-------
14-May-86 18:26:47-PDT,1022;000000000000
Mail-From: BARCKLAY created at 14-May-86 18:25:38
Return-Path: <robs%tektools.tek.csnet@CSNET-RELAY.ARPA>
Received: from CSNET-RELAY.ARPA by SU-SCORE.ARPA with TCP; Wed 14 May 86 13:05:07-PDT
Received: from tektronix by csnet-relay.csnet id ae00796; 14 May 86 15:45 EDT
Received: by tektronix.TEK (5.31/6.12)
	id AA27064; Wed, 14 May 86 09:08:15 PDT
Received: by tektools (5.31/5.14)
	id AA22400; Wed, 14 May 86 09:07:28 PDT
Message-Id: <8605141607.AA22400@tektools>
To: info-postscript@SU-SCORE.ARPA
Subject: troff font files for LW+
Date: 14 May 86 09:07:26 PDT (Wed)
From: robs%tektools.tek.csnet@CSNET-RELAY.ARPA
ReSent-Date: Wed 14 May 86 18:25:38-PDT
ReSent-From: Bob Barcklay <BARCKLAY@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12206750950.16.BARCKLAY@SU-SCORE.ARPA>


Does anyone have the troff font description files that correspond
to the new fonts available in the LaserWriter Plus, or know where
they can be had ?

				Robert Sleator
				tektronix!tektools!robs
14-May-86 18:28:04-PDT,1677;000000000000
Mail-From: BARCKLAY created at 14-May-86 18:26:02
Return-Path: <wm%tekchips.tek.csnet@CSNET-RELAY.ARPA>
Received: from CSNET-RELAY.ARPA by SU-SCORE.ARPA with TCP; Wed 14 May 86 13:06:11-PDT
Received: from tektronix by csnet-relay.csnet id ag00796; 14 May 86 15:46 EDT
Received: by tektronix.TEK (5.31/6.12)
	id AA29061; Wed, 14 May 86 09:42:52 PDT
Received: by tekchips (5.31/5.14)
	id AA24037; Wed, 14 May 86 09:45:58 PDT
Message-Id: <8605141645.AA24037@tekchips>
To: info-postscript@SU-SCORE.ARPA
Subject: The popular press rides again
Date: 14 May 86 09:45:55 PDT (Wed)
From: Wm Leler <wm%tekchips.tek.csnet@CSNET-RELAY.ARPA>
ReSent-Date: Wed 14 May 86 18:26:02-PDT
ReSent-From: Bob Barcklay <BARCKLAY@SU-SCORE.ARPA>
ReSent-To: INFO-POSTSCRIPT: ;
ReSent-Message-ID: <12206751022.16.BARCKLAY@SU-SCORE.ARPA>

The following quote is from the Comdex conference daily newpaper:

 A laser printer development spotted by Camilo Wilson, president
 of Lifetree Software, is that the Hewlett-Packard control
 language is emerging as a de facto standard, ``largely because
 the HP control language is non-proprietary,'' he said.
 PostScript, the control language embedded in Apple's Laserwriter
 printer is proprietary -- a fact that Wilson thinks is
 responsible for few laser printers standardizing on PostScript.

No flames please -- I know the PostScript language is completely
non-proprietary, but apparently many people don't (and some
people don't bother to get their facts straight!).  The above
quote was shown to me by a friend who works for the laser
printer division of HP.  They were showing it around the office
for a good giggle.

Wm
