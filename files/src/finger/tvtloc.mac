;[SRI-NIC]SRC:<FINGER>TVTLOC.MAC.30,  5-May-88 01:42:31, Edit by MKL
; set location as [a.b.c.d] first, since resolve can take a while
;[SRI-NIC]SRC:<FINGER>TVTLOC.MAC.2, 14-Apr-88 15:28:07, Edit by MKL
; hack TTYLOC into TVTLOC.
; program receives IPCFs with TVT# in 1st word, from ACJ,
; and sets that tty's loc with host name.

TITLE TVTLOC
SUBTTL Mark K. Lottor, 1988	
SUBTTL Frank M. Fujimoto / Stanford University / July, 1983

SEARCH MONSYM,MACSYM,JOBDAT,FNGDEF
.REQUIRE SYS:MACREL
.TEXT "TVTLOC/SAVE"
.TEXT "/SYMSEG:PSECT:CODE"
ASUPPRESS
SALL

VMAJOR==2
VMINOR==0
VWHO==4
VEDIT==5

SUBTTL Macro definitions

;Like TMSG but output an error string
DEFINE EMSG (STRING) <
	HRROI A,[ASCIZ \STRING\] ;;Get the string
	ESOUT%			;;And output it
>;EMSG

;Like TMSG but prepend a '%' - for warnings
DEFINE WMSG (STRING) <
	TMSG <%'STRING>
>;WMSG

;A Carriage return
DEFINE CRLF <
	HRROI A,[BYTE (7) .CHCRT,.CHLFD,0] ;;Get a CRLF
	PSOUT%			;And do it
>;CRLF

;Dynamically generate a flag.  No argument initializes
DEFINE FLAG. (FLAG) <
IFB <FLAG>,<..FLAG==1B0>	;;No argument, initialize
IFNB <FLAG>,<
 IFE ..FLAG,<PRINTX Too many flags, not creating FLAG>
 IFN ..FLAG,<
  FLAG==..FLAG			;;Define flag
  ..FLAG==..FLAG_<-1>		;;Setup for next flag
 >;IFN ..FLAG
>;IFNB
>;FLAG.

;Make a possible string pointer a byte pointer
DEFINE MAKPTR (AC) <
	TLC AC,-1		;;Twiddle all bits
	TLCN AC,-1		;;Did our pointer have -1,,val?
	 HRLI AC,(<POINT 7,0>)	;;Yes, make a byte pointer
>;MAKPTR

;Determine whether char in REG is CR or LF
;Returns +1 if so, +2 if not
DEFINE NCRLFP (REG) <
	CAIE REG,.CHCRT		;;Is it a CR?
	 CAIN REG,.CHLFD	;;How about a LF?
>;NCRLFP

;AND if not JSYS error
DEFINE ANNJE. <
	..TAGF (ERJMP,)
>;ANNJE.

;AND if JSYS error
DEFINE ANJER. <
	ERJMP .+2
	..TAGF (JRST,)
>;ANJER.

;Define first word in a table
DEFINE TABTOP <
.TABLC==.
	0			;;We'll fill this in later
>;TABTOP

;Actually fill in the first word
DEFINE TABBOT <
.TABSV==.
RELOC .TABLC
	.TABSV-.TABLC-1,,.TABSV-.TABLC-1
RELOC .TABSV
>;TABBOT

;Define a switch

DEFINE SWIENT (STRING,VALUE) <
	[ASCIZ \STRING\],,VALUE
>;SWIENT

;Uppercase char in AC

DEFINE UPCASE (AC) <
	CAIL AC,"a"		;;Is it .GE. a lower case a?
	 CAILE AC,"z"		;;And .LE. a lower case z?
	  SKPA			;;Yes...
	   SUBI AC,"a"-"A"	;;Make it upper case
>;UPCASE

SUBTTL Constant and block definitions

FL=0				;Flags register
A=1
B=2
C=3
D=4
E=5
FIL=5				;What file we're looking at now

PDLEN==200			;Length of push-down stack
NAMLEN==40			;How much we can take in RSCAN
FILNML==30			;How long a filename we can take
MAXFIL==10			;How many files we can nest
LABLEN==3			;Maximum length for labels

DATORG==1000			;Uninitialized impure data
PURORG==135000			;Pure data
CODORG==140000			;Code
PAGORG==200000			;Paged data

FILTOK=="*"			;Token that designates a file
SWITOK=="/"			;Token that designates a switch
CMTTOK==";"			;Token that designates a comment
LABTOK=="<"			;This line contains a label
GTOTOK==">"			;Go to label
PRTTOK=="="			;Print this line literally
PRCTOK=="+"			;Print this line with a CRLF
MORTOK=="?"			;Do a more, " ", CR, "Y" win, others lose
INLTOK==42			;Double quote, do inline

;Different entries for stacked command files
TT.JFN==0			;JFN for the file
TT.PAG==1			;Page number in this process for file
TT.LEN==2			;Length of the file
TT.PTR==3			;Pointer to our current location in file
TT.MAX==4			;How many of these items we have

FLAG.				;Initialize flags
FLAG. FL%JCL			;If we're reading from JCL
FLAG. FL%SWI			;If we're doing a switch
FLAG. FL%PCR			;If we're doing a "!" line, not "="
FLAG. FL%BAT			;Are we a batch job?
FLAG. FL%NEW			;Is this a new file?
FLAG. FL%TIN			;Is the file we're looking at the default?

OPDEF SKPA [TRNA]		;A faster skip always

;Impure storage

.PSECT DATA,DATORG

PDL:	BLOCK PDLEN		;The push-down stack
BINJFN:	BLOCK 1			;JFN for the bin file
BINPAG:	BLOCK 1			;Location for TTYLOC bin file
BINLEN:	BLOCK 1			;Number of pages in bin file
FILSTK:	BLOCK TT.MAX*MAXFIL	;Block for stacking files
OURNAM:	BLOCK NAMLEN		;Hold our foreign host name
NAMBUF:	BLOCK NAMLEN		;Buffer for name
FILNAM:	BLOCK FILNML		;Name of file we're going to read in
TTYSPD:	BLOCK 1			;Speeds of terminal
TVTNUM:	BLOCK 1			;Our tty number
OURJOB:	BLOCK 1			;Our job number
OURUSR:	BLOCK 1			;Our user number

;IPCF STUFF
CrePak:	IP%CPD			;Make me a PID
MyPID:	0
	0			;To <SYSTEM>INFO
	4,,ArgBlk
PakLen==.-CrePak

ArgBlk:	.IPCII			;Assign this name to the PID
	0
	Asciz "TVTLOC"

InfPak:	0			;<SYSTEM>INFO's reply.
	0
	0
	4,,InfBlk

InfBlk:	Block 4

ShoPak:	0
	0
	0
	1,,Comand

Comand:	0

tvtmin:	0
tvtmax:	0

.ENDPS

;Pure storage

.PSECT PURE,PURORG

BINNAM:	ASCIZ \SYSTEM:TTYLOC.BIN;P777775\ ;Name of bin file
NAMPTR:	POINT 7,NAMBUF		;Pointer to the name buffer

EVEC:	JRST START
	JRST REENT
	BYTE (3) VWHO (9) VMAJOR (6) VMINOR (18) VEDIT
EVECL==.-EVEC

.ENDPS

.PSECT PAGED,PAGORG

BINFIL:	BLOCK 100*1000		;Generous room for mapped files

.ENDPS

SUBTTL The code itself

.PSECT CODE,CODORG

START:
REENT:	TDZA FL,FL		;Zero all flags, not trying JCL
	RESET%			;Initialize the world
	MOVE P,[IOWD PDLEN,PDL]	;Set up push-down stack
	CALL INIT		;Set things up
	CALL MAPBIN		;Map in the bin file
LOOP:	Call GMSG		;GET IPCF MESSAGE and set location
	JRST LOOP

	CALL UNMBIN		;Unmap the bin file
	JRST STOP		;And go shut down

;Initialize the world

INIT:
	movei 1,707070
	movem 1,ourusr
	movem 1,ourjob

	hrloi a,377777
	movem a,tvtmin		;assume no TCP
	movem a,tvtmax
	movx a,tcp%nt		;get tvt function
	stat%
	 erjmp stop
	hrrzm b,tvtmin		;set first tvt
	hlro c,b		;- number of tvts
	sub b,c			;1+last tvt number
	hrrzm b,tvtmax

;GET OUR PIDS SETUP HERE
	Movei 1,PakLen
	Movei 2,CrePak
	MSEND%
	  erjmp [tmsg <Can't send request to <SYSTEM>INFO
>
		jrst stop]

	Move 1,MyPID
	Movem 1,InfPak+.IPCFR
	Movem 1,ShoPak+.IPCFR

	Movei 1,PakLen
	Movei 2,InfPak
	MRECV%
	  erjmp [tmsg <Can't get reply from <SYSTEM>INFO
>
		jrst stop]
	Load 1,IP%CFE,InfPak+.IPCFL
	Jumpn 1,[Cain 1,.IPCDN
		   jrst [tmsg <Someone already has a PID named 'TVTLOC'>
		  	 jrst stop]
		 tmsg <Random error reply from <SYSTEM>INFO>
	 	 jrst stop]
	RET	


;Map in the bin file
;Returns BINPAG/ Page number of bin file
;	 BINLEN/ Number of pages
;	 BINJFN/ JFN of bin file

MAPBIN:	SAVEAC <A,B,C>
	MOVEI A,BINFIL/1000	;Get the location of the bin file
	MOVEM A,BINPAG		;Save it away
	MOVE A,[SIXBIT \TTYJOB\] ;Want to see how many terminals on system
	SYSGT%			;Get the table
	HLRE A,B		;Get - number of ttys
	MOVNS A			;Make it positive
	IMULI A,.TDLEN		;Adjust to how many words should be in file
	LSH A,-^D9		;Make it a number of pages
	AOS A			;Increment 1 to account for 0 offset
	MOVEM A,BINLEN		;Save number of pages to map
	MOVX A,GJ%SHT!GJ%OLD	;Want to get the file
	HRROI B,BINNAM		;Pointer to name of file
	GTJFN%			;Try to get it
	IFJER.			;That didn't work...
	  TXO FL,FL%NEW		;Say this is a new file
	  MOVX A,GJ%SHT!GJ%FOU	;Try creating the file
	  HRROI B,BINNAM	;Get the name again
	  GTJFN%		;Try to get it
	ANJER.			;This time we're really losing
	  EMSG <Can't get TTYLOC bin file> ;Say we can't get it
	  JRST STOP		;Just shut down
	ENDIF.
	MOVEM A,BINJFN		;Save the JFN away
	MOVX B,OF%RD!OF%WR!OF%THW ;Thawed read/write access
	OPENF%			;Try to open the file
	IFJER.
	  MOVE A,BINJFN		;Get back the JFN
	  RLJFN%		;Release it
	   ERJMP .+1		;Ignore any errors
	  EMSG <Can't open TTYLOC bin file> ;We can't open it
	  JRST STOP		;Go shut down
	ENDIF.
	HRLZ A,BINJFN		;Get the JFN again
	MOVE B,BINPAG		;Get the page number to map into
	HRLI B,.FHSLF		;Map into our own process
	MOVE C,BINLEN		;Get how many pages to map in
	TXO C,PM%RD!PM%WR!PM%CNT ;Read/write access
	PMAP%			;Map it in
	TXNN FL,FL%NEW		;Is this a new file?
	 RET			;No, go back now
	MOVE A,BINPAG		;Get where the file is
	LSH A,^D9		;Make it a page number
	SETZM (A)		;Init the first location (and create the page)
	HRLI A,1(A)		;Make first dest,,first source
	MOVSS A			;Swap it to make a good BLT ac
	MOVE B,BINPAG		;Again, get the page number
	ADD B,BINLEN		;Get first page after file
	LSH B,^D9		;Make it a location
	BLT A,-1(B)		;Zero out the whole file
	RET			;Now go back


;WAIT FOR IPCF MESSAGE, AND GENERATE HOST NAME TO SET
GMSG:	Setzm ShoPak+.IPCFL
	Movei 1,PakLen
	Movei 2,ShoPak
	MRECV%
	  erjmp gmsg		;no problem
	Move 1,Comand		;get tty#
	Movem 1,Tvtnum

	caml 1,tvtmin		;is it a TVT?
	 caml 1,tvtmax
	  jrst gmsg		;no. skip this request

;	move 1,tvtnum
;	addi 1,400000		;make tty desig
;	hrroi 2,4
;	movei 3,.jijno		;get job num
;	GETJI%
;	 erjmp gmsg
;	movem 4,ourjob		;save job number

	movx a,tcp%tv		;argument is TVT
	hrr a,tvtnum		;TVT number
	hrroi b,7		;want host number (should be a symbolic name)
	hrroi c,e		;location of last logout
	stat%
	 erjmp gmsg

;first set location to host number in case resolve fails
	call gennum
	call setloc

	movei 1,.GTHNS
	setzm nambuf		;Start with nothing in name buffer
	move b,namptr		;Get pointer to buffer for string
	move c,e		;host num
	GTDOM%
	 erjmp [ret]		;no name, oh well number is set anyways
	call setloc
	RET			;done!

gennum:	move a,namptr
	movei b,"["
	idpb b,a
	ldb b,[point 8,e,11]
	movei 3,^d10
	NOUT%
	 jfcl
	movei b,"."
	idpb b,a
	ldb b,[point 8,e,19]
	NOUT%
	 jfcl
	movei b,"."
	idpb b,a
	ldb b,[point 8,e,27]
	NOUT%
	 jfcl
	movei b,"."
	idpb b,a
	ldb b,[point 8,e,35]
	NOUT%
	 jfcl
	movei b,"]"
	idpb b,a
	setz b,
	idpb b,a	
	RET


;GETNUM - Get a number from a string
;Takes A/ Pointer to number
;Returns A/ Updated pointer
;	 B/ value returned from NIN%
;+1 if failed
;+2 if succeeded

GETNUM:	SAVEAC <C>
	MAKPTR A		;Make this a byte pointer
	MOVEI C,^D10		;Radix decimal
	NIN%			;Try to get the number
	 ERJMP R		;Return +1 if failed
	LDB C,A			;Get the next char
	JUMPN C,R		;If it's not a null, we failed
	RETSKP			;otherwise we won

;Takes A/ function to MTOPR%
;Returns A/ What MTOPR% returned in C
GETMTP:	SAVEAC <B,C>
	MOVEM A,B		;Put argument in right place
	MOVEI A,.PRIOU		;Our tty
	MTOPR%			;Get the value
	MOVE A,C		;Get returned value
	RET			;And go back

;Flush all characters until an end of lin
;Takes FIL/ Pointer to file block
;Returns +1 - end of file reached
;	 +2 - got end of line, A/ First char on next line

FLSHLN:	SAVEAC <A>
	LDB A,TT.PTR(FIL)	;Get the last char we had
	DO.
	  JUMPE A,R		;Go back if we have nothing left in the file
	  CAIE A,.CHCRT		;Is the char from the file a CR?
	  IFSKP.
	    IBP TT.PTR(FIL)	;Yes, increment past the LF
	    EXIT.		;And go out of the loop
	  ENDIF.
	  CAIN A,.CHLFD		;But if we really have a line feed
	   EXIT.		;Go out now
	  ILDB A,TT.PTR(FIL)	;Otherwise get the next char
	  LOOP.			;And keep going to flush rest of line
	ENDDO.
	RETSKP			;Go back +2

;MAPFIL - Map in the file
;Takes FILNAM/ Name of file
;      FIL/ Pointer to last file block
;Returns +1 - Failure
;	 +2 - Success, FIL updated, if FL%TIN set then was '*'

MAPFIL:	SAVEAC <A,B,C,D>
	STKVAR <OLDFIL>
	MOVEM FIL,OLDFIL	;Save old pointer away
	IFE. FIL
	  MOVE D,BINPAG		;Yes, need to set up base
	  ADD D,BINLEN		;Add the length to the page number
	  MOVEI FIL,FILSTK	;And set up the pointer
	ELSE.			;Otherwise...
	  CAIE FIL,<TT.MAX-1>*MAXFIL+FILSTK ;At the top of the stack?
	  IFSKP.
	    WMSG <Can't nest files that deeply>
	    CRLF
	    RET			;Go back +1
	  ENDIF.
	  MOVE D,TT.PAG(FIL)	;Get location of last file
	  ADD D,TT.LEN(FIL)	;Get its length
	  ADDI FIL,TT.MAX	;Point to the next block
	ENDIF.
	MOVE A,[POINT 7,FILNAM]	;Get pointer to filename
	MOVEM A,B		;Store it here, too
	ILDB A,A		;Get the first char
	SKIPE A			;If we don't have anything in our name
	IFSKP.			;Then it's the default file
	  CAIE FIL,FILSTK	;Are we at the top of our stack?
	  IFSKP.		;Yes..
	    SETZ FIL,		;Say we have nothing else on the stack
	  ELSE.
	    SUBI FIL,TT.MAX	;Point back a block
	  ENDIF.
	  TXO FL,FL%TIN		;Say we're using ttyini
	  SETZM NAMBUF		;Zero our location
	  RETSKP		;And go back a winner
	ENDIF.
	MOVX A,GJ%SHT!GJ%OLD	;Short form, old file
	GTJFN%			;Get the file
	IFNJE.			;If we won
	  HRRZM A,TT.JFN(FIL)	;Save the JFN
	  SIZEF%		;Get its size
	   ERJMP .+1		;Ignore any errors
	  MOVEM C,TT.LEN(FIL)	;And its length
	  MOVX B,OF%RD		;Want read access
	  OPENF%		;Try to get it
	ANNJE.
	  MOVE B,D		;Get the page for our file
	  MOVEM B,TT.PAG(FIL)	;And save it away, too
	  HRLI B,.FHSLF		;This will be mapped into our area
	  HRLZ A,TT.JFN(FIL)	;Get the JFN
	  TXO C,PM%RD!PM%CNT	;Multiple page read access
	  PMAP%			;Get it
	  MOVE A,TT.PAG(FIL)	;Get our page again
	  LSH A,^D9		;Make it a location
	  HRLI A,(<POINT 7,0>)	;Make that a byte pointer
	  MOVEM A,TT.PTR(FIL)	;And save it away
	  RETSKP		;Go back +2
	ENDIF.
	WMSG <Couldn't open TTYLOC data file>
	CRLF
	SETZM NAMBUF		;Zero the name buffer
	MOVE A,TT.JFN(FIL)	;Get the JFN
	RLJFN%			;Release it
	 ERJMP .+1		;Ignore any errors
	MOVE A,OLDFIL		;Get back the original pointer
	RET			;Go back +1
	ENDSV.

;UNMFIL - Unmap the file
;Takes FIL/ Pointer to file we want

UNMFIL:	SAVEAC <A,B,C>
	SETO A,			;So we can unmap
	MOVE B,TT.PAG(FIL)	;Get where the file's mapped
	HRLI B,.FHSLF		;In our process
	MOVE C,TT.LEN(FIL)	;Get how many pages long it is
	TXO C,PM%RD!PM%CNT	;Multiple page unmap
	PMAP%			;Do it
	MOVE A,TT.JFN(FIL)	;Get the JFN
	CLOSF%			;Close the file
	 ERJMP .+1		;Ignore any errors
	CAIE FIL,FILSTK		;Are we at the top of the stack?
	IFSKP.
	  SETZ FIL,		;Yes, zero-fy it
	ELSE.
	  SUBI FIL,TT.MAX	;No, bump down one on the stack
	ENDIF.
	RET			;Go back

;Set the location we want
;takes TVTNUM as tvt number, NAMBUF as string
SETLOC:
;	tmsg <[TVTLOC] set tvt >
;	movei 1,.priou
;	move 2,tvtnum
;	movei 3,10
;	NOUT%
;	 jfcl
;	tmsg < to >
;	move 1,namptr
;	PSOUT%
;	tmsg <
;>

	ACVAR <BINLOC>
	move c,tvtnum
	IMULI C,.TDLEN		;Multiply by length for pointer in db
	MOVE BINLOC,BINPAG	;Get page number for bin file
	LSH BINLOC,^D9		;Make it a location
	ADDM C,BINLOC		;Point to our location
	MOVE A,NAMPTR		;Get a pointer to the name we chose
	  SETOM .TDLKD(BINLOC)	;Lock the bin file
	  MOVE C,OURJOB		;Get our job number
	  STOR C,TL%JOB,.TDWHO(BINLOC) ;Save away the job number
	  HRRZ A,OURUSR		;Isolate right half of user number
	  STOR A,TL%USR,.TDWHO(BINLOC) ;Store that away, too
	  MOVE A,[POINT 7,.TDLOC(BINLOC)] ;Pointer to destination
	  MOVE B,NAMPTR		;Get a pointer to the name we chose
	  MOVEI D,.TDLLN*5-1	;Maximum number of chars we can xfer
	  DO.
	    ILDB C,B		;Get a char
	    IDPB C,A		;No, drop the byte in
	    JUMPE C,ENDLP.	;Go out on null
	    SOJG D,TOP.		;Otherwise get the next one if we can
	    SETZ C,		;If run out, get a null
	  ENDDO.
	  IDPB C,A		;Drop in the final null
	SETZM .TDLKD(BINLOC)	;Unlock the file
	RET			;And go back
	ENDAV.

;Unmap the bin file
;Takes BINJFN/ JFN for binfile
;      BINPAG/ Page number where bin file is mapped
;      BINLEN/ How many pages long bin file is

UNMBIN:	SAVEAC <A,B,C>
	SETO A,			;For unmapping
	MOVE B,BINPAG		;Get the page number to unmap
	HRLI B,.FHSLF		;From our process
	MOVE C,BINLEN		;How many pages to unmap
	TXO C,PM%RD!PM%WR!PM%CNT ;Multiple page unmap
	PMAP%			;Do it
	MOVE A,BINJFN		;Get the JFN
	CLOSF%			;Close the file
	 ERJMP .+1		;Ignore any errors here
	RET			;Go back

;CPYSTR - copy a string, can take either byte or string pointers
;Takes A/ destination pointer
;      B/ source pointer
;Returns A/ Updated pointer, null byte not copied

CPYSTR:	SAVEAC <B,C>
	MAKPTR A		;Make this a byte pointer
	MAKPTR B		;And this one too
	DO.
	  ILDB C,B		;Get a char
	  JUMPE C,R		;Go back if it's a null
	  IDPB C,A		;It isn't, drop it on our string
	  LOOP.			;And get another
	ENDDO.

;Error handler
;Call with CALL or ERCAL

ERROR:	EXCH A,(P)		;Save a register, put pushed loc in a
	PUSH P,B
	PUSH P,C
	AND A,[37,,777777]	;So we can get sections
	SUBI A,2		;Subtract two from PC to point to jsys
	PUSH P,A		;Save PC from being clobbered by EMSG
	EMSG <Error at >	;Start error message
	MOVEI A,.PRIOU		;On primary output
	HLRZ B,(P)		;Get left half to b
	MOVEI C,^D8		;Radix octal
	IFN. B
	 NOUT%			;Output the left half
	  ERJMP ERRERR
	 TMSG <,,>		;Divide left and right half
	ENDIF.
	MOVEI A,.PRIOU		;To tty
	POP P,B			;Get location again
	HRRZS B			;Zero left half
	NOUT%			;Output location
	 ERJMP ERRERR
	TMSG < - >
	MOVEI A,.PRIOU		;To tty, again
	HRLOI B,.FHSLF		;With last error on our own fork
	SETZ C,			;With no limit
	ERSTR%			;Print error string
	 ERJMP ERRERR		;Undefined error number
	  ERJMP ERRERR		;Other error
	POP P,C
	POP P,B
	POP P,A			;Save the registers
	JRST STOP

STOP:	HALTF%			;Stop
	EMSG <Can't continue>
	JRST STOP		;Go back and stop again

ERRERR:	EMSG <Error within an error> ;Really losing now
	JRST STOP		;Bye bye

END <EVECL,,EVEC>
