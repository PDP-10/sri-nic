Entry;
begin "-- SCR file routines --"

require "genhdr.sai"source!file;

!**********************************************************************
!  This file handles a SCR file from SCRIBE.  The file is already in
!  the proper laser printer format with the following exceptions:
!     1) The pages are in chronological (hence printing reverse) order
!     2) There is no title page
!     3) There is no post file information for the spooler
!  This program fixes problems 1 and 2.  The 3rd is handled in MAKIMP.(kk)
!
!		Dwight Hare  15 Nov 1982
!**********************************************************************;

!	External variables;


External boolean firsttime,	! true for first output file;
               infileended;	! set to false if outfile page limit reached;

External Integer   OutPtr, 	! Pointer to output buffer area;
		   InChan;      ! Channel for input file;

External integer   firstp,	! First page of specified range;
		    lastp, 	! Last page of specified range;
	      filepagelimit,	! max outfile pages allowed;
	         outpages;      ! Number of pages output;

External integer InFlSize; 	! Input file size;

!	External procedures, requires;


External simp procedure 	     TableSet; ! Sets up font tables;
External simp procedure 	     ResetOut; ! unmap the pages of the 
						 output file buffer;

External simp procedure       Error(string s); ! Error handling;
External simp procedure              InitPage; ! Resets glyph table, etc.;
External simp procedure		  
	SetPos(boolean exmove, eymove; integer emovexamount,
						emoveyamount,newx, newy); 
					       ! Sets new x and y 
						 coordinates, allows
						 exact movements or
						 movements to exact
						 locations;

require "DVIdef.sai" source!file; ! get the current DVI format definitions;
require "ebgsrc.sai" source!file; ! debugging information;
require "outmac.sai" source!file; ! output macros;
require "inmac.sai"  source!file; ! input macros;

! 	doSCRfile;


!	D O   S C R   F I L E
!
! **********************************************************************
! main driving program for SCR files.
! **********************************************************************;
internal simp procedure doSCRfile;
	begin "-- do SCR file --"
	integer v,w,w1,h,j,page;
	string s;
	boolean instring;

	simp boolean procedure inbounds;
	  begin if (firstp  page) and (page  lastp) then return(true) else
	    return(false); end;

	if firsttime then begin "--initialize--"
	Initin;		! Initialize input file page tables;
	printi0(<nl,"starting doSCRfile">)
	printi0(<nl,"doSCRfile, starting page processing">)
	print(nl);
	TableSet;
	end "--initialize--";

	page_1;	    ! current page;
	GotoByte(0);
	v_LookNextByte;
	if v='100 then   ! if @ then must be @document(...);
	  while v = '100 do  ! read sequential @document(...) lines;
	    begin "-- read @ document --"
	    InFileByte;  ! read at-sign previously peeked at;
	    s_"";
	    for j_1 step 1 until 9 do
	      begin "-- get document --"
	      v_InFileByte;
	      if v > '140 and v < '173 then v_v land '137; ! uppercase letter;
	      s_s & cvastr(v lsh 29);
	      end "-- get document --";
	    if not equ(s,"DOCUMENT(") then 
	      Error(nl&"File does not start properly - Contact System Administators"&nl);
	    instring_false;
	    while instring or v  '51 do  ! look for right paren;
	      begin "-- search for right paren --"
	      v_InFileByte;
	      if v = '42 then instring_not instring; ! double quote means string;
	      end "-- search for right paren --";
	    v_LookNextByte;
	    end "-- read @ document --"
	  else begin "-- read old style header --"
	    ! v must be memory allocation byte which is a single digit;
	    if v < '60 or v > '71 then
	      Error(nl&"File does not start properly - Contact System Administators"&nl);
	    while not(InFileByte = 0) do nothing; ! read job identification;
	    for j_1 step 1 until 8 do InFileByte; ! read 8 ignored bytes;
	    end "-- read old style header --";

if not inbounds then begin "--glyout--"  ! we're outputting a glyphs here;
	While not((v_InFileByte)=I!eof) do
	    begin "-- scan for page breaks --"
	    case v of begin "-- case statement --"
	      [I!space] [I!1spac] [I!mp] [I!mm] [I!nl]
	               nothing;
	      [I!page] nothing;
	      [I!endp] begin page_page+1;
	                     if inbounds then done;
		       end;
	      [I!f] Begin outbyte(v); OutByte(InFileByte) End;
	      [I!bskip] [I!marg] [I!setsp] [I!delg] [I!sabsh] [I!sabsv]
	      [I!srelh] [I!srelv] [I!mmove] [I!smove] [I!ddelg]
	       Begin outbyte(v); OutByte(InFileByte); OutByte(InFileByte) End;
	      [I!mov] [I!h] [I!v] begin InFileByte; InfileByte; end;
	      [I!srule] begin InFileByte; InFileByte; InFileByte; end;
	      [I!brule] begin InFileByte; InFileByte; InFileByte; InFileByte;
	                InFileByte; InFileByte; end;
	      [I!sgly] Begin outbyte(v);
	                     OutByte(InFileByte);
	                     OutByte(InFileByte);
	                     OutByte(InFileByte);
	                     OutByte(w_InFileByte);
	                     OutByte(InFileByte);
	                     OutByte(h_InFileByte);
	                     OutByte(InFileByte);
			     w1_cvd(cvf((w+7)/8));
			     for j_1 step 1 until w1*h do
			           begin OutByte(InFileByte) End End;
	      [I!bgly] begin outbyte(v);
	                     OutByte(InFileByte);
                             OutByte(InFileByte);
                             OutByte(InFileByte);
                             OutByte(InFileByte);
                             OutByte(w_InFileByte);
			     v_InFileByte; w_(w LSH 8)+v;
			     OutByte(v);
                             OutByte(InFileByte);
                             OutByte(InFileByte);
                             OutByte(h_InFileByte);
			     v_InFileByte; h_(h LSH 8)+v;
			     OutByte(v);
                             OutByte(InFileByte);
                             OutByte(InFileByte);
			     w1_cvd(cvf((w+7)/8));
			     for j_1 step 1 until w1*h do
			           Begin OutByte(InFileByte) End End;
	      else begin if (v LSH -7) neq 0
	           then print(nl,"error code "&cvs(v)&" - contact System Administrators",
		              nl); ! error here; end
	   end "-- case statement --"
	   end "-- scan for page breaks --"

end "--glyout--";

if inbounds and not v=I!eof then begin "--actualout--"    
	                                        ! outputting real pages here;
	if not firsttime then print(nl);
	While not((v_InFileByte)=I!eof) do
	    begin "-- scan for page breaks --"
	    if v neq I!page then OutByte(v);
	    case v of begin "-- case statement --"
	      [I!space] [I!1spac] [I!mp] [I!mm] [I!nl]
	               nothing;
	      [I!page] begin if outpages geq filepagelimit then begin
			         firstp_page; infileended_false; done; end;
			     outbyte(v);
			     print("[") end;
	      [I!endp] begin outpages_outpages+1;
	                     print(page,"]");
	                     page_page+1;
			     if not inbounds then done;
		       end;
	      [I!f] Begin OutByte(InFileByte) End;
	      [I!bskip] [I!marg] [I!setsp] [I!mov] [I!h] [I!v] [I!delg]
	      [I!sabsh] [I!sabsv] [I!srelh] [I!srelv] [I!mmove] [I!smove]
	      [I!ddelg]
	           Begin OutByte(InFileByte); OutByte(InFileByte) End;
	      [I!srule] begin   OutByte(InFileByte);
	      			OutByte(InFileByte);
	      			OutByte(InFileByte) End;
	      [I!brule] Begin OutByte(InFileByte);
	                      OutByte(InFileByte);
	                      OutByte(InFileByte);
	                      OutByte(InFileByte);
	                      OutByte(InFileByte);
	                      OutByte(InFileByte) End;
	      [I!sgly] Begin OutByte(InFileByte);
	                     OutByte(InFileByte);
	                     OutByte(InFileByte);
	                     OutByte(w_InFileByte);
	                     OutByte(InFileByte);
	                     OutByte(h_InFileByte);
	                     OutByte(InFileByte);
			     w1_cvd(cvf((w+7)/8));
			     for j_1 step 1 until w1*h do
			           begin OutByte(InFileByte) End End;
	      [I!bgly] begin OutByte(InFileByte);
                             OutByte(InFileByte);
                             OutByte(InFileByte);
                             OutByte(InFileByte);
                             OutByte(w_InFileByte);
			     v_InFileByte; w_(w LSH 8)+v;
			     OutByte(v);
                             OutByte(InFileByte);
                             OutByte(InFileByte);
                             OutByte(h_InFileByte);
			     v_InFileByte; h_(h LSH 8)+v;
			     OutByte(v);
                             OutByte(InFileByte);
                             OutByte(InFileByte);
			     w1_cvd(cvf((w+7)/8));
			     for j_1 step 1 until w1*h do
			           Begin OutByte(InFileByte) End End;
	      else begin if (v LSH -7) neq 0
	           then print(nl,"error code "&cvs(v)&" - contact System Administrators",
		              nl); ! error here; end
	   end "-- case statement --"
	   end "-- scan for page breaks --"
end "--actualout--";

	end   "-- do SCR file --";
end   "-- SCR file routines --";
