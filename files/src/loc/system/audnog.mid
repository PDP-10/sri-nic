;-*-Midas-*-

	Title $AUDCHK - Check on the NAURS, see if it's alive

.DECSAV

 A=5
 B=6
 C=7
 T=10
TT=11
T3=12
 P=17

ACK==:37			;ACK code
AUDPRT==:49.			;Audit Trail port#
CHKPRT==:153.			;Port we receive replies on
CarMsk==:<-1,,600000>		;Mask of non-lower-16-bits
IPCFch==:0			;Channel for IPCF to knock on
PakLen==:100			;Packet Buffer length
PDLen==:100			;PDL size
TTLive==:60.			;Time To Live
UDPPRN==:17.			;UDP Protocol Number

WaitN==:5			;Try this many times before assuming dead.
WaitFor==:60.			;If no answer in this many seconds, assume dead

S==:1000.			;One ticks worth of seconds
M==:60.*S			;One minute

.IPKVR==:1			;Version, data offset, type of service
.IPKSG==:2			;Segment ID, frag stuff.
.IPKPR==:3			;Time to live, protocol#, header checksum
.IPKSH==:4			;Source host internet address
.IPKDH==:5			;Destination host " "
    IPhlen==:5			;IP header length.
.UDPPO==:6			;UDP port#'s
.UDPLN==:7			;UDP length, checksum
    UDPhlen==:2			;Length of UDP header
.UDPDT==:10			;UDP data bytes

L16==:<777774,,0>		;Mask for left 16-bit byte in word
R16==:<3,,777760>		;and for right 16-bit byte.
B32==:L16\R16			;Full 32-bit word

IPK$VR==:<.BP <740000,,0>,.IPKVR>	;IP Version#
IPK$DO==:<.BP <036000,,0>,.IPKVR>	;Data Offset
IPK$SR==:<.BP <001774,,0>,.IPKVR>	;Type of Service
  IPK$ST==:<.BP <001600,,0>,.IPKVR>	;  (Precedence)
  IPK$SF==:<.BP <000160,,0>,.IPKVR>	;  (Flags)
IPK$DL==:<.BP R16,.IPKVR>		;Datagram Length

IPK$SI==:<.BP L16,.IPKSG>		;Segment ID
IPK$R1==:<.BP <000002,,0>,.IPKSG>	;Reserved, should be 0
IPK$NF==:<.BP <000001,,0>,.IPKSG>	;Do-not-fragment bit
IPK$MF==:<.BP <0,,400000>,.IPKSG>	;More-fragments flag
IPK$FO==:<.BP <0,,377760>,.IPKSG>	;Fragment-Offset

IPK$TL==:<.BP <776000,,0>,.IPKPR>	;Time-to-live
IPK$PV==:<.BP <001774,,0>,.IPKPR>	;Protocol version
IPK$HC==:<.BP R16,.IPKPR>		;IP Header Checksum

IPK$SH==:<.BP B32,.IPKSH>		;Source Host
IPK$DH==:<.BP B32,.IPKDH>		;Destination Host

UD$SRC==:<.BP L16,.UDPPO>
UD$DST==:<.BP R16,.UDPPO>
UD$LEN==:<.BP L16,.UDPLN>
UD$CHK==:<.BP R16,.UDPLN>

.LSTOFF
.INSRT MID:SYMBOLS
.INSRT MID:MACROS
.INSRT MID:BBNTCP
.LSTON

Define FATAL &string
	Jrst [Call ConLog
	      Type string
	      Jrst Die]
Termin

Define SHONUM bp,base
	Movei 1,.PRIOU
	Ldb 2,[bp PakBuf]
	Movei 3,base
	NOUT
	  Nop
Termin

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;	Impure storage
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

PDL:	-PDLen,,.
	Block PDLen

LogJFN:	0			;JFN on LogFil

UsHost:	Internet(26.,0,0,73.)	;Our host#
AudHst:	Internet(26.,4,0,73.)	;SRI-NAURS's host# (not in the host table!!)

HstBuf:	Block 20		;Where ShoHst puts the hostname

IQH:	0			;Internet Queue Handle
GQErr:	0			;Flag for GetQueue

IntOK:	0			;Interrupts OK?
Pollp:	0			;Are we being polled, or asking on our own?
Lost:	0			;Has GATHER lost?

Wait1:	0			;Counter for #-of-tries to get ahold of GATHER
Wait2:	0			;Counter for # seconds remaining in this try

QDB:	.BYTE 8. ? 0 ? 0 ? 0 ? UDPPRN ? .BYTE	;UDP Protocol Number
	0					;Wild foreign host
	0					;Wild source host
	.BYTE 16. ? CHKPRT ? 0 ? .BYTE		;local port, foreign port
	.BYTE 8. ? 0 ? 0 ? 0 ? -1 ? .BYTE	;Protocol number mask
	0					;Foreign host mask
	0					;Source host mask
	.BYTE 16. ? -1 ? 0 ? .BYTE		;Local port mask
QDBlen==.-QDB

PakBuf:	0					;Packet Buffer total length.
;;
;;	Start of IP header
;;
    .BYTE 4,4,8.,16.		;-----------------------+
	4			;IP version #		|\
	5			;Data Offset		| \ One
	0			;Type of Service	| / Word
	0			;Datagram Length	|/
    .BYTE			;-----------------------+
	0			;Segmentation and frag junk.
    .BYTE 8.,8.,16.		;-----------------------+
	60.			;Time-to-live		|\
	UDPPRN			;Protocol number	| > One word
	0			;IP header checksum	|/
    .BYTE			;-----------------------+
	0			;Source host
	0			;Destination host
;;
;;	End of IP header, start of UDP header.
;;
	0			;Local port number, destination port#
	0			;UDP header+data length, checksum
;;
;;	End of UDP header, start of UDP data.
;;
	Block 200

PSIPC1:	0
PSIPC2:	0
PSIPC3:	0

LEVTAB:	PSIPC1 ? PSIPC2 ? PSIPC3
CHNTAB:	Channel IPCFch,2,Answer
	EndChannel

;;
;;	Server IPCF stuff
;;

CrePak:	IP%CPD			;Create us a PID, please.
MyPID:	0
	0
	ArgLen,,ArgBlk
IPakLen==.-CrePak

ArgBlk:	.IPCII
	0
	Asciz "AUDCHK"
ArgLen==.-ArgBlk

MBlock:	.MUPIC			;Assign an interrupt channel to a PID
MutPID:	0
	IPCFch
MBlokl==.-MBlock

InfPak:	0			;<SYSTEM>INFO's reply.
	0
	0
	InfLen,,InfArg

InfLen==4
InfArg:	Block InfLen

DatPak:	0
	0
	0
	1,,In

In:	0

RepPak:	0			;Our reply to the above message.
	0
HisPID:	0
	1,,In			;1-word reply

;;
;;	User IPCF stuff
;;

Pack1:	IP%CPD
MePID:	0
	0		;To INFO
	4,,SndArg

Pack2:	0
	0
HimPID:	0
	4,,SndArg

SndArg:	.IPCIW
	0
	Asciz "AUDCHK"

Pack3:	0
	0			;From Us
	0			;To Him
	0			;No message

Pack4:	0
	0			;From Him
	0			;To Us
	1,,In			;1-word answer

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;	Pure stuff
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

LogFil:	Asciz "SYSTEM:AUDCHK.LOG"

Messag:	Asciz "POLL"

STypes:	[Asciz "Routine (0)"]
	[Asciz "Priority (1)"]
	[Asciz "Immediate (2)"]
	[Asciz "Flash (3)"]
	[Asciz "Flash Overrive (4)"]
	[Asciz "CRITIC/ECP (5)"]
	[Asciz "Internetwork Control (6)"]
	[Asciz "Network Control (7)"]

CRLF:	Asciz "
"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;	Poking loop...
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  V%WHO==2
V%MAJOR==1
V%MINOR==0
 V%EDIT==.FVERS

EntVec:	Jrst Begin
	Jrst Begin
	Version V%WHO,V%MAJOR,V%MINOR,V%EDIT
EvecLn==.-EntVec

Begin:	RESET%
	Move P,PDL
	Call WaitUp		;Wait until machine is fully up
	Call Initialize		;Initialize whatever
	Call Release		;release any old queues we might have and
	Call GetQueue		;get us the right queue.
	  Jrst AskNow		;  Already assigned, so switch modes.
	Call InIPCF		;Initialize our IPCF stuff
Loop:	Setzm IntOK		;No interrupts while doing this, please.
	Call Poke		;Poke the NAURS machine
	  Jrst Sleep		;  Failed, wait some and try again
	Call Alivep		;Is it alive?
	  Call Wail		;  No, so raise hell (skip returns)
	    Call Alive		;    Yes...
	Skipe Pollp		;Someone polling us?
	  Call Reply		;  Yes, so reply now that we've polled the F4
Sleep:	Setom IntOK		;Allowed to interrupt out of here.
	Movx 1,5*M
	DISMS%
	Jrst Loop

Alive:	Skipge Lost
	  Return
	Hrroi T,[Asciz "Contact reestablished"]
	Call LogIt
	Call ConLog
	TypeCR "GATHER is running again"
	Setom Lost		;Reset lost count
	Return

Die:	HALTF%
	Jrst Die

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;	Wait until machine is fully up.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

WaitUp:	GTAD%
	Camn 1,[-1]		;Machine really up yet?
	  Jrst [Movx 1,S
		DISMS%		;No, so wait a second
		Jrst WaitUp]	;and try again.
	Return

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;	Initialize - enable capabilities, set up interrupt system,
;;	& get host#s we need
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Initialize:
	Setom Lost
	Movei 1,.FHSLF		;Enable our capabilities,
	Seto 3,
	EPCAP%
	Movei 1,.FHSLF
	Move 2,[LEVTAB,,CHNTAB]
	SIR%
	EIR%
	Movx 2,ChnMsk
	AIC%			;Activate interrupts except IPCF
	Movei 1,.GTHSZ
	GTHST%
	  Setz 4,
;;;;	Movem 4,UsHost		;Our host#
;use milnet not arpanet interface

	Skipe AudHst		;NAURS's host# built-in?
	  Return		;  Yep
	Movei 1,.GTHSN
	Hrroi 2,[Asciz "SRI-NAURS"]
	GTHST%
	  Jrst [Call ConLog
		TypeCR "?Can't get host# of SRI-NAURS"
		Jrst Die]
	Movem 3,AudHst
	Return

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;	Release any queues we might already have
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Release:Seto 1,			;then release all IN queues we might have.
	RELIQ%
	  Nop
	Return

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;	Allocate an Internet Queue
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

GetQueue:
	Setom GQErr		;No errors gotten so far.
GetQ0:	Movei 1,QDB		;Address of Queue Desciptor Block
	Setzb 2,3		;Reserved, must be 0
	ASNIQ%			;Get a queue.
	  Jrst QError		;  failed!
	Movem 1,IQH		;Save the Internet Queue Handle
;	Call ConLog
;	TypeCR "Got queue"
Popj1:	Aos (P)
CPopj:	Return

QError:	Aose GQErr		;This the first error?
	  Jrst QWait		;  Naw, probably same, so just wait.
	Cain 1,ASNSX2		;Already assigned to someone else?
	  Return		;  Yes, so take +1 return
	Pushn P,[1,2]		;Yes, so show the error.
	Call ConLog
	Type "?ASNIQ failed -- "
	Call Barf
	AType CRLF
	Popn P,[2,1]
	Cain 1,NTWZX1		;Net Wizard needed?
	  Jrst Die		;  Foo!  And we aren't!?
QWait:	Movx 1,30.*S		;Wait 30 seconds
	DISMS%
	Jrst GetQ0		;and try again

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;	Initialize IPCF stuff for the SYSJOB fork
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

InIPCF:	Movei 1,IPakLen
	Movei 2,CrePak
	MSEND%
	  Fatal "Can't send request to <SYSTEM>INFO"
	Move 1,MyPID
	Movem 1,MutPID
	Movem 1,InfPak+.IPCFR	;<SYSTEM>INFO's reply
	Movem 1,DatPak+.IPCFR	;Incoming data packet
	Movei 1,IPakLen
	Movei 2,InfPak
	MRECV%
	  Fatal "Can't get <SYSTEM>INFO's reply"
	Ldb T,[.BP IP%CFE,InfPak+.IPCFL]
	Jumpe T,IIPCF0
	Cain T,.IPCDN
	  Fatal "Someone already has a PID named 'AUDCHK'"
	Fatal "Random error reply from <SYSTEM>INFO"

IIPCF0:	Movei 1,MBlokl
	Movei 2,MBlock
	MUTIL%
	  Fatal "Can't assign interrupt channel to 'AUDCHK' PID"
	Return

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;	Answer an IPCF request
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Answer:	Pushn P,[1,2,3]
	Movei 1,1
	Hrlm 1,DatPak+.IPCFP
	Movei 1,IPakLen
	Movei 2,DatPak
	MRECV%			;Grab the request packet.
	  Jrst Dismis
	Move 1,DatPak+.IPCFS
	Movem 1,RepPak+.IPCFR	;Set up for reply.
	Setom Pollp		;Flag that they want to poll.
	Skipe IntOK		;Were they sleeping?
	  Jrst [Movx 1,Bit(5)	;Yes, so
		Iorm 1,PSIPC2	;turn on user-mode bit
		Movei 1,Loop	;and then return
		Hrrm 1,PSIPC2	;to here (wake up from sleeping)
		Jrst .+1]
Dismis:	Popn P,[3,2,1]
	DEBRK%

Reply:	Move 1,Lost
	Movem 1,In		;Return the lost-counter
	Movei 1,IPakLen
	Movei 2,RepPak
	MSEND%
	  Nop
	Setzm Pollp		;and then reset poll flag
	Return			;and done.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;	The other side of the IPCF stuff - If there is already a job
;;	with the queue we want, then we must be an infiltrator, so
;;	ask the real one for status (waking it up to poll right now)
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

AskNow:	Movei 1,IPakLen
	Movei 2,Pack1
	MSEND%
	  Jrst [Type "?Failed to send request to INFO -- "
		Call BarfCR
		Jrst Die]
	Move 1,MePID
	Movem 1,Pack2+.IPCFR	;To me from INFO
	Movem 1,Pack3+.IPCFS	;To AUDCHK
	Movem 1,Pack4+.IPCFR	;From AUDCHK
	Movei 1,IPakLen
	Movei 2,Pack2
	MRECV%
	  Jrst [Type "?Failed to receive reply from INFO -- "
		Call BarfCR
		Jrst Die]
	Ldb T,[.BP IP%CFE,Pack2+.IPCFL]
	Skipe T
	  Fatal "AUDCHK isn't running!"
	Move 1,SndArg+.IPCI1
	Movem 1,HimPID
	Movem 1,Pack3+.IPCFR

Status:	Movei 1,IPakLen
	Movei 2,Pack3
	MSEND%
	  Jrst [Type "?Couldn't send message to AUDCHK -- "
		Call BarfCR
		Jrst Die]
	Movei 1,IPakLen
	Movei 2,Pack4
	MRECV%
	  Jrst [Type "?Couldn't receive answer from AUDCHK -- "
		Call BarfCR
		Jrst Die]
	Hrroi 1,[Asciz "GATHER is healthy"]
	Skipl In
	  Hrroi 1,[Asciz "GATHER isn't working"]
	PSOUT%
	Jrst Die

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;	Start off a logging entry on the console
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

ConLog:	Movei 1,.PRIOU
	DOBE%
	Seto 2,
	Setz 3,
	ODTIM%
	Type " [AUDCHK] "
	Return

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;	Make a log-file entry
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

LogIt:	Movx 1,GJ%SHT\GJ%OLD	;See if there's an existing log file.
	Hrroi 2,LogFil
	GTJFN%
	  Jrst [Movx 1,GJ%SHT	;Nope, so try to create one.
		Hrroi 2,LogFil
		GTJFN%
		  Return	;Failed, we lose.
		Jrst .+1]	;Won, new file.
	Movem 1,LogJFN		;Save JFN.
	Move 2,[Field(7,OF%BSZ)+OF%APP]
	OPENF%			;Open for append only.
	  Jrst [Move 1,LogJFN	;oops!
		RLJFN%
		  Nop
		Return]
	Seto 2,			;-1 means NOW
	Setz 3,			;0 means standard format
	ODTIM%			;Timestamp the log file
	Hrroi 2,[Asciz " [AUDCHK] "]
	Setz 3,
	SOUT%			;Plus this so we don't mistake the author
	Move 2,T		;Pointer to message given to us.
	SOUT%
	Hrroi 2,CRLF		;No CRLF is expected on the message.
	SOUT%
	CLOSF%
	  Nop
	Return

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;	Wail for help...
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Wail:	Movei 1,.PRIOU
	DOBE%
	Call ConLog
	Aose Lost
	  Jrst [TypeCR "The F4 *still* isn't acknowledging audit-trail packets!!"
		Jrst Popj1]
	Hrroi T,[Asciz "Contact broken"]
	Call LogIt
	Type "Ahem:"
	Hrroi 1,[Asciz "
#########################################################################
#									#
#     The F4 is not acknowledging audit-trail packets!  Is it...	#
#         DOWN?  WEDGED?  Is GATHER running?  check and see!		#
#									#
#########################################################################
"]
	PSOUT%
	Jrst Popj1

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;	Wait for a response from the NAURS
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Alivep:	Movei T,WaitN		;Try this many time
	Movem T,Wait1
Alive0:	Movei T,WaitFor		;# of seconds to wait
	Movem T,Wait2
Alive1:	Movx 1,S		;Wait one second
	DISMS%
	Call GetUDP		;See if there's a packet for us.
	  Jrst NotYet
;	Ldb T,[340800,,PakBuf+.UPDDT]
;	Lsh T,8.
;	Ldb TT,[240800,,PakBuf+.UPDDT]
;	Addi T,(TT)
;	Cain T,ACK		;Check for right response (an ACK)
	  Jrst Popj1		;Win!
	;
	;	do what if this is wrong?
	;
NotYet:	Sosle Wait2		;Waited as long as we're gonna?
	  Jrst Alive1		;  Nope, so wait some more.
	Sosle Wait1		;Try this more times?
	  Jrst Alive0		;  Yes, keep at it, reset Wait2
	Return			;Failure return

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;	Send off the poke message
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Poke:	Move A,[440800,,PakBuf+.UDPDT]
	Move B,[440700,,Message]
	Setz C,
Poke0:	Ildb T,B
	IDPB T,A
	Skipe T
	  Aoja C,Poke0
	Move T,C
	Addi T,UDPhlen*4
	DPB T,[UD$LEN PakBuf]
	Addi T,IPhlen*4
	DPB T,[IPK$DL PakBuf]
	Jumpe C,Poke1
	Subi C,1
	Lsh C,-2		;/4
	Addi C,1
Poke1:	Addi C,IPhlen+UDPhlen+1
	Hrrzm C,PakBuf
	Movei T,TTLive
	DPB T,[IPK$TL PakBuf]
	Setz T,
	DPB T,[IPK$SR PakBuf]
	Movei T,UDPPRN
	DPB T,[IPK$PV PakBuf]
	movei t,chkprt
	DPB T,[UD$SRC PakBuf]	;Source and
	Movei T,AUDPRT
	DPB T,[UD$DST PakBuf]	;Destination ports
	Move T,UsHost
	DPB T,[IPK$SH PakBuf]	;Source Host
	Move T,AudHst
	DPB T,[IPK$DH PakBuf]	;Destination Host
	Call Checksum		;Compute the UDP checksum into AC T
	DPB T,[UD$CHK PakBuf]	;Store it into UDP header.
;;	Call Explode		;Show what we're about to send
	Move 1,IQH		;Queue Handle
	Movei 2,PakBuf		;Address of Packet Buffer
	Setz 3,			;Reserved, must be 0.
	SNDIN%			;Send off the datagram.
	  Jrst [Call ConLog
		Type "?Failed to send NAURS poll message -- "
		CallRet BarfCR]
	Jrst Popj1

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;	Get a UDP datagram
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

WaiUDP:	Tdza 1,1		;No flags.
GetUDP:	  Movx 1,RIQ%NW		;  Don't wait
	Movei 2,PakLen+1
	Hrrzm 2,PakBuf
	Hrr 1,IQH		;flags,,IQH
	Movei 2,PakBuf
	Setz 3,
	RCVIN%
	  Return
	Jrst Popj1

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;	Compute UDP checksum
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Checks:	Setz T,			;Accumulate checksum here.
	Move A,[442000,,PakBuf+.IPKSH]
REPEAT 4,[			;Get Source/Destination addresses
	Ildb B,A		;in 4 16-bit chunks.
	Add T,B
];Repeat
IRP FIELD,,[IPK$PV,UD$SRC,UD$DST,UD$LEN]
	Ldb B,[FIELD PakBuf]	;Add in protocol#, source port,
	Add T,B			;destination port, UDP length.
TERMIN
	Add T,B			;Add in UDP length again.
	Subi B,UDPhlen*4	;Subtract # UDP header bytes giving # data.
	Lsh B,-1		;# bytes / 2 = # 16-bit bytes.
	Move A,[442000,,PakBuf+.UDPDT]
	Jumple B,Check1		;No data bytes.
	Move C,B
Check0:	Ildb TT,A
	Add T,TT
	Sojg C,Check0
Check1:	Trne B,1		;Even # of 16-bit bytes?
	  Jrst [Ildb TT,A	;No, so get 16-bits with high 8 being
		Trz TT,377	;significant, and clobber low 8
		Add T,TT	;and sum it in.
		Jrst .+1]
Check2:	Tdne T,[CarMsk]		;Any carries beyond 16 bits?
	  Jrst [Ldb A,[.BP CarMsk,T]
		Tdz T,[CarMsk]	;Yes so add them in and loop
		Add T,A		;until it all fits in 16 bits.
		Jrst Check2]
	Setca T,		;1's complement the sum
	Andi T,177777		;and keep only the lower 16 bits.
	Return

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;	Explode a packet buffer
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Explod:	Type "--Start of IP header--
+0: Version = "
	Shonum IPK$VR,8.
	Type ", Data Offset = "
	Shonum IPK$DO,8.
	CRType "    Type of Service = ["
	Ldb T,[IPK$ST PakBuf]
	Hrro 1,STypes(T)
	PSOUT
	Ldb T,[IPK$SF PakBuf]
	Hrroi 1,[Asciz " /Low delay"]
	Txne T,4
	  PSOUT
	Hrroi 1,[Asciz " /High throughput"]
	Txne T,2
	  PSOUT
	Hrroi 1,[Asciz " /High reliability"]
	Txne T,1
	  PSOUT
	Type "]
    Datagram length = "
	Shonum IPK$DL,10.
	Type ".
+1: Segment ID = "
	Shonum IPK$SI,8.
	Type ", Reserved bit = "
	Shonum IPK$SI,8.
	Type ", Reserved bit = "
	Shonum IPK$R1,2
	Type ", Do-not-fragment = "
	Shonum IPK$NF,2
	CRType "    More-fragments = "
	Shonum IPK$MF,2
	Type ", Fragment-Offset = "
	Shonum IPK$FO,8.
	CRType "+2: Time-to-live = "
	Shonum IPK$TL,10.
	Type "., Protocol # = "
	Shonum IPK$PV,8.
	Type ", IP header checksum = "
	Shonum IPK$HC,8.
	CRType "+3: Source host = "
	Ldb T,[.BP B32,PakBuf+.IPKSH]
	Call ShoHst
	CRType "+4: Destination host = "
	Ldb T,[.BP B32,PakBuf+.IPKDH]
	Call ShoHst
	CRType "--End of IP header, start of UDP header--
+0: Source port = "
	Shonum UD$SRC,8.
	Type ", Destination port = "
	Shonum UD$DST,8.
	CRType "+1: Length = ",
	Shonum UD$LEN,10.
	Move T,2		;Save length
	Type "., Checksum = "
	Shonum UD$CHK,8.
	CRType "--End of UDP header, start of UDP data--"
	Subi T,UDPhlen*4	;Subtract length of UDP header
	Jumpe T,[TypeCR "No data!"
		 Return]
	Movei TT,1
	Move A,[440800,,PakBuf+.UDPDT]
	Movei B,4

UDPDT0:	Aos B
	Caig B,4
	  Jrst UDPDT1
	AType CRLF
	CType "+
	Movei 1,.PRIOU
	Aos 2,TT
	Movei 3,8.
	NOUT
	  Nop
	CType ":
	Movei B,1

UDPDT1:	Movei 1,.PRIOU
	Ildb 2,A
	Move 3,[Field(4,NO%COL)+NO%LFL+8.]
	NOUT
	  Nop
	Sojg T,UDPDT0
	TypeCR " <EOD>"
	Return

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;	Misc. other subroutines
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

BarfCR:	Call Barf
	AType CRLF
	Return

Barf:	Movei 1,.PRIOU
	Hrloi 2,.FHSLF
	Setz 3,
	ERSTR%
	  Nop
	  Nop
	Return

ShoHst:	Movei 1,.PRIOU
	Ldb 2,[.BP <037700,,0>,T]
	Movei 3,10.
	NOUT
	  Nop
	Movei 2,".
	BOUT
	Ldb 2,[.BP <77,,600000>,T]
	NOUT
	  Nop
	Movei 2,".
	BOUT
	Ldb 2,[.BP <0,,177400>,T]
	NOUT
	  Nop
	Movei 2,".
	BOUT
	Ldb 2,[.BP <0,,377>,T]
	NOUT
	  Nop
	Type " ("
	Movei 1,.GTHNS
	Hrroi 2,HstBuf
	Move 3,T
	GTHST
	  Skipa 1,[-1,,[Asciz "???"]]
	    Hrroi 1,HstBuf
	PSOUT
	CType ")
	Return

	End Begin
