;[SRI-NIC]SRC:<LOC.SYSTEM>MICOMS.MID.59,  4-Feb-88 15:16:00, Edit by MKL
;refuse messages to micom status line
;add $LOGALL for logging

;-*-Midas-*-

	Title @MICOMS - MICOM Status follower


.MOSTF==55			;silly monsym
MO%NTM==1

$LOGALL==-1			;non-zero to log status port to file

.DECSAV

TTY=7
T=10
TT=11
T3=12
T4=13
N=14
S=15
P=17

PDLen==40
LinLen==40			;Size of buffer for a Micom status line
MsgLen==38.			;Fixed size of a status message
MSpeed==9600.			;Line speed for that Micom status line
MaxLin==512.			;Maximum # of lines/ports
StrLen==2000			;Space for string accumulation
TTImsz==100			;Max # pages in TTYINI.BIN file
sIPCFs==36			;Size of small IPCF blocks passed around
IPCFch==0			;Channel for IPCF to knock on

.INSRT MID:SYMBOLS
.INSRT MID:MACROS

Define FATAL &string
	Ercal [Hrroi T,[Asciz string]
	       Jrst FatErr]
Termin

Define JFATAL &string
	Call [Hrroi T,[Asciz string]
	      Jrst FatErr]
Termin

Define OUTFLD width,char
	Setz T3,
	Ildb 3,2
	Cain 3,char
	  Jrst .+3
	Idpb 3,1
	Soja T3,.-4
	Addi T3,width
	Movei 3,40
	Idpb 3,1
	Sojg T3,.-1
Termin

Define ChkChr chars
    IRP chr,,[chars]
	Ildb 1,T
	Caie 1,chr
	  Return
    TERMIN
Termin

Define OUTAC ac,base
	Movei 1,.PRIOU
	Movei 2,(ac)
	Movei 3,base
	NOUT%
	  Nop
Termin

PDL:	-PDLen,,.
	Block PDLen

Debug:	0

IFN $LOGALL,[
LgaNam:	Asciz "SYSTEM:MICOMS.LOGALL"
LgaJFN:	0
LgaCnt:	0
]

McmMod:	Block 10
McmStr:	Asciz "MICOM-STATUS:"
McmDev:	0
McmJFN:	0

LinWho:	Block MaxLin		;0 or BP to pretty line-owner
NICp:	Block MaxLin		;TTY# if port connects to the NIC
TTYtyp:	Block MaxLin		;If non-0, the TTY type for a line

Ports:	Block MaxLin		;Line# this port is connected to, else 0

LineBP:	Block MaxLin		;BP to start of line entry
PortBP:	Block MaxLin		;BP to start of port entry

LinBuf:	Block LinLen		;Buffer for the raw Micom status line.

TTname:	Block 10		;TTY-type string from MICOM.TXT
TTtype:	0			;Turned into TTY-type #

BinFil:	Asciz "SYSTEM:TTYINI.BIN"
DatJFN:	0			;JFN on SYSTEM:MICOM.TXT data file
FilSiz:	0			;# of pages in that file
NewSiz:	0			;Size of new .BIN file
TTIJFN:	0			;JFN on SYSTEM:TTYINI.BIN
NewJFN:	0			;JFN on new TTYINI.BIN file
TTIsiz:	0			;# of pages &tc
BinGen:	0			;Generation (or version) #
BlkSiz:	0			;Size of TTY blocks in that file

TypChr:	0			;Type-code character
Conect:	0			;Flag: non-0 if a Connect, 0 if a Disconnect
MLine:	0
Line:	0			;Line# from status message
MPort:	0
Port:	0			;Port# from status message

TTYBP:	0			;BP to TTY part of descriptor line
FoneBP:	0			;likewise to phone part, 0 if no phone
SavedS:	0			;S before we start writing a new string

TTYtab:	nTTYPs,,nTTYPs
	[Asciz "450"],,.TTL36
	[Asciz "dm2500"],,.TTDAM
	[Asciz "dm3025"],,.TTDAM
	[Asciz "h19"],,.TTH19
	[Asciz "h19us"],,.TTH19
	[Asciz "sun"],,44.
	[Asciz "vt100"],,.TT100
nTTYPs==.-TTYtab-1	

LogJFN:	0			;JFN on this loggin file
LogFil:	Asciz "PS:<SYSTEM>MICOMS.LOG"

LEVTAB:	PSIPC1' ? PSIPC2' ? PSIPC3'
CHNTAB:	Channel IPCFch,2,Answer
	EndChannel

CrePak:	IP%CPD			;Create us a PID, please.
MyPID:	0
	0
	ArgLen,,ArgBlk
PakLen==.-CrePak

ArgBlk:	.IPCII
	0
	Asciz "MICOMS"
ArgLen==.-ArgBlk

MBlock:	.MUPIC			;Assign an interrupt channel to a PID
MutPID:	0
	IPCFch
MBlokl==.-MBlock

InfPak:	0			;<SYSTEM>INFO's reply.
	0
	0
	InfLen,,InfArg

InfLen==4
InfArg:	Block InfLen

DatPak:	0			;Message sent to us by user, a request
	0			;for status, or parameter setting, etc.
	0
	sIPCFs,,In

In:	Block sIPCFs

RepPak:	IP%CFV			;Our reply to the above message.
	0
HisPID:	0
	1000,,RepPag		;Full-page reply

OurNam:	Asciz "SRI-NIC"
Huh:	Asciz "???"
CRLF:	Asciz "
"

Begin:	RESET%
	Move P,PDL
	Call Init		;Initialize

Loop:	Call GetLin		;Get a line of status information
	Call Parse		;Parse it up
	  Jrst MisParse
	Move T,Port
	Skipe Conect
	  Skipa TT,Line		;Line# if connecting,
	    Setz TT,		;  0 if disgusting.
	Movem TT,Ports(T)
	Skipe TTY,NICp(T)	;That port go to our machine?
	  Call SetTTY		;  Yes, so set the string
	Jrst Loop		;then listen for more.

MisParse:
	Move 1,TypChr
	Caie 1,"F
	  Cain 1,"Q
	    Jrst Loop
	Hrroi T,[Asciz "Mis-parse: "]
	Call LogIt		;Make a log entry
	Jrst Loop

Init:	Call InIPCF		;Initialize IPCF stuff
	Call IniInt		;Initialize interrupt system
	Call GetTTI		;Get TTYINI.BIN mapped in.
	Call GetMS		;Get ahold of the status line.
	Call GetDat		;Get Micom data file in memory
	Call Gobble		;then gobble it into BPs and such.
	  Fatal "Bad format for SYSTEM:MICOMS.TXT"
	Skipn Debug
	  Return
	Call Header
	Hrroi 1,[Asciz "Avast!  Aye begards!  Take no survivors!!"]
	Skipe Debug
	  Hrroi 1,[Asciz "Debugging output on..."]
	PSOUT%
	AType CRLF
	Return

IniInt:	Movei 1,.FHSLF
	Move 2,[LEVTAB,,CHNTAB]
	SIR%
	EIR%
	Movx 2,ChnMsk
	AIC%			;Activate interrupts except IPCF
	Return

InIPCF:	Movei 1,PakLen
	Movei 2,CrePak
	MSEND%
	  Fatal "Can't send request to <SYSTEM>INFO"
	Move 1,MyPID
	Movem 1,MutPID
	Movem 1,InfPak+.IPCFR	;<SYSTEM>INFO's reply
	Movem 1,DatPak+.IPCFR	;Incoming data packet
	Movei 1,PakLen
	Movei 2,InfPak
	MRECV%
	  Fatal "Can't get <SYSTEM>INFO's reply"
	Ldb T,[.BP IP%CFE,InfPak+.IPCFL]
	Jumpe T,IIPCF0
	Cain T,.IPCDN
	  Fatal "Someone already has a PID named 'MICOMS'"
	Fatal "Random error reply from <SYSTEM>INFO"

IIPCF0:	Movei 1,MBlokl
	Movei 2,MBlock
	MUTIL%
	  Fatal "Can't assign interrupt channel to 'MICOMS' PID"
	Return

GetMS:	Hrroi	1,McmStr
	STDEV%
	 Fatal "Can't find micom status port"
	Movem	2,McmDev
	Move	1,McmDev
	ASND%
	 Erjmp	[Move 1,[440700,,LinBuf]
		 Hrroi 2,[Asciz "Can't assign micom line, in use by "]
		 Setz 3,
		 SOUT%
		 Move 5,1
		 Movx	1,GJ%SHT\GJ%OLD
		 Hrroi	2,McmStr
		 GTJFN%
		  Erjmp .+1
		 Move 6,1
		 DVCHR%
		  Erjmp .+1
		 Move 1,6
		 RLJFN%
		  Erjmp .+1
		 Hlrz 1,3	;get job number
		 Move 2,[-1,,4]
		 Movei 3,.JIUNO
		 GETJI%
		  Erjmp .+1
		 Move 1,5
		 Move 2,4
		 DIRST%
		  Erjmp .+1
		 Move 1,[440700,,LinBuf]
		 PSOUT%
		 TypeCR "."
		 Jrst Die]
	Move	1,McmDev
	Movei	2,.MOSPD
	Move	3,[MSPEED,,MSPEED]
	MTOPR%
	 Fatal "Can't set baud rate for modem port"
	Movx	1,GJ%SHT\GJ%OLD
	Hrroi	2,McmStr
	GTJFN%
	 Fatal "Can't GTJFN micom status port"
	Movem	1,McmJFN
	Move	2,[field(8.,OF%BSZ)\OF%RD]
	OPENF%
	 Fatal "Can't open micom status port"
	Move	1,McmJFN
	RFMOD%			; get current mode for this line
	 Erjmp	.+1
	Movem 2,McmMod
	Txz 2,TT%ECO\TT%DAM\TT%PGM	; no echo, binary mode, no paging
	SFMOD%
	 Erjmp	.+1
	STPAR%
	 Erjmp	.+1
	Movei 2,.MOSTF
	Movx 3,MO%NTM		;refuse all messages
	MTOPR%
	 Erjmp	.+1
	CFOBF%
	Movei 2,.MOSNT
	Movei 3,.MOSMN		;refuse sys messages
	MTOPR%
	 Erjmp	.+1
	CFOBF%
	CFIBF%
	Return

GetTTI:	Movx 1,GJ%SHT\GJ%OLD
	Hrroi 2,BinFil
	GTJFN%
	  Fatal "Can't get SYSTEM:TTYINI.BIN"
	Movem 1,TTIJFN
	Movx 2,OF%RD\OF%WR
	OPENF%
	  Fatal "Can't open SYSTEM:TTYINI.BIN"
	SIZEF%
	  Fatal "Can't get size of SYSTEM:TTYINI.BIN"
	Caile 3,TTImsz
	  JFatal "SYSTEM:TTYINI.BIN too big for allocated space"
	Movem 3,TTIsiz
	Hrlzs 1			;JFN,,0
	Move 2,[.FHSLF,,TTIpag]
	Txo 3,PM%CNT\PM%RD\PM%WR
	PMAP%
	  Fatal "Can't map in SYSTEM:TTYINI.BIN"
	Move 1,TTIJFN
	Move 2,[1,,.FBGEN]
	Movei 3,4		;Put the results in AC4
	GTFDB%
	  Fatal "Can't get version # of SYSTEM:TTYINI.BIN"
	Hlrzm 4,BinGen		;Save the version(generation)#
	Move 1,TTIadr+1
	Movem 1,BlkSiz		;Block size of TTY blocks
	Return

GetDat:	Movx 1,GJ%SHT\GJ%OLD
	Hrroi 2,[Asciz "SYSTEM:MICOM.TXT"]
	GTJFN%
	  Fatal "Couldn't find SYSTEM:MICOM.TXT"
	Movem 1,DatJFN
	Movx 2,OF%RD
	OPENF%
	  Fatal "Couldn't open SYSTEM:MICOM.TXT"
	SIZEF%
	  Fatal "Couldn't get size of SYSTEM:MICOM.TXT"
	Movem 3,FilSiz		;# of pages
	Hrlzs 1			;JFN,,0
	Move 2,[.FHSLF,,DatPag]	;Put data at DATPAG
	Txo 3,PM%CNT\PM%RD
	PMAP%
	  Fatal "Couldn't map in SYSTEM:MICOM.TXT"
	Return

Gobble:	Move T,[440700,,DatAdr]
	Move S,[440700,,StrBuf]
Gobbl0:	Ildb 1,T
	Cain 1,73		;skip comments
	  Jrst Gobbl1
	Cain 1,15		;skip blank lines
	  Jrst Gobbl1
	Cain 1,"P		;Port entry?
	  Jrst DoPort		;  Yes, handle it.
	Caie 1,"L		;Line entry?
	  Jrst Popj1		;  No, EOF or something
	Movei TT,3
	Call GetNum		;Get the line#
	  Return
	Ildb 1,T
	Caie 1,":
	  Jrst Gobbl1
	Movem T,LineBP(T3)
	Movem S,SavedS		;Save BP to where in StrBuf we'll make string
DoLine:	Ildb 1,T
	Cain 1,^M
	  Jrst DoLin4
	Cain 1,":
	  Jrst [Setzm FoneBP
		Setz TT,
		Jrst DoLin0]
	Cain 1,",
	  Jrst [Movem T,FoneBP
		Movei TT,1
		Jrst DoLin0]
	Idpb 1,S		;Start with the room#
	Jrst DoLine

DoLin0:	Sojl TT,getTYP		;Skip ahead to the TTY-type
DoLn0a:	Ildb 1,T
	Jumpe 1,CPopj
	Caie 1,":
	  Jrst DoLn0a
	Jrst DoLin0

getTYP:	Move 2,[440700,,TTname]
getTY0:	Ildb 1,T
	Cain 1,":
	  Setz 1,
	Idpb 1,2
	Jumpn 1,getTY0
	Movei 1,TTYtab
	Hrroi 2,TTname
	TBLUK%
	Txne 2,TL%NOM\TL%AMB
	  Skipa 2,[.TTDAM]
	    Hrrz 2,(1)
	Movem 2,TTYtyp(T3)

	Movei 1,40
	Idpb 1,S
DoLin1:	Ildb 1,T
	Jumpe 1,CPopj
	Caie 1,^M
	  Cain 1,^J
	    Jrst DoLin2
	Idpb 1,S
	Jrst DoLin1

DoLin2:	Skipn TT,FoneBP
	  Jrst DoLin4
	Movei 1,40
	Idpb 1,S
DoLin3:	Ildb 1,TT
	Cain 1,":
	  Jrst DoLin4
	Idpb 1,S
	Jrst DoLin3

DoLin4:	Move 1,@SavedS
	Camn 1,[Ascii " "]
	  Jrst [Move S,SavedS
		Move 1,[440700,,Huh]
		Jrst DoLin5]
	Setz 1,
	Idpb 1,S
	Movei S,1(S)
	Hrli S,440700
	Move 1,SavedS
DoLin5:	Movem 1,LinWho(T3)

Gobbl1:	Call SkpLin
	  Return
	Jrst Gobbl0

DoPort:	Movei TT,3
	Call GetNum		;Get the port#
	  Return		;  uff da!
	Movem T3,Port		;Save the port#
	Movem T,PortBP(T3)
	Movem T,TTYBP		;Save BP to start of TTY#
	Movei TT,3		;Skip this many colons...
DoPor0:	Ildb 1,T
	Jumpe 1,CPopj		;EOF?
	Caie 1,":
	  Jrst DoPor0
	Sojg TT,DoPor0
	Hrroi 1,OurNam
	Move 2,T
	STCMP%			;See if it's for our host
	Jumpe 1,DoPor1		;Exact match, so yes
	Txnn 1,SC%SUB		;Our name is a substring?
	  Jrst Gobbl1		;  Nope, so skip this line
	Ildb 3,2		;See what comes after the string
	Caie 3,^M		;CR?
	  Jrst Gobbl1		;  Nope, so skip.
DoPor1:	Ildb 1,TTYBP
	Caie 1,":
	  Jrst Gobbl1
IRP chr,,["T,"T,"Y]
	Ildb 1,TTYBP
	Cail 1,"a
	  Trz 1,40
	Caie 1,chr
	  Jrst Gobbl1
TERMIN
	Setz T3,
DoPor2:	Ildb 1,TTYBP
	Cain 1,":
	  Jrst DoPor3
	Cail 1,"0
	  Caile 1,"7
	    Jrst SkpLin
	Lsh T3,3
	Addi T3,-"0(1)
	Jrst DoPor2

DoPor3:	Move TT,Port
	Movem T3,NICp(TT)
	Jrst Gobbl1

SkpLin:	Ildb 1,T		;Then skip to EOL
	Jumpe 1,CPopj		;uff da!  EOF
	Caie 1,^J
	  Jrst SkpLin
	Jrst Popj1

GetLin:	Setzm LinBuf
	Move 1,McmJFN
GetLi0:	BIN%
	Jumpe 2,GetLi0
	Caie 2,^M
	  Cain 2,^J
	    Jrst GetLi0
	Dpb 2,[350700,,LinBuf]
	Move 2,[350700,,LinBuf]
	Movei 3,MsgLen-1
	Movei 4,^M
	SIN%			;Suck in a line
	Setz 4,
	Dpb 4,2			;kill CR
	Jumpg 3,NotAll
	Skipn LinBuf
	  Jrst GetLin
IFN $LOGALL,[
	Call LgaLin
]
	Return

NotAll:	Hrroi T,[Asciz "Partial line: "]
	Call LogIt
	Jrst GetLin

Parse:	Move T,[440700,,LinBuf]
	Movei TT,4		;Get nnnn TID code
	Call GetNum
	  Return
	ChkChr [40]
	Ildb 1,T
	Movem 1,TypChr
	Cain 1,"C
	  Jrst [Setom Conect
		Jrst Parse0]
	Caie 1,"D
	  Return
	Setzm Conect

Parse0:	Ildb 1,T		;Who knows what the valid choices for this are?
	ChkChr [40]
	Call GetLP
	  Return
	ChkChr [40]
	Call GetLP
	  Return
	Skipn MPort		;MICOM 0 stuff?
	  Skipe MLine
	    Return
	Jrst Popj1

GetLP:	Ildb 1,T
	Cain 1,"P
	  Skipa T4,[MPort]
	    Movei T4,MLine
	Movei TT,1
	Call GetNum
	  Return
	Movem T3,(T4)
	Movei TT,3
	Call GetNum
	  Return
	Caile T3,MaxLin		;Range-check
	  Return
	Movem T3,1(T4)
	Jrst Popj1

GetNum:	Setz T3,
GetNu0:	Ildb 1,T
	Cail 1,"0
	  Caile 1,"9
	    Return
	IMuli T3,10.
	Addi T3,-"0(1)
	Sojg TT,GetNu0
Popj1:	Aos (P)
CPopj:	Return

Answer:	Pushn P,[1,2,3,4,T,TT,T3,TTY]
	Movei 1,sIPCFs
	Hrlm 1,DatPak+.IPCFP
	Movei 1,PakLen
	Movei 2,DatPak
	MRECV%
	  Jrst Dismis
	Move 1,In
	Camn 1,[Sixbit "NEWBIN"]	;New binary file?
	  Jrst [Call NewBin		;  Yep, so deal with it.
		Jrst Ans0]
	Camn 1,[Sixbit "DEBUG"]
	  Jrst [Setcmm Debug
		Hrroi T,[Asciz "[Debug ON]"]
		Skipn Debug
		  Hrroi T,[Asciz "[Debug OFF]"]
		Setz TT,
		Call NewMsg
		Jrst Ans0]
	Came 1,[Sixbit "STATUS"]
	  Jrst Dismis
	Call Report		;Make up the reply page.
Ans0:	Move 1,DatPak+.IPCFS
	Movem 1,RepPak+.IPCFR
	Movei 1,PakLen
	Movei 2,RepPak
	MSEND%
	  Nop
Dismis:	Popn P,[TTY,T3,TT,T,4,3,2,1]
	DEBRK%

Report:	Movsi T,-MaxLin
	Hrroi 1,RepAdr
	Hrroi 2,[Asciz "Port --> Line  Res. Connected to     -TTY#-  Who/What/Why/When/Where
"] ?	Setz 3,
	SOUT%
RLoop:	Skipn TT,Ports(T)	;This port connected?
	  Jrst NxtRep		;  Nope, try next
	Movei 2,(T)
	Move 3,[Field(3,NO%COL)+NO%LFL+NO%OOV+10.]
	NOUT%			;Port#
	  Nop
	Movei 2,(TT)
	Move 3,[Field(9.,NO%COL)+NO%LFL+NO%OOV+10.]
	NOUT%
	  Nop
	Hrroi 2,[Asciz "   "]	;3 spaces
	Setz 3,
	SOUT%
	Skipn 2,PortBP(T)
	  Jrst [Move 2,[440700,,[Asciz "???"]]
		Jrst Repor1]
	Movei T3,2		;skip 2 colons
Repor0:	Ildb 3,2
	Caie 3,":
	  Jrst Repor0
	Sojg T3,Repor0
Repor1:	OutFld 5,":
	OutFld 17.,^M
	Skipn 2,PortBP(T)
	  Skipa 2,[440700,,[Asciz "???"]]
	    Ibp 2		;Skip the colon
	OutFld 8.,":
	Move 2,LinWho(TT)
	Setz 3,
	SOUT%
	Hrroi 2,CRLF
	SOUT%
NxtRep:	Aobjn T,RLoop
	Return

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;	Here if we were told to get a new binary file
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

NewBin:	Movx 1,GJ%SHT
	Hrroi 2,BinFil
	GTJFN%
	  Jrst [Hrroi T,[Asciz "?Couldn't get JFN on new TTYINI.BIN file"]
		Seto TT,	;Include system error code
		Jrst NewLuz]
	Movem 1,NewJFN
	Move 2,[1,,.FBGEN]
	Movei 3,4		;Put the results in AC4
	GTFDB%
	 Erjmp [Hrroi T,[Asciz "?Couldn't get version# of new TTYINI.BIN file"]
		Seto TT,
		Jrst NewLuz]
	Hlrzs 4			;Keep just the version# (now in the RH)
	Camn 4,BinGen		;This latest file same as one we now have?
	  Jrst [Hrroi T,[Asciz "%Already using the latest version"]
		Setz TT,	;Don't include system error code
		Jrst NewLuz]	;  Yes, so what are they fussing about?
	Move 2,[Field(36.,OF%BSZ)+OF%RD+OF%WR]
	OPENF%
	  Jrst [Hrroi T,[Asciz "?Couldn't open new TTYINI.BIN file"]
		Seto TT,
		Jrst NewLuz]
	SIZEF%
	  Jrst [Hrroi T,[Asciz "?Couldn't get size of new TTYINI.BIN file"]
		Seto TT,
		Jrst NewLuz]
	Movem 3,NewSiz
	Hrlzs 1			;JFN,,0
	Move 2,[.FHSLF,,TTNpag]
	Txo 3,PM%CNT\PM%RD\PM%WR
	PMAP%			;Map in the new file
	 Erjmp [Hrroi T,[Asciz "?Couldn't map in new TTYINI.BIN file"]
		Seto TT,
		Jrst NewLuz]
	Call CopOld		;Copy over old data to new file
	Seto 1,
	Move 2,[.FHSLF,,TTNpag]
	Move 3,NewSiz
	Txo 3,PM%CNT
	PMAP%			;Map out the new bin file
	  Ernop
	Move 1,NewJFN
	CLOSF%			;then close it.
	  Nop
	Setzm NewJFN
	Hrlz 1,TTIJFN
	Move 2,FilSiz
	UFPGS%			;Do this for good measure
	  Nop			;  We don't really need it
	Seto 1,
	Move 2,[.FHSLF,,TTIpag]
	Move 3,FilSiz
	Txo 3,PM%CNT
	PMAP%			;Map out the old .BIN file
	  Ernop
	Move 1,TTIJFN
	CLOSF%			;then close it.
	  Nop
	Call Header
	TypeCR "Current data copied to new .BIN file, switching over now..."
	Call GetTTI		;Now re-get the new TTI file
	Hrroi T,[Asciz "[OK]"]
	Setz TT,
	CallRet NewMsg

CopOld:	Movsi T,-MaxLin
CopOl0:	Skipn TTY,NICp(T)	;This a NIC port?
	  Jrst NxtOld		;  Nope...
	Move TT,Ports(T)
	IMul TTY,BlkSiz
	Move 1,TTYtyp(TT)	;Old tctyp
	Movem 1,TTNadr+3(TTY)	;Update the TTY-type
	Hrroi 1,TTNadr+7(TTY)	;Start of FINGER string
	Hrro 2,LinWho(TT)
	Movei 3,29.		;Max # of characters
	Setz 4,
	SOUT%
NxtOld:	Aobjn T,CopOl0
	Return

NewLuz:	Skipe 1,NewJFN		;Release JFN on new .BIN file
	  Jrst [CLOSF%
		  Jrst [Move 1,NewJFN
			RLJFN%
			  Nop
			Jrst .+1]
		Jrst .+1]
NewMsg:	Hrroi 1,RepAdr
	Move 2,T
	Setz 3,
	SOUT%
	Hrroi 2,CRLF
	SOUT%
	Skipn TT
	  Return
	Hrroi 2,[Asciz "Last MICOMS error: "]
	SOUT%
	Call Barf0		;(entry for when AC1 is already set up)
	Hrroi 2,CRLF
	SOUT%
	Return			;all done.

SetTTY:	Skipe Debug
	  Jrst [Call Header
		Hrroi 1,[Asciz "Connect: Port "]
		Skipn TT
		  Hrroi 1,[Asciz "Disconnect: Port "]
		PSOUT%
		OutAC T,10.
		Type ", Line "
		OutAC TT,10.
		Type ", TTY "
		OutAC TTY,8.
		Type " -- "
		Jrst .+1]
	IMul TTY,BlkSiz
	Hrro 2,LinWho(TT)
	Skipn TT
	  Hrroi 2,[Asciz "Magic MICOM Line"]
	Skipe Debug
	  Jrst [Move 1,2
		PSOUT%
		AType CRLF
		Jrst .+1]
	Hrroi 1,TTIadr+7(TTY)	;Start of FINGER string
	Movei 3,29.		;Max # of characters
	Setz 4,
	SOUT%
	Jumpe TT,CPopj
	Move 1,TTYtyp(TT)
	Movem 1,TTIadr+3(TTY)	;Update the TTY-type
	Return

FatErr:	Call Header
	Move 1,T
	PSOUT%
	Type " -- "
	Call Barf
	Type " at "
	Movei 1,.PRIOU
	Hrrz 2,(P)
	Subi 2,1
	Movei 3,8.
	NOUT%
	  Nop
	AType CRLF
Die:	HALTF%
	Jrst Die


;log all micom messages (in linbuf) (except boring ones)
LgaLin:	Skipe 1,LgaJFN
	 Jrst LgaGot
	Jumpl 1,[Ret]
	Movx 1,GJ%SHT\GJ%OLD
	Hrroi 2,LgaNam
	GTJFN%
	 Erjmp [Setom LgaJFN
		Ret]
	Movem 1,LgaJFN
	Move 2,[Field(7,OF%BSZ)+OF%APP]
	OPENF%
	  Jrst [Move 1,LgaJFN
		RLJFN%
		  Nop
		Setom LgaJFN
		Ret]
LgaGot:
;don't log if boring
	Movei 2,5.
	Adjbp 2,[440700,,LinBuf]	;point to reason
	Move 4,[440700,,5]
	Setz 5,
	Ildb 3,2
	Idpb 3,4
	Ildb 3,2
	Idpb 3,4		;now got reason in ac5
	Camn 5,[Asciz /F4/]
	 Ret
	Camn 5,[Asciz /F7/]
	 Ret
				
	Seto 2,
	Setz 3,
	ODTIM%
	Movei 2,.chspc
	BOUT%
	Movei 2,5.
	Adjbp 2,[440700,,LinBuf]	;skip sequence number
	Movni 3,20.			;leave off date stuff
	SOUT%
	Hrroi 2,[Asciz /
/]
	SOUT%
	Aos 2,LgaCnt
	Caige 2,10.
	 Ret
	Setzm LgaCnt
	Txo 1,CO%NRJ
	CLOSF%
	 Erjmp .+1
	Hrrz 1,1
	Move 2,[Field(7,OF%BSZ)+OF%APP]
	OPENF%
	  Jrst [Move 1,LgaJFN
		RLJFN%
		  Nop
		Setom LgaJFN
		Ret]
	Ret

LogIt:	Movx 1,GJ%SHT
	Hrroi 2,LogFil
	GTJFN%
	  Movei 1,.PRIOU
	Movem 1,LogJFN
	Move 2,[Field(7,OF%BSZ)+OF%APP]
	OPENF%
	  Jrst [Move 1,LogJFN
		RLJFN%
		  Nop
		Return]
	Seto 2,
	Setz 3,
	ODTIM%			;Output the timestamp.
	Movei 2,40
	BOUT%
	Move 2,T		;BP to label string
	SOUT%
	Movei 2,""
	BOUT%
	Hrroi 2,LinBuf
	SOUT%
	Hrroi 2,[Asciz /"
/] ?	SOUT%
	CLOSF%
	  Nop
	Return

Header:	Movei 1,.PRIOU
	DOBE%			;Wait until output buffer empty
	Type "[MICOMS] "
	Return

Barf:	Movei 1,.PRIOU
Barf0:	Hrloi 2,.FHSLF
	Setz 3,
	ERSTR%
	  Nop
	  Nop
	Return

StrBuf:	Block StrLen

Variables
Constants

RepPag==<./1000>+1
RepAdr=RepPag*1000

TTIpag==RepPag+1
TTIadr=TTIpag*1000

TTNpag==TTIpag+TTImsz
TTNadr=TTNpag*1000

DatPag==TTNpag+TTImsz
DatAdr=DatPag*1000

	End Begin
