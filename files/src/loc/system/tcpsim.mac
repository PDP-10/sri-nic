;<SUBSYS.CMU>TCPSIM.MAC.9, 11-Nov-86 18:41:40, Edit by VAF
;[VAF]	PRNTJC was missing a PSOUT%.
;<SUBSYS.CMU>TCPSIM.MAC.8,  4-Dec-85 11:27:09, Edit by VAF
;[SCO]	BILLW@SCORE's change to reduce delay time when checking for buffer done
;<SUBSYS.CMU>TCPSIM.MAC.7, 22-Oct-85 15:08:03, Edit by VAF
;[VAF]	Make TCPGJF retry OPEN% several times on resource shortage.
;<SUBSYS.CS>TCPSIM.MAC.6, 12-Aug-85 01:54:35, Edit by VAF
;Merge local changes into BBN version:
; [VAF]	Make this a separate module.
;	Allow OPEN% to return a real TOPS-20 error
;	Use OPTMOT instead of RTXMOT when doing OPEN% (~~~REMOVED)
;	Have GETERR do a CLOSE% if the connection is closing.
;	If CZ%ABT specified in TCPCLO, then just close - don't read extra data
;	Code to print debugging info when DBUG (loc 135) is set.
; [MRC]	Don't timeout connections in various places.

	TITLE TCPSIM - DEC TCP interface simulator
	SEARCH MONSYM,MACSYM,TCPUNV

;	TCP Simulation Definitions - Full Duplex, Serially Reusable

	ENTRY TCPGJF,TCPOPN,TCPCLO
	ENTRY TCPBIN,TCPSIN,TCPBOU,TCPSOU
	ENTRY TCPRBS,TCPSBS
	ENTRY TCPGST,TCPMTP,TCPJFS

A=:1				; JSYS, temporary AC's
B=:2
C=:3
D=:4
P=:17

;[VAF] Move many definitions to TCPUNV.

; Internal Registers	;*****	Beware Order BIN/SIN	BOUT/SOUT
TIB==5			;***	;	     Data byte	Temp
TPD==6			;***	;	     - TCP packed data -
TOB==7			;***	;	     Temp	Data byte
TPC==10				; TPD bits   # left	# left
				; (32 to 0)  to read	to fill
TBC==11				; # Bits in  TIB	TOB
				; (T.BSZ to 0)
TFSB==12			; Points to T.JFN
TAC0==13	; *** LAST	; Points to "saved" AC0

JFNTXS:	BLOCK 60		; Used by JFNS% simulation
STATMP:	BLOCK 4			; Used by CONSYN for doing STAT% calls
RTRCNT:	BLOCK 1			;[VAF] Retry counter in $GTJFN
RTRMAX==6			;[VAF] Number of retries permitted
RTRTIM==^D5000			;[VAF] Amount of time between retries

	SUBTTL	--- VAF's added code for debugging

DBUG=135			; Non-zero means debugging

DEFINE PRHALF(adr) <
	HLRZ B,adr
	NOUT%
	 TRN
	MOVEI B,","
	BOUT%
	MOVEI B,","
	BOUT%
	HRRZ B,adr
	NOUT%
	 TRN
	>

DEFINE PRTACS(str) <
	SKIPE DBUG		; Debugging?
	 CALL [	PUSH P,A	; Save A first
		HRROI A,[ASCIZ/[str: /]
		JRST PRNTAC]
	>

DEFINE PRTBUF(str) <
	SKIPE DBUG		; Debugging?
	 CALL [	PUSH P,A	; Save A first
		HRROI A,[ASCIZ/[str: /]
		JRST PRNTBF]	; Go print out info on the SEND/RECV buffers
	>

DEFINE PRTJCN(str) <
	SKIPE DBUG		; Debugging?
	 CALL [	PUSH P,A	; Save A
		HRROI A,[ASCIZ/[str: /]
		JRST PRNTJC]
	>

PRNTAC:	PUSH P,B
	PUSH P,C
	PSOUT%
	MOVEI A,.PRIOU
	MOVEI C,^D8
	PRHALF -2(P)
	MOVEI B," "
	BOUT%
	PRHALF -1(P)
	MOVEI B," "
	BOUT%
	PRHALF (P)
	MOVEI B," "
	BOUT%
	PRHALF D
PACRET:	TMSG <]
>
	POP P,C
	POP P,B
	POP P,A
	RET

PRNTBF:	PUSH P,B		; Save B
	PUSH P,C		; And C
	PUSH P,D		; And D
	PSOUT%			; Print which JSYS
	MOVEI A,.PRIOU
	MOVEI C,^D8
	PRHALF -3(P)		; AC1
	MOVEI B," "
	BOUT%
	PRHALF -2(P)		; AC2
	MOVEI B," "
	BOUT%
	PRHALF -1(P)		; AC3
	MOVEI B," "
	BOUT%
	PRHALF D		; AC4 (untouched so far)
	SKIPN D,-2(P)		; Get back addres of buf. header
	 JRST PRTBF2		; If null, then quit
	HRROI B,[ASCIZ/
	HDR: /]	; Say what now
	MOVNI C,^D8
	SOUT%
	MOVEI C,^D8
	PRHALF .TCPBF(D)	; Print this word
	MOVEI B," "
	BOUT%
	PRHALF .TCPBA(D)
	MOVEI B," "
	BOUT%
	PRHALF .TCPBC(D)
PRTBF2:	POP P,D			; Restore D first
	JRST PACRET		; Then join PRNTAC code for restoring rest

PRNTJC:	PUSH P,B		; And B
	PUSH P,C		; and C
	PSOUT%			; Print the message, first
	MOVEI A,.PRIOU		; To terminal
	MOVE B,-2(P)		; Saved A there
	MOVEI C,^D8		; Want octal
	NOUT%			; Print it
	 TRN
	HRROI B,[ASCIZ/, JCN=/]
	MOVNI C,6
	SOUT%
	MOVE B,-2(P)		;Connection block
	MOVE B,T.JCN(B)		;The JCN
	MOVEI C,^D8
	NOUT%
	 TRN
	TMSG <]
>
	POP P,C
	POP P,B
	POP P,A
	RET

SUBTTL	TCP Simulation - TCPGJF - Funny GTJFN

COMMENT \	The simulated GTJFN uses a connection block instead of a
filespec.  It is a .TCPCS word block (inbedded within "nameCON") which
contains the Internet addresses and ports of the foreign and local ends
of the connection (zero if "wild").  The foreign host address is at offset
.TCPFH, the foreign port at .TCPFP, the local host address at .TCPLH, and
the local port at .TCPLP (may not be zero).  Offsets .TCPOP and .TCPIP are
used for options and IP parameters;  they are usually zero.

Set host address(es) and port(s) into connection block at
		nameCON+T.CDB
A/	0,,Address of pseudo JFN variable (nameCON)
B/	-#Buffers (-T.NDBF),,Location of buffers (nameBUF)
C/	TCP OPEN flags,,Size of each buffer (T.BFSZ)
	$GTJFN (CALL TCPGJF)	; Simulate GTJFN & create connection
Ret+1:	  error
Ret+2:	OK

\

TCPGJF:	TXNE A,GJ%SHT		; Decide if real or TCP call
	  JRST [GTJFN		; GJ%SHT set means real
		 SKIPA		; Error return
		  AOS (P)	; Ok return
		RET]

	CALL TCPINI		; Save things, enter simulation context

SUBTTL TCP Simulation - TCPGJF, cont. - Initialize file conn. info.

	SKIPE T.JCN(TFSB)	; Already been here?
	  JRST TCPGJI		; Yes

	SETZM T.JCN+1(TFSB)	; Zero nameCON & buffer headers
	HRRI D,T.JCN+1+1(TFSB)	; Build BLT word
	HRLI D,T.JCN+1(TFSB)

	HLRE TIB,B		; Find last buffer header end address
	MOVNS TIB		; # buffer headers, per direction
	ASH TIB,1		; Total, both directions
	IMULI TIB,.TCPBS	; Total words
	ADDI TIB,T.SIZE-1(TFSB)	; End address

	BLT D,(TIB)		; Clear everything

	HRRZ TBC,C		; Buffer size, words
	ASH TBC,2 		; Get size in (8-bit) bytes
	MOVEM TBC,T.BSZO(TFSB)	; Store for later use

	MOVEI D,T.HDR(TFSB)	; Location of first input ring header
	TXO D,TCP%DN		; Buffer belongs to program
	HRRI TPC,(TFSB)		; First do Input side
	HRLI TPC,-2		; Input, then output
	MOVEM B,TIB		; Save AOBJN count in left half

INIRNG:	HRRZM D,T.CUR(TPC)	; First buffer header
	HRRZM B,T.PTR(TPC)	; First data buffer for pointer
	HLL B,TIB		; Count of buffers in ring

INIRNL:	HLLZM D,.TCPBF(D)	; TCP%DN
	HRRZM B,.TCPBA(D)	; Set data buffer address into header
	MOVEM TBC,.TCPBC(D)	; Set byte count

	ADDI D,.TCPBS		; Step to next buffer header
	ADDI B,-1(C)		; Step to next data buffer (-1 for AOBJN)

	HRRM D,-.TCPBS(D)	; Point previous header to this one
	AOBJN B,INIRNL		; Loop thru all buffers

	MOVE TOB,T.CUR(TPC)	; First buffer header
	HRRM TOB,-.TCPBS(D)	; Close ring

	AOBJN TPC,INIRNG	; Back for output

	HRLI B,(POINT 32)	; Construct 4-byte pointer
	HLLM B,T.PTR(TFSB)	; To Input
	HLLM B,T.PTR+1(TFSB)	; To Output

	MOVEI A,RTRMAX		;[VAF] Number of times to retry open
	MOVEM A,RTRCNT		;[VAF] Set it.
TCPGJI:

SUBTTL TCP Simulation - TCPGJN, cont., Establish the connection

	MOVEI A,T.CDB(TFSB)	; Connection descriptor block
	HLL A,C(TAC0)		; Flags
	MOVX B,RXTMOT		; Retransmission timeout
;[VAF]	MOVX B,OPTMOT		;~~~
	MOVX C,RXPARS		; Retransmission parameters
	PRTACS <OPEN%>		;[VAF] Print debug info about open
	OPEN%
	  JRST TCPGJX
	MOVEM A,T.JCN(TFSB)	; Save JCN

	MOVX A,GS%ASG		; Flag "JFN being assigned"
	MOVEM A,T.STS(TFSB)

	AOS -2(TAC0)		; Skip return from $GTJFN
	HRRZM TFSB,A(TAC0)	; To be returned
	SETZB TPD,TPC		; No packing state to be saved
	RET			; Go leave simulation context


; OPEN failed, analyze reason & ABORT JCN

TCPGJX:	HRRZ C,A		; Error code
	ANDI C,37		; Just error code
	HLRZS A			; Possible JCN

	JUMPE A,TCPGJY		; No JCN
	TXO A,TCP%JS
	PRTACS <ABORT%>		;[VAF] Print info
	ABORT%			; Abort that JCN
	  JFCL
TCPGJY:	
	SETOM T.JFN(TFSB)	; No useful connection (shouldn't need this)
	SETZM T.JCN(TFSB)	; No useful connection

	IFXE. C,600000		;[VAF] Allow real TOPS-20 error through here
	  MOVX B,GJFX24		; Default error code
	  CAIN C,^D1		; Argument error
	   MOVX B,GJFX40	; "Undefined attribute"
	  CAIN C,^D4		;[VAF] Resource shortage?
	   JSP A,TCPGJZ		;[VAF] Yes - try to handle it
	  CAIN C,^D5		; Wild FH/FP only allowed if listening
	   MOVX B,GJFX31	; "Invalid wildcard"
	  CAIN C,^D6		; Connection already exists (error??)
	   MOVX B,GJFX27	; "File already exists"
	  CAIN C,^D7		; Rejected/reset
	   MOVX B,OPNX21	; "Connection refused"
	  CAIN C,^D9		; Transmission timeout
	   MOVX B,NSPX17	; "Process aborted, timed out, or..."
	  MOVEM B,A(TAC0)	; To be returned

	  CALL SETERR		; Set process error code
	ENDIF.			;[VAF]
	SETZB TPD,TPC
	RET

;[VAF] *** Begin ***

;Routine to handle temporary resource allocation failure.
;Currently, just pauses and retries OPEN. Should probably abort JCN's
;for this job, if available. At some point, it may be useful to try aborting
;old connections.
;Called with:
;	JSP A,TCPGJZ

TCPGJZ:	SOSG RTRCNT		;Can we try again?
	IFSKP.			;Yes.
	  MOVX A,RTRTIM		;Amount of time to wait
	  DISMS%		;Wait for resource shortage to clear up
	  JRST TCPGJI		;Go retry the OPEN%
	ENDIF.
	MOVX B,GJFX22		;Give "Insufficient System Resources"
	JRST (A)		;And return
;[VAF] *** End ***

SUBTTL TCP Simulation - TCPOPN - Funny OPENF

; A/	nameCON
; B/	FLD(n,OF%BSZ)!OF%RD!OF%WR
;	CALL TCPOPN
;Ret+1:	  error
;Ret+2:	OK


TCPOPN:	TRNN A,777600		; JFN or TCP connection?
	  JRST [OPENF		; JFN
		 SKIPA		; Error return
		  AOS (P)	; Skip return
		RET]

	PUSH P,D	; ****
	PUSH P,C		; Save registers
	PUSH P,B

	SKIPN T.JCN(A)		; Connection open?
	  JRST TCPOPE		; No, error

	PUSH P,A		; Save arg
	MOVX D,<-CNTMOT,,0>	; Synchronization timeout
TCPOPW:	MOVX A,<^D1000>		; A second
	DISMS
	TXNE 0,F.CNAB		; Stop waiting request?
	  JRST TCPOPD		; Yes, don't wait longer
	HRRZ A,(P)		; Argument
	CALL CONSYN		; Connecion synced?
	  JRST TCPOPR		; Leave if aborted
	  AOBJN D,TCPOPW	; Not yet, wait a second
	JUMPGE D,TCPOPO		; Give up
	POP P,A			; Restore arg
	MOVE B,(P)	; ***	; Restore arg

	MOVX C,GS%ASG
	ANDCAM C,T.STS(A)	; No longer being assigned because
	MOVX C,GS%OPN		; Connection open
	IORB C,T.STS(A)		; Current status

	TXNE B,OF%RD		; Process READ bit
	  CALL TCPRED
	TXNE B,OF%WR!OF%APP	; Process WRITE bit
	  CALL TCPWRT
	MOVEM C,T.STS(A)	; Update status

	LOAD C,T$BSZ,+B		; Get byte size
	SKIPN C			; Zero means 36
	 MOVX C,^D36
	CAIL C,1		; Only allow 1
	 CAILE C,^D36		; to 36
	  JRST TCPOPB		; Invalid size

	MOVEM C,T.BSZ(A)	; Set new size

	AOS -3(P)	; ***	; Skip return
	JRST TCPOPX

; Open errors

TCPOPD:	MOVX B,OPNX20		; "Foreign host dead"
	SKIPA
TCPOPR:	  MOVX B,OPNX21		; "Foreign host rejected"
	SKIPA
TCPOPO:	  MOVX B,OPNX8		; "Device not on line"
	POP P,A			; Restore argument A
	SKIPA
TCPOPE:	  MOVX B,DESX3		; "JFN is not assigned"
;	SETZM T.JCN(A)		; No useful connection
	SKIPA
TCPOPB:	  MOVX B,SFBSX2		; "Invalid byte size"
	CALL SETERR		; Set process error code
	MOVE A,B		; Return code too
TCPOPX:
	POP P,B
	POP P,C		; ****	; Restore registers
	POP P,D
	RET






SUBTTL TCP Simulation - TCPOPN - Transfer direction processing


TCPRED:	TXON C,GS%RDF		; Already reading?
	  RET			; No
				; Yes, do it again
	SETZM T.SVC(A)		; No partial word
	SETZM T.CNT(A)		; No more data in buffer
	RET


TCPWRT:	TXON C,GS%WRF		; Already writing?
	  RET			; No
				; Yes, do it again
	RET			; Should have done a PUSH to get
				; things synced
	SETZM T.SVC+1(A)	; No partial word
	SETZM T.CNT+1(A)	; No more data in buffer
	RET

SUBTTL TCP Simulation - TCPBIN - Simulate BIN

TCPBIN:	TRNN A,777600		; JFN or TCP connection?
	  JRST [BIN		; JFN
		ERCAL TERJMI
		RET]

	SETZ B,			; Return NULL byte on error
	SKIPN T.JCN(A)		; Connection ok?
	  CALL TERJMI	;RET	; Illegal inst. ;No, return null byte

	CALL TCPINI		; Save state

;[MRC]	MOVX D,TIMOT		; Give up after an hour
	SETZ D,			;[MRC] Reward the patient

; Simulate BIN by SIN of 1 byte to saved B on stack

	MOVE TBC,T.BSZ(TFSB)	; User byte size
	MOVEI B,B(TAC0)		; Build byte pointer to saved B
	DPB TBC,[POINT 6,B,5]	; Set byte position
	DPB TBC,[POINT 6,B,11]	; Set byte size

	MOVNI C,1		; Want one byte there

	CALLRET TCPBI		; TCP to user

SUBTTL TCP Simulation - TCPSIN - Simulate SIN

; Only C .LT. 0 case is simulated

TCPSIN:	TRNN A,777600		; JFN or TCP connection?
	  JRST [SIN		; JFN
		ERCAL TERJMP
		RET]

	SKIPGE C 		; Only neg count SIN supported
	 SKIPN T.JCN(A)		; Still open?
	  CALL TERJMP	; or I	; No, do nothing

	PRTACS <$SIN>		;[VAF] Print debug info

	TLC B,777777
	TLCN B,777777
	  HRLI B,(POINT 7,0)

	CALL TCPINI		; Save state

;[MRC]	MOVX D,TIMOT		; Give up after an hour
	SETZ D,			;[MRC] Reward the patient

	CALL TCPBI		; TCP to user

	MOVEM B,B(TAC0)		; B to be returned
	MOVEM C,C(TAC0)		; C too

	SETZ C,
	IDPB C,B		; End string with NULL

	RET			; To save/restore state

SUBTTL TCP Simulation - TCPBI - Unpack TCP into arbitrary size bytes

;  B/ Byte pointer,  C/ - byte count,  D/ Timeout, sec, TFSB
;		TIB			TPD
;	+----------------------+------------------+
;	!           0          !<----v---->! xxxx !
;	+----------------------+-----!------------+
;		TBC/ (T.BSZ)    TPC/ n
;
;	+----------------------+------------------+
;	!      0     !<---v--->!<--v-->! xxxxxxxx !
;	+-----------------!----+---!--------------+
;	      TBC/ (T.BSZ)-a  TPC/ n-a  where a=min(n,(T.BSZ))

TCPBI:	SETZ TIB,		; Clear user byte
	MOVE TBC,T.BSZ(TFSB)	; User byte size
	JUMPLE TPC,TCPBI3	; Need bits to unpack

TCPBI2:	CAML TPC,TBC		; Able to fill user byte?
	  JRST TCPBI6		; Yes, TPC .ge. TBC
	LSHC TIB,(TPC)		; Empty 32-bit word
	SUB TBC,TPC		; Bits still needed in byte (.GT.0)

TCPBI3:	SKIPLE TPC,T.CNT(TFSB)	; TCP octets left in buffer
	  JRST TCPBI4		; Have some
	CALL GETBUF		; None, get another buffer
	MOVE TOB,T.STS(TFSB) 	; Get status bits
	TXNN TOB,GS%EOF+GS%ERR	; End of file? (or error)
	  JRST TCPBI3		; No, go get its actual octet count
	SETZ TPD,		; Yes, return NULL
	JRST TCPBI5

; Get next (4) octets from TCP
TCPBI4:	SUBI TPC,4		; Assume 4 TCP octets in buffer
	MOVEM TPC,T.CNT(TFSB)	; Update count remaining
	ILDB TPD,T.PTR(TFSB)	; Get 32-bits
	LSH TPD,4		; Left justify
	SKIPLE TPC		; Get all 4 TCP octets?
TCPBI5:	  SETZ TPC,		; Yes
	ADDI TPC,4		; # There
	LSH TPC,^D3		; # bits therein
	JRST TCPBI2		; Go finish byte

; Have enough packed data to complete a user byte
TCPBI6:	LSHC TIB,(TBC)		; Complete byte
	SUB TPC,TBC		; Bits left in 32-bit word

	IDPB TIB,B		; Byte to user

	MOVE TOB,T.STS(TFSB)	; Get status
	TXNN TOB,GS%EOF+GS%ERR	; Unless EOF or error
	  AOJN C,TCPBI		; Loop if want another byte
	RET			; Go finish off

SUBTTL TCP Simulation - GETBUF - Get another buffer

; Simulation state - TFSB
;	MOVX D,<Timeout, seconds>
;	CALL GETBUF

GETBUF:	PUSH P,D		; Save registers
	PUSH P,C
	PUSH P,B

	MOVE B,T.CUR(TFSB) 	; Get pointer to current buffer head

; Finished with current buffer, ask for it to be refilled

GETBU0:	MOVE C,T.BSZO(TFSB)	; Reset maximum buffer count
	MOVEM C,.TCPBC(B)	; In buffer header

	PRTBUF <RECV%>		;[VAF] print debugging info

	MOVE A,T.JCN(TFSB) 	; Get the JCN
	RECV%			; Start input on this buffer
	IFNSK.			;[VAF] Error...
	  DPB A,[POINT 8,.TCPBF(B),7] ; Save error code, process later
	  SKIPN DBUG		;[VAF] Doing debugging?
	ANSKP.			;[VAF] Yes
	  PUSH P,A		;[VAF]
	  PUSH P,B		;[VAF]
	  PUSH P,C		;[VAF]
	  TMSG <RECV failed: >	;[VAF]
	  MOVEI A,.PRIOU	;[VAF]
	  MOVE B,-2(P)		;[VAF]
	  MOVEI C,^D8		;[VAF]
	  NOUT%			;[VAF]
	   TRN			;[VAF]
	  TMSG <
>				;[VAF]
	  POP P,C		;[VAF]
	  POP P,B		;[VAF]
	  POP P,A		;[VAF]
	ENDIF.

; Step to next buffer and begin processing it

	HRRZ B,0(B)		; Step to next buffer
	HRRZM B,T.CUR(TFSB)	; Make it be current
GETBU1:	MOVE C,.TCPBF(B)	; Get flags of this new buffer
	TXNN C,TCP%ER!TCP%DN	; Error code or done yet?
	  JRST GETBU2		; No, wait
	TXNE C,TCP%ER		; Error?
	  JRST GETERR		; Yes

; Buffer ok to process, see if it has any data

	MOVE C,T.BSZO(TFSB)	; Total octets
	SUB C,.TCPBC(B)		; Less octets not xferred
	JUMPE C,GETBU0		; If none, get next buffer

; Setup to read data from buffer

	MOVEM C,T.CNT(TFSB)	; Set octets left in current buffer
	MOVE C,.TCPBA(B) 	; Get buffer address
	HRLI C,(POINT 32)
	MOVEM C,T.PTR(TFSB)	; Set octet pointer

	POP P,B
	POP P,C
	POP P,D
	RET

SUBTTL TCP Simulation - GETBUF - Wait for buffer, or error

; Wait for next buffer of data to arrive

GETBU2:	MOVE D,B-D(P)		; Timeout count
;[SCO]	MOVX A,^D1000		; One second
;[SCO] One second is way too long for an ethernet
;[SCO] to really do things right, the sleep time ought to be
;[SCO] based on the window size, the packet size, and the RTT.
	MOVEI A,^D1000/8	;[SCO]
	IMULI D,^D8		;[SCO]
GETBU3:	DISMS			; Wait a second
	MOVE C,.TCPBF(B)	; Get flags of buffer
;[MRC] *** Begin ***
	IFN. D			; Only if a timeout set
	  TXNN C,TCP%ER!TCP%DN	; Error code or done yet?
	    SOJG D,GETBU3	; No, haven't timedout, wait
	  JUMPG D,GETBU1	; If count remains, go look again
	ELSE.
	  TXNN C,TCP%ER!TCP%DN	; Error code or done yet?
	   JRST GETBU3		; No, back to sleep
	  JRST GETBU1		; Go look again
	ENDIF.
;[MRC] End
				; Waited too long, give up

; Error code returned

GETERR:	MOVE D,T.STS(TFSB)	; Current status

	LOAD C,TCP$EC,(B)	; Extract error code
	CAIE C,^D12		; Is it "Connection Closing"?
	 TXOA D,GS%EOF+GS%ERR	; No, so it is a real error
	  TXO D,GS%EOF		; Closing, so only set EOF bit

	MOVEM D,T.STS(TFSB)	; Save status

;[VAF] The following code helps prevent remote sites from going into the
;[VAF] FIN2 state when this system has a problem.

	CAIE C,^D12		;[VAF] Connection closing?
	IFSKP.			;[VAF] Yes - be nice and give him a FIN first
	  SKIPN A,T.JCN(TFSB)	;[VAF] Get back JCN of connection
	  IFSKP.		;[VAF]
	    PRTACS <CLOSE%>	;[VAF] Say it was done
	    CLOSE%		;[VAF] Close connection
	     TRN		;[VAF] Ignore failure
	  ENDIF.		;[VAF]
	ENDIF.			;[VAF]

	TXNN D,GS%ERR		; Had error?
	  JRST GETERX		; No, just closing
				; Yes, abort the connection
	SKIPN A,T.JCN(TFSB)	;[VAF] Get back JCN of connection
	IFSKP.			;[VAF]
	  PRTACS <ABORT%>	;[VAF] Print debug info
	  ABORT%		; And abort it
	  JFCL			; Shouldn't fail...
	ENDIF.			;[VAF]

	SETZM T.JCN(TFSB)	; Closed, no more JCN
GETERX:
	POP P,B
	POP P,C
	POP P,D
	RET

SUBTTL TCP Simulation - TCPBOU - Simulate BOUT for TCP connection

TCPBOU:	TRNN A,777600		; JFN or TCP connection?
	  JRST [BOUT		; JFN
		ERCAL TERJMI
		RET]

	SKIPN T.JCN(A)		; Connection still open?
	  CALL TERJMI		; No.

	CALL TCPINO		; Save state

; Change BOUT to transparent SOUT of 1 byte from TOB

	MOVE TOB,B		; Data
				; Forget pointer will skip into TCPBO
	MOVNI C,1		; One byte

	CALLRET TCPBO1		; User to TCP

SUBTTL TCP Simulation - TCPSOU - Simulate SOUT

; C .LT. 0 case processed directly, others converted to it by scanning


TCPSOU:	TRNN A,777600		; JFN or TCP connection?
	  JRST [SOUT		; JFN
		ERCAL TERJMP
		RET]

	SKIPN T.JCN(A)		; Connection still open?
	  CALL TERJMP	; or I	; No, do nothing

	PRTACS <$SOUT>		;[VAF] Print some info

	TLC B,777777
	TLCN B,777777
	  HRLI B,(POINT 7,0)

	CALL TCPINO		; Save state

	JUMPL C,TCPSO4		; Exact count case all set

; Count characters

	MOVNS C			; Positive (max) count into
	HRLZS C			; AOBJN counter
	SKIPN C 		; C.EQ.0 or C was .GT.0
	 TLOA C,770000		; C.EQ.0, big count and zero D
	  SKIPA			; C was .GT.0, now has count, D set
	   SETZ D,		; C.EQ.0 - search til NUL

TCPSO2:	ILDB A,B		; Get next character
	CAME A,D		; What we're looking for?	
	  AOBJN C,TCPSO2	; No, look further

	SKIPGE C		; Stopped by count or character?
	 SKIPN D		; Character, and searching for NUL?
	  SKIPA			; Count, or NUL
	   ADDI C,1		; Non-NUL character should be sent
	MOVNI C,(C)		; Set C to - number of characters

	MOVE B,B(TAC0)		; Restore original pointer
	SKIPN C			; Anything to output?
	  RET			; No characters, done, go save/restore
TCPSO4:

; Have the exact count

	CALL TCPBO		; User to TCP

	MOVEM B,B(TAC0)		; B to be returned
	MOVEM C,C(TAC0)		; C too

	RET			; All done, go save/restore

SUBTTL TCP Simulation - TCPBO - Pack arbitrary bytes into TCP

;  B/ Byte pointer,  C/ Negative byte count, TFSB

;		TPD			TOB
;	+--------------------------+-----------------+
;	!0000!<---v--->!packed data! xxxxx !<---v--->!
;	+---------!----------------+------------!----+
;	     TPC/ n			 T.BSZ/ n

;	+--------------------------+-----------------+
;	!0000!<---v--->!packed data!<---v--->! xxxxx !
;	+---------!----------------+----!------------+
;	     TPC/ n		 TBC/ (T.BSZ)

;	+--------------------------+-----------------+
;	!0000!<-v->!  packed data  !<-v->! xxxxxxxxx !
;	+-------!------------------+--!--------------+
;	  TPC/ n-a	     TBC/ (T.BSZ)-a  where a=min(n,(T.BSZ))


TCPBO:	ILDB TOB,B		; Get next user data byte
TCPBO1:				; Entry if user data byte is already in TOB
	MOVE TBC,T.BSZ(TFSB)	; User byte size
	MOVN TIB,TBC		; For left-justify
	LSH TOB,^D36(TIB)	; Drop unused bits on left

	JUMPLE TPC,TCPBO4	; Need word to pack
TCPBO2:	CAMLE TPC,TBC		; Able to fill 32-bit word?
	  JRST TCPBO6		; No
	LSHC TPD,(TPC)		; Fill 32-bit word
	SUB TBC,TPC		; Bits left in byte for next word
	MOVE TIB,T.CNT+1(TFSB)	; Octets used in output buffer

	CAML TIB,T.BSZO(TFSB)	; Buffer full?
	  CALL SNDBUF		; Yes, get another

	IDPB TPD,T.PTR+1(TFSB)	; 4 TCP octets into send buffer
	MOVX TIB,4
	ADDM TIB,T.CNT+1(TFSB)	; Into buffer
;	SETZ TPD,
TCPBO4:	MOVEI TPC,^D32		; 4 empty TCP octets
	JUMPN TBC,TCPBO2	; Back if more bits in user byte
	JRST TCPBO8		; Done with this byte, see if another


TCPBO6:	LSHC TPD,(TBC)		; Finish byte
	SUB TPC,TBC		; Room left in 32-bit word
;	SETZ TBC,

TCPBO8:	AOJN C,TCPBO		; Loop if more bytes to process?

	RET

SUBTTL TCP Simulation - SNDBUF - Send a buffer and set up the next one

; Simulation state - TFSB
;	CALL SNDBUF

SNDBUF:	PUSH P,D
	PUSH P,C
	PUSH P,B

	MOVE B,T.CUR+1(TFSB) 	; Pointer to current buffer head
	MOVE C,T.CNT+1(TFSB) 	; Get # of octets in buffer to be sent
	MOVEM C,.TCPBC(B)	; Into buffer header

SNDBU1:	SKIPN A,T.JCN(TFSB) 	; Get JCN
	  JRST SNDERR
	MOVX C,<RXTMOT*2>	; Time out in 2 minutes
	MOVX D,RXPARS 		; Standard rexmit
	PRTBUF <SEND%>		;[VAF] Maybe print debugging info
	SEND%			; Send the buffer
	  JRST [ANDI A,40!37	; Error code
		CAIE A,00+^D4	; Temporary resource shortage?
		  JRST SNDER1	;[VAF] No.  Send error
;[SCO]		MOVX A,^D1000
		MOVX A,^D200	;[SCO]
		DISMS
		JRST SNDBU1]	; Try again

; Move to next buffer, make sure last send completed ok

;[SCO]	MOVX D,<<-TIMOT,,0>>	; Max time to wait for buffer to be sent
	MOVX D,<<-TIMOT*8,,0>>	;[SCO]
	MOVE B,.TCPBF(B)	; Link to next buffer header
	HRRZM B,T.CUR+1(TFSB)	; Make it current
SNDBU2:	MOVE C,.TCPBF(B)	; Get (old) flags of this buffer
	TXNE C,TCP%ER		; Error?
	  JRST SNDERR		; Yes, handle that
	TXNN C,TCP%DN		; Done?
	  JRST SNDBU3		; No, have to wait

; Last send completed ok, setup pointers & zero count before filling it

	HRRZS .TCPBF(B)		; Clear all flags for next time
	MOVE C,.TCPBA(B) 	; Get data buffer address
	HRLI C,(POINT 32)
	MOVEM C,T.PTR+1(TFSB)	; Write pointer
	SETZM T.CNT+1(TFSB)	; Empty buffer

	POP P,B
	POP P,C
	POP P,D
	RET

SUBTTL TCP Simulation - SNDBUF - Wait for data to be sent, or error


; Wait til buffer has been sent (window must be zero)

SNDBU3:
;[SCO]	MOVX A,^D1000
;[SCO] One second is way too long for an ethernet
;[SCO] to really do things right, the sleep time ought to be
;[SCO] based on the window size, the packet size, and the RTT.
	MOVEI A,^D1000/8	;[SCO]
	DISMS
	AOBJN D,SNDBU2


;[VAF] Come here on hard SEND% failure 

SNDER1:	SKIPN DBUG		;[VAF] Doing debugging?
	IFSKP.			;[VAF] Yes - print info about error
	  PUSH P,A		;[VAF]
	  PUSH P,B		;[VAF]
	  PUSH P,C		;[VAF]	  
	  TMSG <SEND failed: >	;[VAF]
	  MOVEI A,.PRIOU	;[VAF]
	  MOVE B,-2(P)		;[VAF]
	  MOVEI C,^D8		;[VAF]
	  NOUT%			;[VAF]
	   TRN			;[VAF]
	  TMSG <
>				;[VAF]
	  POP P,C		;[VAF]
	  POP P,B		;[VAF]
	  POP P,A		;[VAF]
	ENDIF.			;[VAF]

SNDERR:	SKIPN A,T.JCN(TFSB)	;[VAF] Get JCN
	IFSKP.			;[VAF]
	  PRTACS <ABORT%>	;[VAF]
	  ABORT%		; Reset connection
	  JFCL
	ENDIF.			;[VAF]

	SETZM T.JCN(TFSB)	; Connection closed, JCN gone
	MOVX C,GS%ERR		; Remember error
	IORM C,T.STS(TFSB)

	POP P,B
	POP P,C
	POP P,D
	RET

SUBTTL TCP Simulation - TCPRBS, TCPSBS - Simulate RFBSZ and SFBSZ

TCPRBS:	TRNN A,777600		; JFN or TCP connection?
	  JRST [RFBSZ		; JFN
		 SKIPA		; Error return
		  AOS (P)	; Skip return
		RET]
	PUSH P,B
	SKIPN T.JCN(A)		; Open?
	  JRST $DESX3
	MOVE B,T.STS(A)
	TXNN B,GS%OPN
	  JRST $DESX5

	MOVE B,T.BSZ(A)		; Current size
	MOVEM B,(P)		; To be returned
	JRST TCPXBX		; Leave

TCPSBS:	TRNN A,777600		; JFN or TCP connection?
	  JRST [SFBSZ		; JFN
		 SKIPA		; Error return
		  AOS (P)	; Skip return
		RET]
	PUSH P,B
	SKIPN T.JCN(A)		; Open?
	  JRST $DESX3
	MOVE B,T.STS(A)
	TXNN B,GS%OPN
	  JRST $DESX5

	TXC B,GS%RDF!GS%WRF
	TXCN B,GS%RDF!GS%WRF
	  JRST $SFBX1		; Should be one or other

	SKIPN B,(P)		; Desired size
	  MOVX B,^D36		; Zero is a word
	CAIL B,1		; Better be 1-36
	 CAILE B,^D36
	  JRST $SFBX2		; Or error
	MOVEM B,T.BSZ(A)	; Set new size

TCPXBX:	AOS -1(P)		; Skip return
	POP P,B
	RET

$SFBX1:	SKIPA A,[SFBSX1]
$SFBX2:	  MOVX A,SFBSX2
	JRST TCPXBZ

$DESX3:	SKIPA A,[DESX3]
$DESX5:	  MOVX A,DESX5
TCPXBZ:	POP P,B
	RET			; Error return

SUBTTL TCP Simulation - TCPGST - Simulate GTSTS for a TCP connection

TCPGST:	TRNN A,777600		; JFN or TCP connection?
	  JRST [GTSTS		; JFN
		ERCAL TERJMP
		RET]

TCXGST:	PUSH P,C		; Save register
	PUSH P,A		; Save JFN

	SKIPE T.JCN(A)		; Check JCN
	 CALL GETSYN		; Get current connection status
	  JRST TCPGSW		; Error, not open	

	CAIN B,SYNCED		; Receive side synced and
	 CAIE C,SYNCED		; Send side synced?
	  CAIA			; No
	   JRST TCPGSU		; Yes, open, & assigned

	CAIN B,NOTSYN		; Both closed?
	 CAIE C,NOTSYN
	  CAIA			; No, partially open
	   JRST TCPGSW		; Yes, fully closed

	CAIL B,SYNABL		; Receive closing or
	 CAIGE C,SYNABL		; Send side closing?
	  JRST TCPGSV		; Yes, not "being assigned"

	DMOVE B,[EXP GS%ASG,GS%OPN+GS%EOF+GS%ERR]; "Being assigned" (listening)
	SKIPA
TCPGSU:	  DMOVE B,[EXP GS%OPN,GS%ASG+GS%EOF+GS%ERR]; Conn open, all ok
	SKIPA
TCPGSV:	  DMOVE B,[EXP 0,GS%ASG]; Not "being assigned" (listening)
	SKIPA
TCPGSW:	  DMOVE B,[EXP 0,GS%OPN+GS%ASG]; Conn. not open & not being assigned

	HRRZ A,(P)		; JFN
	ANDCAM C,T.STS(A)	; Clear bits
	IORB B,T.STS(A)		; Set bits

	POP P,A			; Restore JFN
	POP P,C
	RET

SUBTTL TCP Simulation - TCPMTP - Simulate MTOPR for a TCP connection

TCPMTP:	TRNN A,777600		; JFN or TCP connection?
	  JRST [MTOPR		; JFN
		ERCAL TERJMI
		RET]
	SKIPE T.JCN(A)		; Connection ok?
	 CAIE B,.MOSND		; Only MTOPR 21 is simulated
	  RET			; Ignore others
	CALL TCPINO		; Get output state

TCPSNL:	MOVE C,T.CNT+1(TFSB)	; See if buffer is full
	CAME C,T.BSZO(TFSB)
	  JRST TCPSN2		; No, so any partial octet will fit in it

	CAIE TPC,0		; Have any data bits beyond full buffer
	 CAIL TPC,^D32		; Empty count
	  JRST TCPSN4		; No, just send (full) buffer

	CALL SNDBUF		; First send full buffer
TCPSN2:
	CAIE TPC,0		; Any remaining bits?
	 CAIL TPC,^D32		; Empty count
	  JRST TCPSN4		; No, all set

	LSH TPD,(TPC)		; Pack data left
	IDPB TPD,T.PTR+1(TFSB)	; Into TCP buffer

	MOVNS TPC
	ADDI TPC,^D32+7		; Bits used + 7
	LSH TPC,-3		; Octets used
	ADDM TPC,T.CNT+1(TFSB)	; In TCP remaining bits
TCPSN4:	SETZB TPC,TPD		; No bits left
	MOVE B,T.CUR+1(TFSB) 	; Get pointer to current buffer
	MOVX C,TCP%PU
	IORM C,.TCPBF(B)	; Mark the buffer as PUSH
	CALLRET SNDBUF		; Send it

SUBTTL TCP Simulation - TCPCLO/CLOSET - Simulate CLOSF

; A/	(CO%WCL!)nameCON

TCPCLO:	TRNN A,777600		; JFN or TCP connection?
	  JRST [CLOSF		; JFN
		 SKIPA
		  AOS (P)	; Skip return
		RET]

	PRTJCN <$CLOSF>		;[VAF] Print info about the close, if debugging

	SKIPN T.JCN(A)		; Be sure it's still open
	  RET			; Already closed or aborted

	CALL TCPINO		; Get output state

	MOVX TOB,1		; Assume no errors, skip return

	MOVEI A,(TFSB)		; Connection
	CALL GETSYN		; Get current connection status
	  JRST TCAB		; Error? ABORT it
	SKIPN STATMP+3 ;TERR	; Has connection had an error?
	 SKIPN STATMP+2;TSOPN	; Was connection ever open?
	  JRST TCAB		; Yes or no, try to ABORT it

	SKIPLE B,T.SVC+1(TFSB)	; If have one to
	 CAIN B,^D32		; 31 packed bits, or
	  SKIPE T.CNT+1(TFSB)	; Some data
	   SKIPA		; Send it, otherwise
	    JRST TCPCLS		; Just close

	MOVE B,T.STS(TFSB) 	; Get status
	TXNE B,GS%WRF	 	; Sending?
	  CALL TCPSNL		; Send final buffer if any
TCPCLS:				; TPC and TPD should be zero here
	MOVE A,T.JCN(TFSB)
;	MOVE B,A(TAC0)		; Flags in left half
;	TXNE B,CO%WCL		; Wait?
;	 TXO A,TCP%WT		; Yes
	PRTACS <CLOSE%>		;[VAF]
	CLOSE%			; Tell other end to close it up
	  SETZ TOB,		; Error return
	MOVE B,A(TAC0)		;[VAF] Retrieve flags from old AC1
	TXNE B,CZ%ABT		;[VAF] Abort flag?
	 JRST TCAB		;[VAF] Yes - go directly do abort

	MOVX D,<RXTMOT*2>	; RX timeout here
TCLOOO:	MOVX A,^D1000		; A second
	DISMS
	MOVEI A,(TFSB)		; Connection
	CALL GETSYN		; Get synchronization state
	  JRST TCAB		; Error? ABORT it
	SKIPE STATMP+3 ;TERR	; Connection error?
	  JRST TCAB		; Yes, try to abort it
	CAIE C,NOTSYN		; Send-FIN been ACKed?
	  SOJG D,TCLOOO		; Wait a bit longer, or give up
	CAIN B,NOTSYN		; Received FIN yet?
	  JRST TCAB		; Yes, go ABORT to release JCN
				; No, try reading "trash" in connection
	MOVX D,<RXTMOT>		; RX timeout for GETBUF here
	MOVX B,<-^D8,,0>	; Allow 8 buffers
TCLOOP:	CALL GETBUF		; Start input
	SKIPN T.JCN(TFSB)	; Is it closed yet?
	  JRST TCXT		; Yes, done
	MOVX C,GS%EOF+GS%ERR
	TDNN C,T.STS(TFSB)	; Had EOF (or error)?
	  AOBJN B,TCLOOP	; No, try next buffer

TCAB:	PRTACS <ABORT%>		;[VAF]
	SKIPE A,T.JCN(TFSB)	; Have anything to ABORT?
	 ABORT%			; Yes, flush the connection
	  SETZ TOB,		; Error return
TCXT:	SETZB TPC,TPD		; Nothing remaining

	MOVX B,GS%OPN
	ANDCAM B,T.STS(TFSB)	; No longer open
	SETZM T.JCN(TFSB)	; No JCN either

	ADDM TOB,-2(TAC0)	; Possible skip return
	RET			; Go save/restore state

SUBTTL TCP Simulation - TCPJFS - Simulate JFNS

TCPJFS:	TRNN A,777600		; JFN or TCP connection?
	  JRST [JFNS		; JFN
		  ERCAL TERJMI
		RET]
	PUSH P,A
	HRROI A,JFNTXS
	JFNS
	  ERJMP TERJMA
	POP P,A
	PUSH P,B
	PUSH P,C
	HRROI B,JFNTXS
	SETZ C,
	$SOUT
	POP P,C
	POP P,B
	RET

; Simulate error return to ERJMP/ERCAL

TERJMA:	MOVE A,(P)		; Restore A & leave garbage
TERJMP:	SETZM (P)		; Return if neither
TERJMI:	PUSH P,A		; Get a reg, ITRAP if neither
	HLRZ A,@-2(P)		; Get instruction at return address
	CAIN A,(ERJMP)
	  JRST TEJMP
	CAIN A,(ERCAL)
	  JRST TECAL
	SKIPE -1(P)		; Neither, what to do
	  0			; Make illegal instruction
	JRST TEXIT		; Continue


TECAL:	MOVE A,@-2(P)		; ERCAL instruction
	HLL A,-2(P)		; Fake return to get there (user flags)
	AOS -2(P)		; Return from ERCAL
	PUSH P,(P)		; Move saved A down
	MOVEM A,-2(P)		; Fake return to get there
	JRST TEXIT

TEJMP:	MOVE A,@-2(P)		; ERJMP instruction
TERET:	HRRM A,-2(P)		; Fake return to ERJMP
TEXIT:	POP P,A			; Restore A
	POP P,(P)		; Drop flag
	RET


SETERR:	MOVX A,<.FHSLF>
	SETER			; Set system error message for ERSTR
	ERJMP .+1		; TENEX does skip return, TOPS20 doesn't
	RET

SUBTTL TCP Simulation - TCPINI, TCPINO - Enter/Exit Simulation Context

;	Return from simulated instruction
; P---)	Return from CALL TCPINx
; Becomes
;	Return from simulated instruction
;	Return from CALL TCPINx
;	I(0)/O(1) flag
;	Saved A-TAC0
; P---)	Return to restore code


TCPINI:	PUSH P,[0]		; Input entry
	SKIPA
TCPINO:	  PUSH P,[1]		; Output entry

TNR==TAC0-A+1			; Number of registers saved

	ADD P,[TNR,,TNR]	; Reserve room on stack
	MOVEM TAC0,(P)		; Save last
	HRLI TAC0,TAC0-TNR+1	; First register
	HRRI TAC0,1-TNR(P)	; Address for first
	BLT TAC0,-1(P)		; Save registers

	MOVEI TAC0,-TAC0(P)	; (Pseudo) saved AC0

	HRRZI TFSB,(A)		; Address of T.JFN
	ADD TFSB,-TNR(P)	; Bump by one if Output
	MOVE TPC,T.SVC(TFSB)	; Restore last state
	MOVE TPD,T.SVD(TFSB)
	SUB TFSB,-TNR(P)	; Point to T.JFN

	CALL @-1-TNR(P)		; Continue

	ADD TFSB,-TNR(P)	; Bump by one if Output
	MOVEM TPC,T.SVC(TFSB)	; And bits left in it
	MOVEM TPD,T.SVD(TFSB)	; Save partial 32-bit word
;	SUB TFSB,-TNR(P)	; Point to T.JFN

	HRLI TAC0,1-TNR(P)	; Restore registers
	HRRI TAC0,1+TAC0-TNR
	BLT TAC0,TAC0

	SUB P,[TNR+1+1,,TNR+1+1] ; Remove registers & flag & entry PC
	RET			; Back to user after simulation

	SUBTTL	Subroutine CONSYN

;	MOVEI A,nameCON
;	CALL CONSYN
;Ret+1:	  Error (connection aborted)
;Ret+2:	  Connection not synchronized
;Ret+3:	Connection synchronized

CONSYN:	CALL GETSYN		; Get connection status info
	  RET			; Leave if aborted
	SKIPE STATMP+3 ;TERR
	  RET			; Leave if has an error
	CAIL B,SYNABL		; Going or gone?
	 CAIGE C,SYNABL
	  RET			; Yes, give up
	AOS (P)			; At least a single skip
	CAIN B,SYNCED		; Recv synced? and
	 CAIE C,SYNCED		; Send synced?
	  RET			; Not yet synced
	AOS (P)			; Double skip
	RET			; Synced

	SUBTTL GETSYN - Get connection synchronization state

;	MOVEI A,nameCON  or  MOVEI A,(TFSB)
;	CALL GETSYN
;Ret+1:	  Error (connection aborted)
;Ret+2:	Ok, B/ Receive state, C/ Send state, STATMP+2/ Was-open, STATMP+3/ err

GETSYN:	SKIPN A,T.JCN(A)	; TCP connection id
	  RET			; Leave if aborted
	TXO A,TCP%SY		; Giving names
	MOVX B,<-4,,[ASCII /TRSYN/
		     ASCII /TSSYN/
		     ASCII /TSOPN/
		     ASCII /TERR/]>
	MOVX C,<-4,,STATMP>	; Temp area
	STAT%
	  RET			; Error - connection gone?
	MOVE B,STATMP		; Receive synchronization state
	MOVE C,STATMP+1		; Send synchronization state
	AOS (P)			; Skip return
	RET

	END
