

; LISTEN.MID.144 & LISTEN.MID.138 11-Jul-89 2030	PAGE 1



LINE 1, PAGE 1
1)	;[SRI-NIC]SRC:<LOC.SYSTEM>LISTEN.MID.139,  6-Jul-89 18:53:40, Edit by MKL
1)	; add DEBUG code so we can find bugs (set DEBUGP)
1)	;[SRI-NIC]SRC:<LOC.SYSTEM>LISTEN.MID.138, 24-Feb-89 11:56:52, Edit by MKL
LINE 1, PAGE 1
2)	;[SRI-NIC]SRC:<LOC.SYSTEM>LISTEN.MID.138, 24-Feb-89 11:56:52, Edit by MKL


LINE 4, PAGE 2
1)					
1)	DEBUGP:	0			;for debugging output 
1)	
LINE 4, PAGE 2
2)	


LINE 2, PAGE 3
1)	;debugging stuff
1)	define debuga *foo
1)		skipe debugp
1)		 call [push p,1
1)		       hrroi 1,[asciz /foo/]
1)		       psout%
1)		       pop p,1
1)		       ret]
1)	termin
1)	
1)	define debugo foo
1)		skipe debugp
1)		 call [push p,2
1)		       move 2,foo
1)		       call dbg.o
1)		       pop p,2
1)		       ret]
1)	termin
1)	
1)	dbg.o:	push p,1
1)		push p,3
1)		movei 1,.priou
1)		movei 3,10
1)		nout%
1)		 jfcl
1)		pop p,3
1)		pop p,1
1)		ret
1)	^L
1)	Begin:	RESET%
LINE 2, PAGE 3
2)	Begin:	RESET%

; LISTEN.MID.144 & LISTEN.MID.138 11-Jul-89 2030	PAGE 2




LINE 14, PAGE 4
1)		debuga "initialized
1)	"
1)	Loop:	Call FSlot		;Find a free slot, skip return with index in F
LINE 14, PAGE 3
2)	Loop:	Call FSlot		;Find a free slot, skip return with index in F


LINE 27, PAGE 4
1)	FSlot:	debuga "get slot: "
1)		Movs F,FrkUse		;Find a free table slot.  count,,flag array
1)		Movns F
1)	FSlot0:	Skipn ForkPH(F)		;This slot in use?
1)		  Jrst [Tlz F,-1	;  No.  Trash LH, leave only index in RH.
1)			debugo f
1)			debuga "
1)	"
1)			Jrst Popj1]	;  Skip return says we won
1)		Aobjn F,FSlot0		;Yes, loop over all slots.
1)		debuga "none
1)	"
1)		Return			;No free slots, return +1.
LINE 25, PAGE 3
2)	FSlot:	Movs F,FrkUse		;Find a free table slot.  count,,flag array
2)		Movns F
2)	FSlot0:	Skipn ForkPH(F)		;This slot in use?
2)		  Jrst [Tlz F,-1	;  No.  Trash LH, leave only index in RH.
2)			Jrst Popj1]	;  Skip return says we won
2)		Aobjn F,FSlot0		;Yes, loop over all slots.
2)		Return			;No free slots, return +1.


LINE 49, PAGE 4
1)	Lounge:	debuga "lounge
1)	"
1)	LWAIT:	WAIT%			;Wait for an interrupt.
1)		debuga "unlounge
1)	"
1)		Jrst Loop		;Go find the free slot.
LINE 41, PAGE 3
2)	Lounge:	WAIT%			;Wait for an interrupt.
2)		Jrst Loop		;Go find the free slot.


; LISTEN.MID.144 & LISTEN.MID.138 11-Jul-89 2030	PAGE 3



LINE 63, PAGE 4
1)	GetCon:	debuga "getcon
1)	"
1)		Movx 1,GJ%SHT\GJ%OLD
1)		Hrroi 2,TCPfil
LINE 51, PAGE 3
2)	GetCon:	Movx 1,GJ%SHT\GJ%OLD
2)		Hrroi 2,TCPfil


LINE 193, PAGE 4
1)		debuga "*fork "
1)		debugo f
1)		debuga " started
1)	"
1)		Return
1)	^L
1)	KidDie:	debuga "kiddie interrupt
1)	"
1)		SaveAC
1)		Call Check		;Check ALL kids.
LINE 179, PAGE 3
2)		Return
2)	^L
2)	KidDie:	SaveAC
2)		Call Check		;Check ALL kids.


LINE 9, PAGE 5
1)	Tick:	debuga "tick
1)	"
1)		SaveAC
1)		Call Check		;Check the status of our inferiors.
LINE 7, PAGE 4
2)	Tick:	SaveAC
2)		Call Check		;Check the status of our inferiors.


LINE 17, PAGE 5
1)		Cain 2,LWAIT+1		;Were we waiting for a slot to free?
1)		  Jrst [Movei 2,Loop	;  Yes, so break out of WAIT%
LINE 13, PAGE 4
2)		Cain 2,Lounge+1		;Were we waiting for a slot to free?
2)		  Jrst [Movei 2,Loop	;  Yes, so break out of WAIT%


; LISTEN.MID.144 & LISTEN.MID.138 11-Jul-89 2030	PAGE 4



LINE 26, PAGE 5
1)	SetPer:	debuga "set tick
1)	"
1)		GTAD%			;Get date&time into AC1
1)		Move 2,1		;TIMER% wants time to hit in AC2
LINE 22, PAGE 4
2)	SetPer:	GTAD%			;Get date&time into AC1
2)		Move 2,1		;TIMER% wants time to hit in AC2


LINE 38, PAGE 5
1)	RemPer:	debuga "remove tick
1)	"
1)		Move 1,[.FHSLF,,.TIMDD]
1)		Move 2,PerTim			;Remove the timer set at this time.
LINE 32, PAGE 4
2)	RemPer:	Move 1,[.FHSLF,,.TIMDD]
2)		Move 2,PerTim			;Remove the timer set at this time.


LINE 47, PAGE 5
1)	Snooze: debuga "snoozing
1)	"
1)		Movx 1,<NapTim*1000.>	;Take this much time to
1)		DISMS%			;settle down after an error.
1)		Return			;then climb back on and try again.
1)	
1)	Check:	debuga "check: "
1)		Movs F,FrkUse
1)		Movns F
1)	Check0:	Skipn 1,ForkPH(F)		;This slot in use?
1)		  Jrst NxtFrk			;  Nope, go to the next
1)	
1)		hrrz 3,f
1)		debugo 3
1)	
1)	;	FFORK%				;Freeze so we can read it's status
LINE 39, PAGE 4
2)	Snooze:	Movx 1,<NapTim*1000.>	;Take this much time to
2)		DISMS%			;settle down after an error.
2)		Return			;then climb back on and try again.
2)	
2)	Check:	Movs F,FrkUse
2)		Movns F
2)	Check0:	Skipn 1,ForkPH(F)		;This slot in use?
2)		  Jrst NxtFrk			;  Nope, go to the next
2)	;	FFORK%				;Freeze so we can read it's status


; LISTEN.MID.144 & LISTEN.MID.138 11-Jul-89 2030	PAGE 5



LINE 101, PAGE 5
1)		debuga "ok
1)	"
1)		Jrst NxtFrk
1)	
1)	NukeIt:	debuga "nukeit
1)	"
1)		Call AbortF		;Abort all activity associated with Fork (F)
1)		Sosg nForks		;And decrement the active-fork count
LINE 86, PAGE 4
2)		Jrst NxtFrk
2)	
2)	NukeIt:	Call AbortF		;Abort all activity associated with Fork (F)
2)		Sosg nForks		;And decrement the active-fork count


LINE 227, PAGE 5
1)		Hrroi 2,[Asciz "#;PERSIST:60;TIMEOUT:60"]
1)		Setz 3,
LINE 208, PAGE 4
2)		Hrroi 2,[Asciz "#;PERSIST:30;TIMEOUT:60"]
2)		Setz 3,
