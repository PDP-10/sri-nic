;-*-Midas-*-

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;	Stuff to pass HALTF-requests to the EXEC via PRARG, and
;;	some error messages and the like
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

FrkCCL==:0	;Re-do last CCL command function
FrkKep==:1	;Keep fork
FrkKil==:2	;Kill fork
FrkBak==:3	;Continue/Background

barfcr:	call barf
	hrroi 1,[asciz /
/]
	psout%
	return

BARF:	movei 2,-1
BARF2:	Hrli 2,.FHSLF
	Movei 1,.PRIOU
	Setz 3,
	ERSTR
	 jrst [hrroi 1,[asciz/Unknown error/] ? PSOUT ? popj p,]
	 jrst [hrroi 1,[asciz/Error printing error message/] ? PSOUT ? popj p,]
	Popj p,

$LOSE:	movei 1,.fhslf
	GETER
	jrst $lose0

$LOSE2:	hrroi 1,[asciz//]
	ESOUT
$LOSE0:	Pushj p,Barf2
	hrroi 1,[asciz/ (PC=/]
	PSOUT
	Movei 1,.PRIOU
	Hrrz 2,(P)
	Subi 2,2
	Movei 3,8.
	NOUT
	  Nop
	movei 1,")
	PBOUT

$KEEP:	skipa 2,[[FrkKep,,0]]
$LOGOU:	  movei 2,[FrkKil,,0]
	Move 1,[.PRAST,,.FHSLF]
	Movei 3,1
	PRARG
	Pushj p,Terpri
	HALTF
	Popj p,

$CONT:	Move 1,[.PRAST,,.FHSLF]
	Movei 2,[FrkBak,,0]
	Movei 3,1
	PRARG
	HALTF
	Popj p,

Terpri:	push p,2
ifdef rtmod,{
	push p,3
	Movei 1,.PRIOU
	Movei 2,.VTADV
	VTSOP
	 ercal [
};ifdef rtmod
		Movei 1,.cttrm
		RFPOS
		Hrroi 1,[Asciz /
/]	?	Trne 2,-1
		  PSOUT
ifdef rtmod,{
		Popj P,
		]
	pop p,3
};ifdef rtmod
	pop p,2
	Popj p,

.KEEP=<PUSHJ P,$KEEP>
.CONTINUE=<PUSHJ P,$CONT>
.LOSE=<ERCAL $LOSE>

Define .LOGOUT dummy,		;Dummy arg so ITS .LOGOUT 1, will work
	JRST $LOGOUT
Termin
