DEFINE !={COMMENT};
DEFINE FAST!INPUT!HACK = {FALSE};
! do not change the above line, it causes everything that

  follows to be copied into the header file;



! Figure out where we are;

IFCR DECLARATION(GTJFN) THENC DEFINE HOST!SYSTEM={SCORE}

ELSEC DEFINE HOST!SYSTEM={SAIL} ENDC;



DEFINE	SAIL	=	{1};

DEFINE	SUMEX	=	{2}; ! Doesn't run there any more;

DEFINE	SCORE	=	{3};



! System dependent definitions (all this text goes in header file);



IFC HOST!SYSTEM=SAIL THENC 

	DEFINE  UserPPN =       {CVXSTR(CALL(0,"GETPPN"))};

	DEFINE  DiskPPN =       {CVXSTR(CALL(0,"DSKPPN"))};

	DEFINE CloseFile        =       {RELEASE};

	DEFINE	db!HDR	=	{"NDB.HDR[NDB,DPB]"};

	DEFINE  db!REL      =       {"NDB.REL[NDB,DPB]"};

	DEFINE  db!FWD      =       {"NDB.FWD[NDB,DPB]"};

	DEFINE  schema!DIR	    =	{"[INF,CSD]"}

! Used by logicalname procedure;

ELSEC IFC HOST!SYSTEM=SUMEX THENC 

require "doesn't run at SUMEX any more.  Talk to KDO" message;

	DEFINE	UserPPN		=	{"??? at SUMEX"};

	DEFINE	DiskPPN		=	{"??? at SUMEX"};

	DEFINE	LODED		=	{PRINT};

	DEFINE	CloseFile	=	{cfile};

	DEFINE	db!HDR	=	{"<DBROWN>db.HDR"};

	DEFINE  db!REL      =       {"<DBROWN>db.REL"};

        DEFINE  db!FWD      =       {"<DBROWN>db.fwd"};

ELSEC IFC HOST!SYSTEM=SCORE THENC 

	DEFINE	UserPPN		=	{ScoreUser};

	DEFINE	DiskPPN		=	{ScoreDisk};

	DEFINE	LODED		=	{require

"don't use LODED at SCORE" message;	PRINT};

	DEFINE	INCHWL		=	{INTTY};

	DEFINE	CloseFile	=	{cfile};

	DEFINE	db!HDR	=	{"DB:NDB.HDR"};

	DEFINE  db!REL      =       {"DB:NDB.REL"};

	DEFINE  db!FWD      =       {"DB:NDB.FWD"};

ELSEC REQUIRE{"Bad Host System - Proceed at your own risk"} MESSAGE;

ENDC ENDC ENDC;



DEFINE DONT = {IFC FALSE THENC};
DEFINE ENDDONT = {ENDC};
DEFINE newline = {('15&'12)},
	tab	= {('11&NULL)},
	cr	= {('15&null)},
	ff	= {('14&NULL)},
	space	= {('40&NULL)};
DEFINE WhiteSpace	=	{('0&'11&'12&'13&'14&'15&'40&'175&'176)};
DEFINE IsDigit(s)	=	{('60 <= s <= '71)};
DEFINE THRU	= {STEP 1 UNTIL},
	UPTO	= {_ 1 STEP 1 UNTIL},
	PROC	= {PROCEDURE};
DEFINE LinearSearch(i,where,what,first,last,howcompare) = {BEGIN "LinearSearch"
require "Do you really want to use LINEARSEARCH macros?" message;
	where[last+1] _ what;
	FOR i _ first STEP 1 WHILE NOT howcompare(what,where[i]) DO  ;
	END "LinearSearch"};
DEFINE LinearSearch2(i,where,what,which,first,last,howcompare)	= {BEGIN "LinearSearch2"
require "Do you really want to use LINEARSEARCH macros?" message;
	where[which,last+1] _ what;
	FOR i _ first STEP 1 WHILE NOT howcompare(what,where[which,i]) DO  ;
	END "LinearSearch2"};
DEFINE  CloseAll        =       {begin "closeall"
	integer chan;
	FOR chan _ 0 STEP 1 UNTIL 15 DO closefile(chan);
	end "closeall"};
DEFINE StrCompare	=	{ORDER};
DEFINE IsWhiteSpace(s)	=	{(COLL[s] < '100)};
EXTERNAL INTEGER scandummy;
DEFINE Flush(s)	=	{BEGIN
				integer i;
				i _ 1;
				while i<=length(s) and iswhitespace(s[i for 1]) do i _ i+1;
				s _ s[i for INF];
				END;
! SCAN(s,SkipWhite,scandummy);	};
DEFINE BackFlush(s)	=	{WHILE (LENGTH(s)) AND
					 (IsWhiteSpace(s[ FOR 1])) DO BEGIN "BackFlush"
					s _ s[1 TO -1];
	END "BackFlush"};
DEFINE Strip(s)	=	{BEGIN "Strip"
	Flush(s);
	BackFlush(s)
END "Strip"};
DEFINE !Headwrite = {require "Use Headwrite instead of !Headwrite" message;
	headwrite};
DEFINE get2(arr,main,second) = {(If second = 0 then arr[main]
	   else if second < 0 then arr[-second,main] else arr[main,second])};
DEFINE put2(arr,main,second,value) = {If second = 0 then arr[main]_value
			else if second < 0 then arr[-second,main] _ value
		 	else arr[main,second] _ value};
DEFINE maxtags    =	{65};
DEFINE maxHeader    =	{100};
DEFINE hashsize = {235};
DEFINE VStartChar  =	{("")};
DEFINE VFinChar    =	{("")};
DEFINE ListChar    =	{("")};
DEFINE notchar	=	{("~")};
DEFINE nullchar =	{("")};
DEFINE escchar	=	{("")};
DEFINE maxfilenumber = 13;
DEFINE filearr1(name) = {ARRAY name[1:maxfilenumber]};
DEFINE filearr2(name,second) =
	{ARRAY name[1:maxfilenumber,1:second]};
DEFINE filearr3(name,sec1,sec2) =
	{ARRAY name[1:maxfilenumber,sec1:sec2]};
EXTERNAL INTEGER filearr1(channel);
EXTERNAL INTEGER filearr1(#pages);
EXTERNAL INTEGER filearr1(#tags);
EXTERNAL INTEGER filearr1(#invisible);
EXTERNAL STRING filearr1(datetag);
EXTERNAL STRING filearr1(hotdates);
EXTERNAL INTEGER filearr1(startdate);
EXTERNAL INTEGER filearr1(enddate);
EXTERNAL INTEGER filearr1(eop);
EXTERNAL STRING filearr1(nametag);
EXTERNAL STRING filearr2(filetags,maxtags);
EXTERNAL INTEGER filearr1(headlines);
EXTERNAL STRING filearr2(headpages,maxheader);
EXTERNAL INTEGER filearr1(#recs);
EXTERNAL STRING filearr2(filevalues,maxtags);
EXTERNAL STRING filearr3(hashtable,0,hashsize-1);
EXTERNAL INTEGER filearr3(hasharray,0,hashsize-1);
EXTERNAL INTEGER filearr2(arrayhash,maxtags);
EXTERNAL STRING filearr2(mask,maxtags);
EXTERNAL INTEGER ARRAY eof[0:17];
EXTERNAL INTEGER ARRAY brk[0:17];
EXTERNAL INTEGER ARRAY prevoutname[0:17];
EXTERNAL INTEGER ARRAY formatting[0:17];
DEFINE nopages = {0},sortedpages = {1},copiedpages = {2};
DEFINE OutFileWidth	=	{64};
DEFINE maximumMonth	=	{1200};
EXTERNAL STRING  UpdateInfo;
EXTERNAL STRING Errmess;
EXTERNAL STRING Errcode;
EXTERNAL SIMPLE STRING PROCEDURE FileOnly(STRING filename);
EXTERNAL SIMPLE BOOLEAN PROCEDURE ReadYesNo(STRING prompt);
EXTERNAL SIMPLE INTEGER PROCEDURE Shift(INTEGER c);
EXTERNAL SIMPLE STRING PROCEDURE Dollars(INTEGER amt, size);
EXTERNAL INTEGER topage;
EXTERNAL INTEGER tocrlf;
EXTERNAL INTEGER tosp;
EXTERNAL INTEGER tospbig;
EXTERNAL INTEGER tocomma;
EXTERNAL INTEGER SkipWhite;
EXTERNAL INTEGER capTable;
EXTERNAL INTEGER SAFE ARRAY COLL[0:127];
EXTERNAL SIMPLE INTEGER PROCEDURE CountLines(String str);
EXTERNAL SIMPLE STRING PROCEDURE GrabWord(REFERENCE STRING ValLine);
EXTERNAL SIMPLE BOOLEAN PROCEDURE SAME(STRING A,B; INTEGER M(1));
DEFINE Equal(a,b) = {Same(a,b,LENGTH(b))};
DEFINE !less = {(-1)},
	!equal = {(0)},
	!greater = {(1)};
DEFINE ignore(fun) = {begin integer foo; foo _ fun end};
EXTERNAL SIMPLE INTEGER PROCEDURE ORDER(STRING a,b);
EXTERNAL SIMPLE STRING PROCEDURE Capitalize(STRING str);
EXTERNAL SIMPLE STRING PROCEDURE Commonname(STRING name);
EXTERNAL SIMPLE STRING PROCEDURE Lastname(STRING name);
EXTERNAL SIMPLE STRING PROCEDURE Firstname(STRING name);
EXTERNAL SIMPLE STRING PROCEDURE DefaultRead(STRING prompt,default(null));
DEFINE PromptReRead(prompt,variable) = {variable _ defaultread(prompt,variable)};
EXTERNAL SIMPLE STRING PROCEDURE ScoreUser;
EXTERNAL SIMPLE STRING PROCEDURE ScoreDisk;
DEFINE ChkErr(code,text,returncode) = {
    If REPTERR then DBUserErr(text) else begin
	If ALLERRORS then Print("Returning error c"&"ode "&code
	 &" for error"&newline&"'"&text&"'"&newline);
	errmess _ text; errcode _ code;
    end;
    If not REPTERR then returncode; ! Don't do it inside block;};
EXTERNAL BOOLEAN AllErrors;
EXTERNAL BOOLEAN ReportErrors;
EXTERNAL STRING ErrFileName;
EXTERNAL INTEGER ErrChan;
EXTERNAL INTEGER numberOfReadErrors;
EXTERNAL BOOLEAN EmptyErrFile;
EXTERNAL BOOLEAN BatchMode;
EXTERNAL INTEGER ErrCount;
EXTERNAL SIMPLE PROCEDURE InitUsererr(STRING filename,errext(".err"));
EXTERNAL SIMPLE PROCEDURE DBUserErr(STRING mess;STRING resp(null));
EXTERNAL SIMPLE PROCEDURE ErrorQuit(STRING mess);
EXTERNAL SIMPLE	  PROCEDURE SetBatchMode;
DEFINE !jibat={9};
DEFINE jbtlinslot = {'236};
DEFINE JOBNAMSLOT ={'225};
EXTERNAL STRING SAFE ARRAY MONTH[1:12];
EXTERNAL SIMPLE	STRING	PROCEDURE CURDATE;
EXTERNAL SIMPLE STRING  PROCEDURE DATE(INTEGER D);
EXTERNAL SIMPLE STRING  PROCEDURE BABYLON(integer time);
DEFINE Date!	=	{DATE(CALL(0,"DATE"))};
DEFINE Time!	=	{BABYLON(CALL(0,"TIMER") DIV 3600)};
EXTERNAL SIMPLE STRING	PROCEDURE DeMonth(INTEGER month#);
EXTERNAL SIMPLE INTEGER PROCEDURE MonthNumber(STRING date;BOOLEAN repterr(true));
EXTERNAL SIMPLE	PROCEDURE AskMonth(STRING p; REFERENCE STRING m;
				REFERENCE INTEGER m#);
EXTERNAL SIMPLE BOOLEAN PROCEDURE MonthInterval(STRING dates; REFERENCE INTEGER m1,m2;BOOLEAN repterr(true));
EXTERNAL SIMPLE PROCEDURE AskInterval(STRING prompt; REFERENCE INTEGER D1,D2);
EXTERNAL SIMPLE BOOLEAN PROCEDURE Overlap(STRING date1, date2);
EXTERNAL SIMPLE BOOLEAN PROCEDURE Aoverlap(STRING date;INTEGER startd,endd);
EXTERNAL SIMPLE BOOLEAN PROCEDURE HitOnMonth(INTEGER thismonth; STRING dates);
DEFINE inputl(chan)={IFC HOST!SYSTEM=SCORE AND FAST!INPUT!HACK
	    THENC  inputhack(chan)
	    ELSEC  input(chan,tocrlf) ENDC};
DEFINE buflen = {20};
EXTERNAL INTEGER ARRAY CHANLINKS[0:17];
EXTERNAL STRING PROCEDURE getfline(reference integer chan);
EXTERNAL STRING	BLANKS;
EXTERNAL SIMPLE STRING PROCEDURE LEFT(INTEGER L; STRING S);
EXTERNAL SIMPLE STRING PROCEDURE RIGHT(INTEGER L; STRING S);
EXTERNAL SIMPLE STRING PROCEDURE CENTER(INTEGER L; STRING S);
EXTERNAL SIMPLE STRING PROCEDURE PadString(INTEGER L; STRING S);
EXTERNAL STRING PROCEDURE GetValue(integer fileno;string tag;boolean repterr(true));
EXTERNAL STRING PROCEDURE !GetValue(integer fileno;string tag;
			reference  string array vals;
		integer secondindex (0);boolean repterr (true) );
EXTERNAL INTEGER PROCEDURE GETINDEX(integer fileno;string tag;boolean repterr(true));
EXTERNAL PROCEDURE PutValue(integer fileno;string tag, value;boolean repterr(true));
EXTERNAL PROCEDURE !PutValue(integer fileno;string tag; string value;reference string array vals;
		integer secondindex (0);
		boolean repterr(true));
EXTERNAL STRING PROCEDURE GetTagName(INTEGER fileno;INTEGER index);
EXTERNAL STRING PROCEDURE Asktag(integer fileno;string prompt, default (null));
EXTERNAL INTEGER PROCEDURE #AskTag(integer fileno;string prompt, default (null));
EXTERNAL STRING PROCEDURE Getnametag(INTEGER fileno (1));
EXTERNAL STRING PROCEDURE !Getnametag(INTEGER fileno;REFERENCE STRING ARRAY vals;INTEGER second (0));
EXTERNAL INTEGER	toListChar;
EXTERNAL INTEGER	toVStartChar;
EXTERNAL INTEGER	toVFinChar;
EXTERNAL SIMPLE PROCEDURE InitDBTables;
EXTERNAL SIMPLE STRING PROCEDURE GrabOneVal(REFERENCE STRING val);
EXTERNAL SIMPLE STRING PROCEDURE tochar(reference string s;integer char);
EXTERNAL SIMPLE STRING PROCEDURE ListAppend(STRING v1,v2);
EXTERNAL SIMPLE STRING PROCEDURE ShortenVal(STRING val;INTEGER w);
EXTERNAL SIMPLE BOOLEAN PROCEDURE IsMulti(STRING val);
EXTERNAL SIMPLE STRING PROCEDURE Flatten(STRING s);
EXTERNAL SIMPLE STRING PROCEDURE MakeMulti(STRING val);
EXTERNAL BOOLEAN PageBreak;
EXTERNAL STRING valuedefault;
EXTERNAL SIMPLE STRING  PROCEDURE GetFirstLine(INTEGER fileno);
DEFINE PreRead		= {!ReadInFieldNames};
EXTERNAL PROCEDURE !ReadInFieldNames(INTEGER fileno);
EXTERNAL SIMPLE PROCEDURE HeadWrite(INTEGER chan,fileno);
EXTERNAL BOOLEAN PROCEDURE WRITE(INTEGER chan,fileno);
EXTERNAL SIMPLE PROCEDURE !Write(INTEGER chan,fileno;
		REFERENCE STRING ARRAY vals;	! The values read in;
		INTEGER second (0) );
EXTERNAL BOOLEAN PROCEDURE Read(INTEGER fileno);
EXTERNAL BOOLEAN PROCEDURE !Read(INTEGER fileno;
				REFERENCE STRING ARRAY vals;
				INTEGER second(0));
DEFINE !Getfile = {
Require "Use GetFile instead of !GetFile" message;
Getfile};
EXTERNAL PROCEDURE GetFile(INTEGER fileno;
		REFERENCE STRING ARRAY filevals);
EXTERNAL SIMPLE PROCEDURE PutFile(INTEGER chan,fileno;
		REFERENCE STRING ARRAY vals);
EXTERNAL SIMPLE PROCEDURE PutSortedFile(INTEGER chan,fileno;
		REFERENCE STRING ARRAY vals;	! Values to put;
		INTEGER ARRAY ptrs);
DEFINE PLInchwl(foo) = {
require "Don't use PLInchwl, use DefaultRead" message;
syntaxerror seeabove;};
EXTERNAL SIMPLE BOOLEAN PROCEDURE KeyInString ( STRING key, text );
EXTERNAL BOOLEAN PROCEDURE SimpleMatch ( STRING pat, text );
EXTERNAL SIMPLE BOOLEAN PROCEDURE MaskMatchesInput(integer fileno);
EXTERNAL SIMPLE PROCEDURE ClearMask(integer fileno);
DEFINE GetSomeMasks = {AskForMask};
EXTERNAL SIMPLE PROCEDURE AskForMask(integer fileno);
EXTERNAL SIMPLE INTEGER PROCEDURE ASNAsk(STRING prompt);
EXTERNAL STRING InFileName;
EXTERNAL STRING OutFileName;
EXTERNAL INTEGER Outchan;
EXTERNAL INTEGER In#;
EXTERNAL SIMPLE INTEGER PROCEDURE OpenRead(REFERENCE string filename;
					STRING prompt(NULL));
DEFINE DBOpenRead={DBreadopen},DBOpenWrite={DBwriteopen};
EXTERNAL SIMPLE INTEGER PROCEDURE DBreadopen(REFERENCE string filename;
					STRING prompt(NULL));
EXTERNAL SIMPLE INTEGER PROCEDURE OpenWrite(REFERENCE STRING filename;
				STRING prompt(NULL);
				BOOLEAN rewriteflg(false));
EXTERNAL SIMPLE INTEGER PROCEDURE BinWrite(REFERENCE STRING filename;
				STRING prompt(NULL);
				BOOLEAN rewriteflg(false));
EXTERNAL SIMPLE INTEGER PROCEDURE DBWriteOpen(REFERENCE STRING filename;
				STRING prompt(NULL);
				BOOLEAN rewriteflg(false));
