

; SCAMPI.NEW.1 & <MONITOR>SCAMPI.MAC.1 31-Mar-89 2351	PAGE 1



LINE 1, PAGE 1
1)	; Edit= 8914 to SCAMPI.MAC on 17-Aug-88 by GSCOTT
1)	;Update BUG. documentation. 
1)	; UPD ID= 8612, RIP:<7.MONITOR>SCAMPI.MAC.10,  11-Feb-88 18:27:46 by GSCOTT
LINE 1, PAGE 1
2)	; UPD ID= 8612, RIP:<7.MONITOR>SCAMPI.MAC.10,  11-Feb-88 18:27:46 by GSCOTT


LINE 3, PAGE 3
1)	;		     Table of Contents for AM70-SCAMPI
1)	;
LINE 3, PAGE 3
2)	;		     Table of Contents for SCAMPI
2)	;


LINE 15, PAGE 3
1)	;        5.1    SC.SOA (Set ONLINE address)  . . . . . . . . .  22
1)	;        5.2    Connection management  . . . . . . . . . . . .  24
1)	;            5.2.1    SC.CON (Connect) . . . . . . . . . . . .  26
1)	;            5.2.2    SC.LIS (Listen)  . . . . . . . . . . . .  30
1)	;            5.2.3    SC.ACC (Accept)  . . . . . . . . . . . .  33
1)	;            5.2.4    SC.REJ (Reject)  . . . . . . . . . . . .  35
1)	;            5.2.5    SC.DIS (Disconnect)  . . . . . . . . . .  36
1)	;        5.3    Messages and datagrams
1)	;            5.3.1    SC.SDG (Send a datagram) . . . . . . . .  40
1)	;            5.3.2    SC.SMG (Send a message)  . . . . . . . .  43
1)	;            5.3.3    SC.RDG (Receive a datagram)  . . . . . .  47
1)	;            5.3.4    SC.RMG (Receive a message) . . . . . . .  48
1)	;            5.3.5    SC.CRD (Cancel Receive datagram) . . . .  50
1)	;            5.3.6    SC.CMS (Cancel receive message)  . . . .  52
1)	;        5.4    Named buffers
1)	;            5.4.1    SC.MAP (Map a buffer)  . . . . . . . . .  53
1)	;            5.4.2    SC.UMP (Unmap a mapped buffer) . . . . .  54
1)	;            5.4.3    SC.SND (Send DMA data) . . . . . . . . .  55
1)	;        5.5    State polling  . . . . . . . . . . . . . . . .  57
1)	;            5.5.1    SC.DCI (Return destination connect ID) .  58
1)	;            5.5.2    SC.RCD (Return configuration data) . . .  59
1)	;            5.5.3    SC.NOD (Return node number given CID)  .  60
1)	;            5.5.4    SC.PRT (Return local port number)  . . .  61
1)	;        5.6    Maintenance
1)	;            5.6.1    SC.RST (Reset remote system) . . . . . .  62
1)	;            5.6.2    SC.STA (Start remote node) . . . . . . .  63
1)	^L	Subttl	Table of Contents (page 2)
1)	
1)	;		     Table of Contents for AM70-SCAMPI
1)	;
LINE 15, PAGE 3
2)	;        5.1    SC.SOA (Set ONLINE address)  . . . . . . . . .  20

; SCAMPI.NEW.1 & <MONITOR>SCAMPI.MAC.1 31-Mar-89 2351	PAGE 2


2)	;        5.2    Connection management  . . . . . . . . . . . .  21
2)	;            5.2.1    SC.CON (Connect) . . . . . . . . . . . .  23
2)	;            5.2.2    SC.LIS (Listen)  . . . . . . . . . . . .  26
2)	;            5.2.3    SC.ACC (Accept)  . . . . . . . . . . . .  29
2)	;            5.2.4    SC.REJ (Reject)  . . . . . . . . . . . .  31
2)	;            5.2.5    SC.DIS (Disconnect)  . . . . . . . . . .  32
2)	;        5.3    Messages and datagrams
2)	;            5.3.1    SC.SDG (Send a datagram) . . . . . . . .  35
2)	;            5.3.2    SC.SMG (Send a message)  . . . . . . . .  38
2)	;            5.3.3    SC.RDG (Receive a datagram)  . . . . . .  42
2)	;            5.3.4    SC.RMG (Receive a message) . . . . . . .  43
2)	;            5.3.5    SC.CRD (Cancel Receive datagram) . . . .  45
2)	;            5.3.6    SC.CMS (Cancel receive message)  . . . .  46
2)	;        5.4    Named buffers
2)	;            5.4.1    SC.MAP (Map a buffer)  . . . . . . . . .  47
2)	;            5.4.2    SC.UMP (Unmap a mapped buffer) . . . . .  48
2)	;            5.4.3    SC.SND (Send DMA data) . . . . . . . . .  49
2)	;        5.5    State polling  . . . . . . . . . . . . . . . .  51
2)	;            5.5.1    SC.DCI (Return destination connect ID) .  52
2)	;            5.5.2    SC.RCD (Return configuration data) . . .  53
2)	;            5.5.3    SC.NOD (Return node number given CID)  .  54
2)	;            5.5.4    SC.PRT (Return local port number)  . . .  55
2)	;        5.6    Maintenance
2)	;            5.6.1    SC.RST (Reset remote system) . . . . . .  56
2)	;            5.6.2    SC.STA (Start remote node) . . . . . . .  57
2)	^L	Subttl	Table of Contents (page 2)
2)	
2)	;		     Table of Contents for SCAMPI
2)	;


LINE 9, PAGE 4
1)	;        6.1    SC.ONL (Node has come online)  . . . . . . . .  64
1)	;        6.2    SC.ERR (Node(s) have gone away)  . . . . . . .  69
1)	;        6.3    SC.DMA (DMA operation complete)  . . . . . . .  77
1)	;        6.4    Incoming buffer
1)	;            6.4.1    SC.INT (Buffer arrival)  . . . . . . . .  78
1)	;            6.4.2    SC.ORQ (Connect request) . . . . . . . .  82
1)	;            6.4.3    SC.ORS (Connect response)  . . . . . . .  84
1)	;            6.4.4    SC.ARQ (Accept request)  . . . . . . . .  85
1)	;            6.4.5    SC.ARS (Accept response) . . . . . . . .  87
1)	;            6.4.6    SC.RRQ (Reject request)  . . . . . . . .  88
1)	;            6.4.7    SC.RRS (Reject response) . . . . . . . .  89
1)	;            6.4.8    SC.DRQ (Disconnect request)  . . . . . .  90
1)	;            6.4.9    SC.DRS (Disconnect response) . . . . . .  94
1)	;            6.4.10   SC.CRQ (Credit request)  . . . . . . . .  95
1)	;            6.4.11   SC.CRS (Credit response) . . . . . . . .  97
1)	;            6.4.12   SC.INC (Connection management) . . . . . 100
1)	;            6.4.13   SC.ADG/SC.AMG (application datagram/mess 105
1)	;    7. Periodic functions
1)	;        7.1    SC.CLK (Dispatch)  . . . . . . . . . . . . . . 108

; SCAMPI.NEW.1 & <MONITOR>SCAMPI.MAC.1 31-Mar-89 2351	PAGE 3


1)	;        7.2    SC.IDL (Idle chatter)  . . . . . . . . . . . . 109
1)	;        7.3    SC.RAP (Reap old connections)  . . . . . . . . 112
1)	;        7.4    SC.MAL (Allocate buffers)  . . . . . . . . . . 124
1)	;        7.5    SC.ALC (Allocate buffers for pool) . . . . . . 125
1)	;        7.6    SC.DEF (Allocate deferred buffers for sysap) . 127
1)	;    8. Connection management utility routines
1)	;        8.1    SC.SCA (Send connection management message)  . 131
1)	;        8.2    SC.SNM (Send next connection management messag 132
1)	;        8.3    SC.AWQ (Add entry to work queue) . . . . . . . 137
1)	;        8.4    SC.RWQ (Remove entry from work queue)  . . . . 138
1)	;        8.5    SC.AIB (Allocate and initialize a connection b 139
1)	;        8.6    SC.LCB (Link a new CB) . . . . . . . . . . . . 142
1)	;        8.7    SC.SCM (Search for connection match) . . . . . 146
1)	;        8.8    SC.CSC (CID sanity check)  . . . . . . . . . . 150
1)	;        8.9    SC.CDT (Send credit_request) . . . . . . . . . 151
1)	;        8.10   SC.CVC (Close a virtual connection)  . . . . . 155
1)	;        8.11   SC.SDM (String and data move to CB)  . . . . . 156
1)	;        8.12   SC.OUT (Check sysap call)  . . . . . . . . . . 157
1)	;        8.13   SC.RSP (Send a response) . . . . . . . . . . . 158
1)	;        8.14   SC.RQS (Send a request)  . . . . . . . . . . . 159
1)	;        8.15   SC.PAK (Send a packet) . . . . . . . . . . . . 162
1)	^L	Subttl	Table of Contents (page 3)
1)	
1)	;		     Table of Contents for AM70-SCAMPI
1)	;
LINE 9, PAGE 4
2)	;        6.1    SC.ONL (Node has come online)  . . . . . . . .  58
2)	;        6.2    SC.ERR (Node(s) have gone away)  . . . . . . .  62
2)	;        6.3    SC.DMA (DMA operation complete)  . . . . . . .  66
2)	;        6.4    Incoming buffer
2)	;            6.4.1    SC.INT (Buffer arrival)  . . . . . . . .  67
2)	;            6.4.2    SC.ORQ (Connect request) . . . . . . . .  70
2)	;            6.4.3    SC.ORS (Connect response)  . . . . . . .  72
2)	;            6.4.4    SC.ARQ (Accept request)  . . . . . . . .  73
2)	;            6.4.5    SC.ARS (Accept response) . . . . . . . .  75
2)	;            6.4.6    SC.RRQ (Reject request)  . . . . . . . .  76
2)	;            6.4.7    SC.RRS (Reject response) . . . . . . . .  77
2)	;            6.4.8    SC.DRQ (Disconnect request)  . . . . . .  78
2)	;            6.4.9    SC.DRS (Disconnect response) . . . . . .  81
2)	;            6.4.10   SC.CRQ (Credit request)  . . . . . . . .  82
2)	;            6.4.11   SC.CRS (Credit response) . . . . . . . .  84
2)	;            6.4.12   SC.INC (Connection management) . . . . .  86
2)	;            6.4.13   SC.ADG/SC.AMG (application datagram/mess  90
2)	;    7. Periodic functions
2)	;        7.1    SC.CLK (Dispatch)  . . . . . . . . . . . . . .  93
2)	;        7.2    SC.IDL (Idle chatter)  . . . . . . . . . . . .  94
2)	;        7.3    SC.RAP (Reap old connections)  . . . . . . . .  96
2)	;        7.4    SC.MAL (Allocate buffers)  . . . . . . . . . . 102
2)	;        7.5    SC.ALC (Allocate buffers for pool) . . . . . . 103
2)	;        7.6    SC.DEF (Allocate deferred buffers for sysap) . 105
2)	;    8. Connection management utility routines

; SCAMPI.NEW.1 & <MONITOR>SCAMPI.MAC.1 31-Mar-89 2351	PAGE 4


2)	;        8.1    SC.SCA (Send connection management message)  . 108
2)	;        8.2    SC.SNM (Send next connection management messag 109
2)	;        8.3    SC.AWQ (Add entry to work queue) . . . . . . . 112
2)	;        8.4    SC.RWQ (Remove entry from work queue)  . . . . 113
2)	;        8.5    SC.AIB (Allocate and initialize a connection b 114
2)	;        8.6    SC.LCB (Link a new CB) . . . . . . . . . . . . 117
2)	;        8.7    SC.SCM (Search for connection match) . . . . . 120
2)	;        8.8    SC.CSC (CID sanity check)  . . . . . . . . . . 124
2)	;        8.9    SC.CDT (Send credit_request) . . . . . . . . . 125
2)	;        8.10   SC.CVC (Close a virtual connection)  . . . . . 128
2)	;        8.11   SC.SDM (String and data move to CB)  . . . . . 129
2)	;        8.12   SC.OUT (Check sysap call)  . . . . . . . . . . 130
2)	;        8.13   SC.RSP (Send a response) . . . . . . . . . . . 131
2)	;        8.14   SC.RQS (Send a request)  . . . . . . . . . . . 132
2)	;        8.15   SC.PAK (Send a packet) . . . . . . . . . . . . 135
2)	^L	Subttl	Table of Contents (page 3)
2)	
2)	;		     Table of Contents for SCAMPI
2)	;


LINE 9, PAGE 5
1)	;        9.1    SC.SBT (Set buffer thresholds) . . . . . . . . 164
1)	;        9.2    SC.BUF . . . . . . . . . . . . . . . . . . . . 169
1)	;        9.3    SC.ALD (Allocate long datagram buffers)  . . . 171
1)	;        9.4    SC.ABF (Allocate a buffer/buffers) . . . . . . 172
1)	;        9.5    SC.CMG/SC.CDG (Create MSG/DG buffers)  . . . . 177
1)	;        9.6    SC.BBF (Break memory into buffers) . . . . . . 180
1)	;        9.7    SC.RBF (Return a message buffer) . . . . . . . 181
1)	;        9.8    SC.RLD (Return a datagram buffer)  . . . . . . 182
1)	;        9.9    SC.TMQ/SC.TDQ (Trace free queue) . . . . . . . 183
1)	;   10. Byte-swapping routines
1)	;       10.1    SC.RIN (Byte swap incoming packet) . . . . . . 184
1)	;       10.2    SC.ISW (Swap bytes from 11 to 10 format) . . . 185
1)	;       10.3    SC.ROU (Byte swap outgoing packet) . . . . . . 186
1)	;       10.4    SC.OSW (Swap word from 10 to 11 format)  . . . 187
1)	;   11. Locking/unlocking routines
1)	;       11.1    SC.PFF (Turn KLIPA channel off)  . . . . . . . 188
1)	;       11.2    SC.PON (Turn KLIPA channel on) . . . . . . . . 189
1)	;       11.3    SC.LOK (Lock connection block) . . . . . . . . 191
1)	;       11.4    SC.ULK (Unlock connection block) . . . . . . . 192
1)	;   12. Ring Buffer routines
1)	;       12.1    SC.RGI (Initialize ring buffer variables)  . . 195
1)	;       12.2    SC.RHD (Write ring buffer entry header)  . . . 196
1)	;       12.3    SC.RTE (Write ring buffer entry tail)  . . . . 199
1)	;       12.4    SC.RWR (Write ring buffer entry) . . . . . . . 200
1)	;       12.5    RG.SSC (SYSAP to SCA calls)  . . . . . . . . . 201
1)	;       12.6    RG.SCS (SCA to SYSAP calls)  . . . . . . . . . 202
1)	;       12.7    RG.BFM (Buffer manipulation) . . . . . . . . . 203
1)	;       12.8    RG.PKT (Packet movement) . . . . . . . . . . . 204
1)	;       12.9    RG.PIT (PI transitions)  . . . . . . . . . . . 205

; SCAMPI.NEW.1 & <MONITOR>SCAMPI.MAC.1 31-Mar-89 2351	PAGE 5


1)	;       12.10   RG.PQM (Port queue manipulation) . . . . . . . 206
1)	;       12.11   RG.ITL (Interlocks)  . . . . . . . . . . . . . 207
1)	;   13. General Routines
1)	;       13.1    SC.BRK (Break data into SCA buffers) . . . . . 209
1)	;       13.2    MXCIND (Return max CI nodes seen)  . . . . . . 212
1)	;   14. Dummy routines until the port driver supports them . . 213
1)	;   15. End of SCAMPI  . . . . . . . . . . . . . . . . . . . . 214
1)	^L	SUBTTL Comments 
LINE 9, PAGE 5
2)	;        9.1    SC.SBT (Set buffer thresholds) . . . . . . . . 137
2)	;        9.2    SC.BUF . . . . . . . . . . . . . . . . . . . . 142
2)	;        9.3    SC.ALD (Allocate long datagram buffers)  . . . 144
2)	;        9.4    SC.ABF (Allocate a buffer/buffers) . . . . . . 145
2)	;        9.5    SC.CMG/SC.CDG (Create MSG/DG buffers)  . . . . 146
2)	;        9.6    SC.BBF (Break memory into buffers) . . . . . . 147
2)	;        9.7    SC.RBF (Return a message buffer) . . . . . . . 148
2)	;        9.8    SC.RLD (Return a datagram buffer)  . . . . . . 149
2)	;        9.9    SC.TMQ/SC.TDQ (Trace free queue) . . . . . . . 150
2)	;   10. Byte-swapping routines
2)	;       10.1    SC.RIN (Byte swap incoming packet) . . . . . . 151
2)	;       10.2    SC.ISW (Swap bytes from 11 to 10 format) . . . 152
2)	;       10.3    SC.ROU (Byte swap outgoing packet) . . . . . . 153
2)	;       10.4    SC.OSW (Swap word from 10 to 11 format)  . . . 154
2)	;   11. Locking/unlocking routines
2)	;       11.1    SC.PFF (Turn KLIPA channel off)  . . . . . . . 155
2)	;       11.2    SC.PON (Turn KLIPA channel on) . . . . . . . . 156
2)	;       11.3    SC.LOK (Lock connection block) . . . . . . . . 157
2)	;       11.4    SC.ULK (Unlock connection block) . . . . . . . 158
2)	;   12. Ring Buffer routines
2)	;       12.1    SC.RGI (Initialize ring buffer variables)  . . 159
2)	;       12.2    SC.RHD (Write ring buffer entry header)  . . . 160
2)	;       12.3    SC.RTE (Write ring buffer entry tail)  . . . . 161
2)	;       12.4    SC.RWR (Write ring buffer entry) . . . . . . . 162
2)	;       12.5    RG.SSC (SYSAP to SCA calls)  . . . . . . . . . 163
2)	;       12.6    RG.SCS (SCA to SYSAP calls)  . . . . . . . . . 164
2)	;       12.7    RG.BFM (Buffer manipulation) . . . . . . . . . 165
2)	;       12.8    RG.PKT (Packet movement) . . . . . . . . . . . 166
2)	;       12.9    RG.PIT (PI transitions)  . . . . . . . . . . . 167
2)	;       12.10   RG.PQM (Port queue manipulation) . . . . . . . 168
2)	;       12.11   RG.ITL (Interlocks)  . . . . . . . . . . . . . 169
2)	;   13. General Routines
2)	;       13.1    SC.BRK (Break data into SCA buffers) . . . . . 171
2)	;       13.2    MXCIND (Return max CI nodes seen)  . . . . . . 172
2)	;   14. Dummy routines until the port driver supports them . . 173
2)	;   15. End of SCAMPI  . . . . . . . . . . . . . . . . . . . . 174
2)	^L	SUBTTL Comments 


; SCAMPI.NEW.1 & <MONITOR>SCAMPI.MAC.1 31-Mar-89 2351	PAGE 6



LINE 5, PAGE 20
1)	Cause:	SCA called PGRSKD for a page to put its data tables in.  The call
1)		failed.  Nothing can be done without these tables.
1)	>)
LINE 48, PAGE 19
2)	Cause:	SCA called PGRSKD for a page to put its data tables in.
2)		The call failed. Nothing can be done without these tables.
2)	>)


LINE 21, PAGE 21
1)	Cause:	SC.ABF was called to get a buffer for the address list to be used to
1)		call SYSAPs when a node comes online.  Without this list no one will
1)		ever be told when a node comes online and hence we cannot run.
LINE 117, PAGE 19
2)	Cause:	SC.ABF was called to get a buffer for the address list to be used
2)		to call SYSAPs when a node comes online. Without this list no one will
2)		ever be told when a node comes online and hence we cannot run.


LINE 43, PAGE 21
1)		SCADIE is called by the location and the stack points out the faultly
1)		phase of init.
1)	>)
1)	^L	SUBTTL Calls from sysap -- SC.SOA (Set ONLINE address)
LINE 139, PAGE 19
2)		SCADIE is called by the location and the stack points out the 
2)		faultly phase of init.
2)	>)
2)		JRST SCADIE		;Just in case we try something silly, like
2)					;  continue...
2)	^L	SUBTTL Calls from sysap -- SC.SOA (Set ONLINE address)


LINE 31, PAGE 22
1)	Cause:	So many SYSAPs have requested notification of nodes that come on and go
1)		off line that the table of notification addresses overflowed.
1)	
1)	Action:	If this bug is reproducible, change it to a BUGHLT and submit an SPR
1)		with the dump and instructions for reproducing it.
1)	>)
LINE 31, PAGE 20
2)	Cause:	So many SYSAPs have requested notification of nodes that come on
2)		and go off line that the table of notification addresses overflowed.
2)	>)


; SCAMPI.NEW.1 & <MONITOR>SCAMPI.MAC.1 31-Mar-89 2351	PAGE 7



LINE 24, PAGE 27
1)	Cause:	SC.CON created a new connection block and then called SC.OUT to check
1)		its state. The call should never fail.
1)	>)
LINE 51, PAGE 23
2)	Cause:	SC.CON created a new connection block and then called SC.OUT to
2)		check its state. The call should never fail.
2)	>)


LINE 9, PAGE 31
1)	Cause:	SC.LIS created a new connection block and then called SC.OUT to check
1)		its state.  The call should never fail.
1)	>)
LINE 9, PAGE 27
2)	Cause:	SC.LIS created a new connection block and then called SC.OUT to
2)		check its state. The call should never fail.
2)	>)


LINE 39, PAGE 38
1)	Cause:	A SYSAP called SCAMPI at SC.DIS when the connection block was locked.
1)		The connection block is being unlocked, and the	request is being
1)		processed.  SC.OUT has returned failure, indicating that this function
1)		can't be performed for the current state.  There is no way to return
1)		that failure to the SYSAP, which believes that the disconnect has
1)		proceeded normally.  The system will crash to determine the cause.
1)	
1)	Action:	Submit an SPR with the dump and instructions for reproducing it.
1)	
1)		It may be impossible to analyze this from the current data.  If the SCA
1)		ring buffer was enabled, try to determine the sequence of events.  Look
1)		at the current state of the connection block, and try to see why SC.OUT
1)		failed.
1)	>)
LINE 39, PAGE 34
2)	Cause:	A sysap called SCAMPI at SC.DIS when the connection block was locked.
2)		The connection block is being unlocked, and the	request is being 
2)		processed. SC.OUT has returned failure, indicating that this
2)		function can't be performed for the current state. There is no way
2)		to return that failure to the sysap, which believes that the
2)		disconnect has proceeded normally. The system will crash to determine 
2)		the cause.
2)	
2)	Action:	It may be impossible to analyze this from the current data.
2)		If the ring buffer was enabled, try to determine the sequence of
2)		events. Look at the current state of the connection block, and try
2)		to see why SC.OUT failed.
2)	

; SCAMPI.NEW.1 & <MONITOR>SCAMPI.MAC.1 31-Mar-89 2351	PAGE 8


2)	>)


LINE 24, PAGE 42
1)	Cause:	The count is already zero or less when the count of queued buffers for
1)		a connection block is to be decremented.
1)	>)
LINE 24, PAGE 37
2)	Cause:	The count is already zero or less when the count of queued buffers 
2)		for a connection block is to be decremented. 
2)	>)


LINE 22, PAGE 46
1)	Cause:	We are about to decrement the count of queued buffers for a particular
1)		connection block, but the count is already zero or less.
1)	>)
LINE 22, PAGE 41
2)	Cause:	We are about to decrement the count of queued buffers for a
2)		particular connection block, but the count is already zero or less.
2)	>)


LINE 9, PAGE 51
1)	Cause:	A SYSAP has done the "cancel receive datagram" function of SCA, and the
1)		port's queue did not contain as many buffers as the system believes it
1)		should contain.
1)	
1)	Action:	If this bug is reproducible, change it to a BUGHLT and submit an SPR
1)		with the dump and instructions for reproducing it.
1)	
1)	Data:	NODE  - Node number
LINE 44, PAGE 45
2)	Cause:	A sysap has done the "cancel receive datagram" function of SCA, and
2)		the port's queue did not contain as many buffers as the system believes
2)		it should contain.
2)	
2)	Data:	NODE  - Node number


LINE 14, PAGE 64
1)	Action:	If this bug is reproducible, change it to a BUGHLT and submit an SPR
1)		with the dump and instructions for reproducing it.
1)	>)
LINE 13, PAGE 58
2)	>)


; SCAMPI.NEW.1 & <MONITOR>SCAMPI.MAC.1 31-Mar-89 2351	PAGE 9



LINE 31, PAGE 64
1)	Cause:	A node came online while stuck on buffers.  This should have been
1)		cleared when the node went offline.
1)	
1)	Action:	If this bug is reproducible, change it to a BUGHLT and submit an SPR
1)		with the dump and instructions for reproducing it.
1)	
1)		Determine whether PHYKLP is calling twice with the same node.  If not,
1)		something has probably clobbered the flags word for this system block.
1)	
1)	Data:	NODE - Node number
LINE 28, PAGE 58
2)	Cause:	A node came online while stuck on buffers. This should have been cleared
2)		when the node went offline.
2)	
2)	Action:	Determine whether PHYKLP is calling twice with the same node.
2)		If not, something has probably clobbered the flags word for this
2)		system block.
2)	
2)	Data:	NODE - Node number


LINE 7, PAGE 65
1)	Cause:	A node came online while its work queue still contained entries.  The
1)		work queue should have been cleaned up when the node went offline.
1)	
1)	Action:	If this bug is reproducible, change it to a BUGHLT and submit an SPR
1)		with the dump and instructions for reproducing it.
1)	
1)	Data:	NODE - Node number
LINE 46, PAGE 58
2)	Cause:	A node came online while its work queue still contained entries. 
2)		The work queue should have been cleaned up when the node went offline.
2)	
2)	Data:	NODE - Node number


LINE 1, PAGE 66
1)	^L;No connection blocks should be locked now. We get here only after the
1)	;v.c. has been closed, at which point the c.b.'s should have been unlocked.
1)	
1)		SKIPN T1,.SBCLC(P4)	;Is a connection block still locked?
LINE 55, PAGE 58
2)		;..
2)	
2)	^L;No connection blocks should be locked now. We get here only after the
2)	;v.c. has been closed, at which point the c.b.'s should have been unlocked.
2)	
2)		;..

; SCAMPI.NEW.1 & <MONITOR>SCAMPI.MAC.1 31-Mar-89 2351	PAGE 10


2)		SKIPN T1,.SBCLC(P4)	;Is a connection block still locked?


LINE 9, PAGE 67
1)		virtual circuit should not have been closed until this count was zero.
1)	
1)	Action:	If this bug is reproducible, change it to a BUGHLT and submit an SPR
1)		with the dump and instructions for reproducing it.
1)	
1)	Data:	NODE  - Node number
LINE 10, PAGE 59
2)		v.c. should not have been closed until this count was zero.
2)	
2)	Data:	NODE  - Node number


LINE 13, PAGE 68
1)		been called twice for node online.  The buffer will be lost after this.
1)	
1)	Action:	If this bug is reproducible, change it to a BUGHLT and submit an SPR
1)		with the dump and instructions for reproducing it.
1)	
1)	Data:	NODE   - Node number
LINE 13, PAGE 60
2)		been called twice for node online. The buffer will be lost after
2)		this.
2)	
2)	Data:	NODE   - Node number


LINE 26, PAGE 69
1)	Cause:	SCA has been notified of a new system coming online.  It tried to
1)		allocate two buffers to be used for connection management, and failed.
1)		This indicates that a large number of buffers have been allocated at
1)		interrupt level, and the process that creates more hasn't run recently.
1)	
1)	Action:	It is possible to recover from this by deferring buffer allocation 
LINE 26, PAGE 61
2)	Cause:	SCA has been notified of a new system coming online. It tried
2)		to allocate two buffers to be used for connection management, and
2)		failed. This indicates that a large number of buffers have been
2)		allocated at interrupt level, and the process that creates more 
2)		hasn't run recently.
2)	
2)	Action:	It is possible to recover from this by deferring buffer allocation 


; SCAMPI.NEW.1 & <MONITOR>SCAMPI.MAC.1 31-Mar-89 2351	PAGE 11



LINE 32, PAGE 70
1)		While this won't cause an immediate problem, it does indicate internal
1)		confusion and should be investigated.
1)	
1)	Action:	If this bug is reproducible, change it to a BUGHLT and submit an SPR
1)		with the dump and instructions for reproducing it.
1)	
1)	Data:	NODE - Node number
LINE 32, PAGE 62
2)		While this won't cause an immediate problem, it does indicate 
2)		internal confusion and should be investigated.
2)	
2)	Data:	NODE - Node number


LINE 6, PAGE 71
1)	Cause:	SCA was notified of a system going offline and decremented the count of
1)		systems currently online.  In doing so, the count went negative.
1)	
1)	Action:	If this bug is reproducible, change it to a BUGHLT and submit an SPR
1)		with the dump and instructions for reproducing it.
1)	>)
1)	
1)		  SETZM SBCNT		;Make the count zero, rather than -1
1)		 ENDIF.			;  and continue normally
   {Skipped 1 page and 1 line}
1)	;Loop over all connections on the SB and mark them as closed. If they were
1)	;already closed, the sysap isn't interested in them any more. If not, tell the
1)	;sysap that the connection has been closed.  If not CIOFF, need NOSKED to keep
1)	;reaper from changing the list Sysaps expect this callback not to be
1)	;interrupted.
1)	
1)		SKIPN P1,.SBFCB(P4)	;Get the addr of the first connection block
LINE 45, PAGE 62
2)	Cause:	SCA was notified of a system going offline and decremented the count
2)		of systems currently online. In doing so, the count went negative. 
2)	>)
2)	
2)		  SETZM SBCNT		;Make the count zero, rather than -1
2)		 ENDIF.			;  and continue normally
2)		;..
2)	
2)	^L;Loop over all connections on the SB and mark them as closed. If they were
2)	;already closed, the sysap isn't interested in them any more. If not, tell
2)	;the sysap that the connection has been closed.
2)	;If not CIOFF, need NOSKED to keep reaper from changing the list
2)	;Sysaps expect this callback not to be interrupted
2)	
2)		;..

; SCAMPI.NEW.1 & <MONITOR>SCAMPI.MAC.1 31-Mar-89 2351	PAGE 12


2)		SKIPN P1,.SBFCB(P4)	;Get the addr of the first connection block


LINE 10, PAGE 75
1)	Action:	If this bug is reproducible, change it to a BUGHLT and submit an SPR
1)		with the dump and instructions for reproducing it.
1)	
1)		Depending on timing this may happen legitimately.  If it persists, 
1)		stock the port's message free queue more generously at system startup.
LINE 54, PAGE 64
2)	Action:	Depending on timing this may happen legitimately. If it persists, 
2)		stock the port's message free queue more generously at system startup.


LINE 14, PAGE 80
1)	Cause:	When the count of queued buffers is about to be decremented, the count
1)		is found to be already zero or less.
1)	>)
LINE 14, PAGE 68
2)	Cause:	When the count of queued buffers is about to be decremented, the
2)		count is found to be already zero or less.
2)	>)


LINE 2, PAGE 81
1)	;very well have been a message we must close the VC.  Note that we don't know
1)	;what kind of buffer we have, so we just throw it away.
1)	
1)	SIN.ER:	LOAD T1,SBDPA,(P4)	;Get node number
1)		LOAD T2,CBSCID,(P1)	;Get connect ID
1)		BUG.(CHK,SCABMT,SCAMPI,SOFT,<SCA - Bad message type from remote node>,<<T1,NODE>,<T2,CID>,<T3,OPCODE>>,<
1)	
1)	Cause:	A bad message type was found on range checking.  This shouldn't happen
1)		if the port and port driver are working correctly.  The message is
1)		thrown away.
1)	
1)	Data:	NODE   - node number
LINE 45, PAGE 68
2)	;very well have been a message we must close the VC.
2)	;Note that we don't know what kind of buffer we have, so we just throw
2)	;it away.
2)	
2)	SIN.ER:	LOAD T1,SBDPA,(P4)	;Get node number
2)		LOAD T2,CBSCID,(P1)	;Get connect ID
2)		BUG. (CHK,SCABMT,SCAMPI,SOFT,<SCA - Bad message type from remote node>,<<T1,NODE>,<T2,CID>,<T3,OPCODE>>,<
2)	
2)	Cause:	A bad message type was found on range checking. This shouldn't
2)		happen if the port and port driver are working correctly. The 
2)		message is thrown away.
2)	
2)	Data:	NODE   - node number

; SCAMPI.NEW.1 & <MONITOR>SCAMPI.MAC.1 31-Mar-89 2351	PAGE 13




LINE 15, PAGE 93
1)	SC.FN3:	CIOFF
1)		SETZRO CBFDRQ,(P1)	;Clear indication that this was deferred
LINE 15, PAGE 80
2)	SC.FN3:
2)		CIOFF
2)		SETZRO CBFDRQ,(P1)	;Clear indication that this was deferred


LINE 25, PAGE 93
1)		At the time, the incoming packet was legal for the current state of the
1)		connection.  Now it is not legal.  This shouldn't happen, and it is
1)		uncertain how to proceed.  It is possible to close the virtual circuit
1)		and continue, but there is a halt in order to analyze the protocol
1)		confusion and fix the bug.
LINE 26, PAGE 80
2)		At the time, the incoming packet was legal for the current state of
2)		the connection. Now it is not legal. This shouldn't happen, and it 
2)		is uncertain how to proceed. It is possible to close the v.c. and 
2)		continue, but there is a halt in order to analyze the protocol 
2)		confusion and fix the bug.


LINE 1, PAGE 94
1)	;Here when new state is disconnect_received.  Corporate spec says the sysap
1)	;should be required to do a disconnect.  We fake it by setting the state and
1)	;sending the message.  Set the state before calling the sysap. If it does an
1)	;SC.DIS before returning we won't send two disconnect_requests.
1)	
1)	FN3.CO:	MOVEI T1,.CSDMC		;New connection state is disconnect_match
LINE 50, PAGE 80
2)	;Here when new state is disconnect_received.
2)	;Corporate spec says the sysap should be required to do a disconnect.
2)	;We fake it by setting the state and sending the message.
2)	;Set the state before calling the sysap. If it does an SC.DIS before returning
2)	;we won't send two disconnect_requests.
2)	
2)	FN3.CO:	MOVEI T1,.CSDMC		;New connection state is disconnect_match


LINE 12, PAGE 98
1)	;NOTE: If credit field is negative, we can take buffers back from the port. If
1)	;that fails, we have a problem. There will be disagreement among 1) our receive
1)	;credit, 2) the other side's send credit, and 3) the number of buffers actually
1)	;queued for this connection. This code attempts to keep 1 and 2 in agreement.
1)	
1)	SC.CRS:	AOS SCAORC		;[7211] COUNT THE MESSAGE
LINE 12, PAGE 84
2)	;NOTE:

; SCAMPI.NEW.1 & <MONITOR>SCAMPI.MAC.1 31-Mar-89 2351	PAGE 14


2)	;If credit field is negative, we can take buffers back from the port. If
2)	;that fails, we have a problem. There will be disagreement among 1) our
2)	;receive credit, 2) the other side's send credit, and 3) the number of
2)	;buffers actually queued for this connection. This code attempts to
2)	;keep 1 and 2 in agreement.
2)	
2)	SC.CRS:	AOS SCAORC		;[7211] COUNT THE MESSAGE


LINE 19, PAGE 99
1)	Action:	If this bug is reproducible, change it to a BUGHLT and submit an SPR
1)		with the dump and instructions for reproducing it.
1)	
1)	Data:	NODE - Node number
LINE 41, PAGE 84
2)	Data:	NODE - Node number


LINE 19, PAGE 102
1)	Cause:	A connection management response arrived for a particular connection,
1)		but the op code is not the expected one.
1)	
1)	Action:	If this bug is reproducible, change it to a BUGHLT and submit an SPR
1)		with the dump and instructions for reproducing it.
1)	
1)		The virtual circuit will be closed, on the assumption that the other
1)		node violated protocol.  This may correct the confusion.  If this error
1)		persists, try to determine the events that led to it.  Use the SCA ring
1)		buffer if necessary.
1)	
1)	Data:	NODE   - Node number
LINE 19, PAGE 87
2)	Cause:	A connection management response arrived for a particular
2)		connection, but the op code is not the expected one.
2)	
2)	Action:	The v.c. will be closed, on the assumption that the other node
2)		violated protocol. This may correct the confusion. If this error
2)		persists, try to determine the events that led to it. Use the
2)		ring buffer if necessary.
2)	
2)	Data:	NODE   - Node number


; SCAMPI.NEW.1 & <MONITOR>SCAMPI.MAC.1 31-Mar-89 2351	PAGE 15



LINE 11, PAGE 103
1)		illegal.  The virtual circuit will be closed to eliminate any
1)		confusion.
1)	
1)	Action:	If this persists, change it to a BUGHLT, and submit an SPR along with
1)		the dump and instruction on reproducing it.
1)	
1)		Look at the dump and determine the sequence of events that led to it.
1)		Use the SCA ring buffer, if necessary.
1)	
1)	Data:	NODE   - Node number
LINE 11, PAGE 88
2)		illegal. Closing the v.c. will eliminate any confusion.
2)	
2)	Action:	If this persists, change it to a BUGHLT, and determine the sequence of
2)		events that led to it. Use the ring buffer, if necessary.
2)	
2)	Data:	NODE   - Node number


LINE 10, PAGE 104
1)	Cause:	An incoming packet's destination CID doesn't match any connection
1)		block.  This may reflect disagreement with another node about the state
1)		of a previously existing connection.  	The virtual circuit will be
1)		closed, which will correct the problem.
1)	
1)	Action:	If this bug is reproducible, change it to a BUGHLT and submit an SPR
1)		with the dump and instructions for reproducing it.
1)	
1)		From looking at the dump, try to determine the events that led to it.
1)		Use the SCA ring buffer if necessary.
1)	
1)	Data:	NODE   - Node number
LINE 32, PAGE 88
2)	Cause:	An incoming packet's destination CID doesn't match any connection block.
2)		This may reflect disagreement with another node about the state of
2)		a previously-existing connection.
2)	
2)	Action:	The v.c. will be closed, which will correct the problem.
2)		If this bug persists, try to determine the events that led to it.
2)		Use the ring buffer if necessary.
2)	
2)	Data:	NODE   - Node number


; SCAMPI.NEW.1 & <MONITOR>SCAMPI.MAC.1 31-Mar-89 2351	PAGE 16



LINE 14, PAGE 111
1)	Action:	This happens legitimately if a node crashes.  If this timeout is
1)		occurring for nodes that appear to be running, try to determine why
1)		they are not communicating.  If this bug is reproducible when the node
1)		is running normally, change it to a BUGHLT and submit an SPR with the
1)		dump and instructions for reproducing it.
1)	
1)	Data:	NODE - Node number
LINE 49, PAGE 94
2)	Action:	This happens legitimately if a node crashes. If this timeout
2)		is occurring for nodes that appear to be running, try to determine
2)		why they are not communicating.
2)	
2)	Data:	NODE - Node number


LINE 22, PAGE 115
1)		several postponements, these were not corrected.  The block is now
1)		being deleted.
1)	
1)	Action:	If COUNT is non-zero, see if the CI-20 was reloaded recently.  Buffers
1)		can be lost legitimately when this happens.
1)	
1)		If this bug is reproducible with COUNT zero, change it to a BUGHLT and
1)		submit an SPR with the dump and instructions for reproducing it.
1)	
1)	Data:	NODE  - Node number
LINE 47, PAGE 97
2)		several postponements, these were not corrected. The block is now being
2)		deleted.
2)	
2)	Action:	If COUNT is non-zero, see if the CI-20 was reloaded recently.
2)		Buffers can be lost legitimately when this happens.
2)	
2)	Data:	NODE  - Node number


LINE 24, PAGE 117
1)	Cause:	SCA is ready to delete a connection block, and its block state is
1)		non-zero.  The block state should have been cleared when the reap bit
1)		was set.
1)	
1)	Action:	If this bug is reproducible, change it to a BUGHLT and submit an SPR
1)		with the dump and instructions for reproducing it.
1)	
1)	Data:	NODE  - Node number
LINE 24, PAGE 99
2)	Cause:	SCA is ready to delete a connection block, and its block state
2)		is non-zero. The block state should have been cleared when the reap

; SCAMPI.NEW.1 & <MONITOR>SCAMPI.MAC.1 31-Mar-89 2351	PAGE 17


2)		bit was set.
2)	
2)	Data:	NODE  - Node number


LINE 12, PAGE 118
1)	Action:	If this bug is reproducible, change it to a BUGHLT and submit an SPR
1)		with the dump and instructions for reproducing it.
1)	
1)	Data:	NODE   - Node number
LINE 46, PAGE 99
2)	Data:	NODE   - Node number


LINE 32, PAGE 118
1)	Action:	If this bug is reproducible, change it to a BUGHLT and submit an SPR
1)		with the dump and instructions for reproducing it.
1)	
1)	Data:	NODE  - Node number
LINE 64, PAGE 99
2)	Data:	NODE  - Node number


LINE 11, PAGE 120
1)	Action:	If this bug is reproducible, change it to a BUGHLT and submit an SPR
1)		with the dump and instructions for reproducing it.
1)	
1)	Data:	NODE  - node number
LINE 47, PAGE 100
2)	Data:	NODE  - node number


LINE 12, PAGE 121
1)	Cause:	When reaping a connection block, a buffer count indicates that datagram
1)		buffers are queued to the port.  However, the port's queue has been
1)		emptied while these buffers were removed.
1)	
1)	Action:	If this bug is reproducible, change it to a BUGHLT and submit an SPR
1)		with the dump and instructions for reproducing it.
1)	
1)	Data:	NODE  - node number
LINE 89, PAGE 100
2)	Cause:	When reaping a connection block, a buffer count indicates that
2)		datagram buffers are queued to the port. However, the port's queue has
2)		been emptied while these buffers were removed.
2)	
2)	Data:	NODE  - node number


; SCAMPI.NEW.1 & <MONITOR>SCAMPI.MAC.1 31-Mar-89 2351	PAGE 18



LINE 16, PAGE 126
1)	Action:	If this bug is reproducible, change it to a BUGHLT and submit an SPR
1)		with the dump and instructions for reproducing it.
1)	
1)	Data:	ERROR - error code
LINE 16, PAGE 103
2)	Data:	ERROR - error code


LINE 16, PAGE 127
1)	Action:	If this bug is reproducible, change it to a BUGHLT and submit an SPR
1)		with the dump and instructions for reproducing it.
1)	
1)	Data:	ERROR - error code
LINE 16, PAGE 104
2)	Data:	ERROR - error code


LINE 20, PAGE 128
1)	Cause:	SC.DEF found a system block marked as stuck for buffers, but the
1)		address of the system block is 0.
1)	
1)	Data:	NODE - Node number
LINE 20, PAGE 105
2)	Cause:	SC.DEF found a system block marked as stuck for buffers, but the address
2)		of the system block is 0.
2)	
2)	Data:	NODE - Node number


LINE 16, PAGE 132
1)	;It is possible to find block state non-zero here. This can happen, for
1)	;example, if we had the c.b. queued waiting to send a credit_request, and a
1)	;disconnect_request came in. In that case, we will store the new state on top
1)	;of the old one. The block will already be queued, so we won't try to queue it
1)	;again. This should happen only rarely.
1)	
1)	SC.SCA:
LINE 16, PAGE 108
2)	;It is possible to find block state non-zero here. This can happen,
2)	;for example, if we had the c.b. queued waiting to send a credit_request,
2)	;and a disconnect_request came in. In that case, we will store the new
2)	;state on top of the old one. The block will already be queued, so we won't
2)	;try to queue it again. This should happen only rarely.
2)	
2)	SC.SCA:


; SCAMPI.NEW.1 & <MONITOR>SCAMPI.MAC.1 31-Mar-89 2351	PAGE 19



LINE 34, PAGE 132
1)	Action:	If this bug is reproducible, change it to a BUGHLT and submit an SPR
1)		with the dump and instructions for reproducing it.
1)	
1)		If the old state is anything except CREDIT_PEND, something is wrong.
1)		Try to trace the events that led to this, using the SCA ring buffer if
1)		necessary.
LINE 34, PAGE 108
2)	Action:	If the old state is anything except CREDIT_PEND, something is wrong.
2)		Try to trace the events that led to this, using the ring buffer, if
2)		necessary.


LINE 21, PAGE 134
1)	Action:	If this bug is reproducible, change it to a BUGHLT and submit an SPR
1)		with the dump and instructions for reproducing it.
1)	
1)	Data:	NODE  - Node number
LINE 46, PAGE 109
2)	Data:	NODE  - Node number


LINE 12, PAGE 135
1)	Cause:	A connection block is marked as both waiting to send a request message
1)		as reapable. The reapable bit should be set only when there is no need
1)		to send further requests.  The message is not sent and the block is
1)		deleted. 
1)	
1)	Action:	If this bug is reproducible, change it to a BUGHLT and submit an SPR
1)		with the dump and instructions for reproducing it.
1)	
1)	Data:	NODE - Node number
LINE 68, PAGE 109
2)	Cause:	A connection block is marked as both waiting to send a request 
2)		message as reapable. The reapable bit should be set only when
2)		there is no need to send further requests.
2)	
2)	Action:	The message is not sent and the block is deleted. If the
2)		problem persists, use the ring buffer to trace the events leading
2)		to it.
2)	
2)	Data:	NODE - Node number


; SCAMPI.NEW.1 & <MONITOR>SCAMPI.MAC.1 31-Mar-89 2351	PAGE 20



LINE 43, PAGE 143
1)		other block.
1)	
1)	Action:	If this bug is reproducible, change it to a BUGHLT and submit an SPR
1)		with the dump and instructions for reproducing it.
1)	
1)	Data:	NODE  - node number
LINE 43, PAGE 117
2)		other block
2)	
2)	Data:	NODE  - node number


LINE 40, PAGE 149
1)	Cause:	SCAMPI received a connect_request and matched it to a listener.  But
1)		when SCAMPI tried to queue the connection block to the system block, it
1)		found that the virtual circuit was closed.  Since SCAMPI had checked
1)		for that state earlier, and this is happening at interrupt level,
LINE 40, PAGE 122
2)	Cause:	SCAMPI received a connect_request and matched it to a listener.
2)		But when SCAMPI tried to queue the connection block to the system 
2)		block, it found that the v.c. was closed. Since SCAMPI had checked 
2)		for that state earlier, and this is happening at interrupt level, 


LINE 1, PAGE 153
1)	;Here because credit values suggest sending a credit_request. See if the state
1)	;of the connection will allow it. We don't send if the connection isn't open.
1)	;If we're still opening it, there's a risk of confusing the other side. If
1)	;we're closing it, there's no need to send a credit_request.  Also, we want to
1)	;avoid sending anything after the disconnect sequence has started, because we
1)	;will declare protocol complete and reap the block when the final
1)	;disconnect_response comes in. We don't want to receive a credit_response after
1)	;that.
1)	
1)		;..
LINE 1, PAGE 126
2)	^L;Here because credit values suggest sending a credit_request. See
2)	;if the state of the connection will allow it. We don't send if the connection
2)	;isn't open. If we're still opening it, there's a risk of confusing the
2)	;other side. If we're closing it, there's no need to send a credit_request.
2)	;Also, we want to avoid sending anything after the disconnect sequence
2)	;has started, because we will declare protocol complete and reap the block
2)	;when the final disconnect_response comes in. We don't want to receive
2)	;a credit_response after that.
2)	
2)		;..


; SCAMPI.NEW.1 & <MONITOR>SCAMPI.MAC.1 31-Mar-89 2351	PAGE 21



LINE 15, PAGE 153
1)	;Racefree, indicate that we're setting up for a credit_request, and make sure
1)	;no other context is already doing it. If someone got here ahead of us, we
1)	;don't need to send a credit_request, because our change is already reflected
1)	;in .CBPRC. And we don't want to send one, because we might try to queue the
1)	;same c.b. twice. Also, the second message would contain 0, so why bother? If
1)	;credit is still pending when the credit_response comes in, we'll send another
1)	;credit_request.
1)	
1)		SETOM T1		;Indicate credit_request is pending
LINE 15, PAGE 127
2)	;Racefree, indicate that we're setting up for a credit_request, and make
2)	;sure no other context is already doing it. If someone got here ahead of
2)	;us, we don't need to send a credit_request, because our change is already
2)	;reflected in .CBPRC. And we don't want to send one, because we might try
2)	;to queue the same c.b. twice. Also, the second message would contain 0,
2)	;so why bother? If credit is still pending when the credit_response comes
2)	;in, we'll send another credit_request.
2)	
2)		SETOM T1		;Indicate credit_request is pending


LINE 27, PAGE 153
1)		IFN. T1			;[8914] Message pending?
1)		  MOVE T1,.CBSBA(P1)	;Get address of system block
LINE 27, PAGE 127
2)		SKIPN T1
2)		IFSKP.
2)		  MOVE T1,.CBSBA(P1)	;Get address of system block


LINE 36, PAGE 153
1)		inconsistency, since the state was "open", and the interlock word for
1)		credit requests was 0.
1)	
1)	Action:	If this bug is reproducible, change it to a BUGHLT and submit an SPR
1)		with the dump and instructions for reproducing it.
1)	
1)	Data:	NODE  - Node number
LINE 37, PAGE 127
2)		inconsistency, since the state was "open", and the interlock word
2)		for credit requests was 0.
2)	
2)	Data:	NODE  - Node number


; SCAMPI.NEW.1 & <MONITOR>SCAMPI.MAC.1 31-Mar-89 2351	PAGE 22



LINE 53, PAGE 153
1)	SCC.RT:	RET
1)	^L;SC.GCB - Reclaim buffers according to return_credit field of connect block
LINE 51, PAGE 127
2)	SCC.RT:	
2)		RET
2)	^L;SC.GCB - Reclaim buffers according to return_credit field of connect block


LINE 35, PAGE 154
1)		reflects confusion about credit, since these buffers should have been
1)		queued at some time in the past.
1)	
1)	Action:	If this bug is reproducible, change it to a BUGHLT and submit an SPR
1)		with the dump and instructions for reproducing it.
1)	
1)	Data:	NODE  - Node number
LINE 35, PAGE 128
2)		reflects confusion about credit, since these buffers should have 
2)		been queued at some time in the past.
2)	
2)	Data:	NODE  - Node number


LINE 37, PAGE 160
1)	Cause:	This caller to SC.RQS provided a block state larger than the table (or
1)		zero).  The caller has a problem.
1)	
1)	Data:	NODE   - Node number
LINE 37, PAGE 133
2)	Cause:	This caller to SC.RQS provided a block state larger than the table 
2)		(or zero).
2)	
2)	Data:	NODE   - Node number


LINE 34, PAGE 164
1)	Action:	If this bug is reproducible, change it to a BUGHLT and submit an SPR
1)		with the dump and instructions for reproducing it.
1)	
1)	Data:	NODE   - Node number
LINE 34, PAGE 137
2)	Data:	NODE   - Node number


; SCAMPI.NEW.1 & <MONITOR>SCAMPI.MAC.1 31-Mar-89 2351	PAGE 23



LINE 13, PAGE 176
1)	Action:	If this bug is reproducible, change it to a BUGHLT and submit an SPR
1)		with the dump and instructions for reproducing it.
1)	
1)	Data:	COUNT  - count of buffers we believed we had
LINE 121, PAGE 146
2)	Data:	COUNT  - count of buffers we believed we had


LINE 10, PAGE 180
1)	Cause:	SCA went to create more buffers and discovered that the section is
1)		full.  This is an indication that buffers are not being returned.
1)	
1)	Action:	If this bug is reproducible, change it to a BUGHLT and submit an SPR
1)		with the dump and instructions for reproducing it.
1)	>)
LINE 89, PAGE 147
2)	Cause:	SCA went to create more buffers and discovered that the section
2)		is full. This is an indication that buffers are not being returned.
2)	>)


LINE 11, PAGE 191
1)	Cause:	A CION was done when no previous CIOFF had occurred. This leads to an
1)		overly-decremented lock.
1)	
1)	Action:	Send in an SPR along with instruction on reproducing the problem.
1)	
1)		If you are unable to determine how this happened, turn on the ring
1)		buffer tracing of interlocks. (Do this by setting RPITRN in RINGSW.)
1)		It should be possible to pair each CION with a preceding CIOFF.  Note
1)		that these calls are invoked from several CI-related modules.
1)	>)
LINE 44, PAGE 157
2)	Cause:	A CION was done when no previous CIOFF had occurred. This leads to
2)		an overly-decremented lock.
2)	
2)	Action:	If you are unable to determine how this happened, turn on the ring
2)		buffer tracing of interlocks. (Do this by setting RPITRN in RINGSW.)
2)		It should be possible to pair each CION with a preceding CIOFF.
2)		Note that these calls are invoked from several CI-related modules.
2)	>)


; SCAMPI.NEW.1 & <MONITOR>SCAMPI.MAC.1 31-Mar-89 2351	PAGE 24



LINE 38, PAGE 193
1)	Cause:	The routine to unlock a connection block found that the count is less
1)		than 1. Since the caller must have locked the connection block earlier,
1)		something unexpected has happened.
1)	>)
LINE 38, PAGE 159
2)	Cause:	The routine to unlock a connection block found that the count
2)		is less than 1. Since the caller must have locked the connection
2)		block earlier, something unexpected has happened.
2)	
2)	>)


LINE 9, PAGE 195
1)	Cause:	The routine to unlock a connection block has found an inconsistency in
1)		the lock count. Earlier in the routine, the current count was 1.  Now,
1)		after decrementing it, the count is not zero. Some other context must
1)		have changed it. This should not happen since the locker is NOSKED and
1)		interrupt level code doesn't change the lock.
1)	>)
LINE 90, PAGE 159
2)	Cause:	The routine to unlock a connection block has found an inconsistency
2)		in the lock count. Earlier in the routine, the current count was 1.
2)		Now, after decrementing it, the count is not zero. Some other context
2)		must have changed it. This should not happen since the locker is
2)		NOSKED and interrupt level code doesn't change the lock.
2)	>)


LINE 14, PAGE 198
1)	Cause:	The ring buffer overflowed and wrapped upon itself.  The entries at the
1)		top are being overwritten and will be lost.
1)	
1)	Action:	No action required, this bug is for information only.
1)	>)				;Report wraping of ring buffer
LINE 49, PAGE 161
2)	Cause:	The ring buffer overflowed and wrapped upon itself.
2)		The entries at the top are being overwritten and will be lost.
2)	>)				;Report wraping of ring buffer


; SCAMPI.NEW.1 & <MONITOR>SCAMPI.MAC.1 31-Mar-89 2351	PAGE 25



LINE 11, PAGE 199
1)	Action:	Send in an SPR along with instruction on reproducing the problem.
1)	
1)		Check the caller of SC.RHD to be sure that a valid event code is being
1)		placed in T3 before the call. The caller is indicated by the jacket
LINE 79, PAGE 161
2)	Action:	Check the caller of SC.RHD to be sure that a valid event code is being  
2)		placed in T3 before the call. The caller is indicated by the jacket 


LINE 12, PAGE 211
1)	Cause:	This is a coding problem. SC.BRK will be attempting to assign SCA
1)		buffers to the caller and being OKINT leaves a possible window where
1)		SCA buffers could be lost.
1)	
1)	Action:	If this bug is reproducible, change it to a BUGHLT and submit an SPR
1)		with the dump and instructions for reproducing it.
1)	
1)		Make the caller NOINT until it has returned the SCA buffers.
1)	
1)	Data:	PCC - PC of the calling routine
LINE 40, PAGE 172
2)	Cause:	This is a coding problem. SC.BRK will be attempting to assign
2)		SCA buffers to the caller and being OKINT leaves a possible window
2)		where SCA buffers could be lost.
2)	
2)	Action:	Make the caller NOINT until it has returned the SCA buffers.
2)	
2)	Data:	PCC - PC of the calling routine
