

; FREE.NEW.1 & <MONITOR>FREE.MAC.1 31-Mar-89 2331	PAGE 1



LINE 1, PAGE 1
1)	; Edit= 8937 to FREE.MAC on 23-Aug-88 by LOMARTIRE
1)	;Spell MONITR correctly in ACTION field of BUGs!
1)	; Edit= 8912 to FREE.MAC on 17-Aug-88 by LOMARTIRE
1)	;Improve BUG. documentation
1)	; Edit= 8833 to FREE.MAC on 20-Apr-88 by RASPUZZI (TCO 7.1278)
LINE 1, PAGE 1
2)	; Edit= 8833 to FREE.MAC on 20-Apr-88 by RASPUZZI (TCO 7.1278)


LINE 19, PAGE 7
1)	Action:	Look at the dump.  By backing up the stack you should be able to 
1)		tell what routine called for the illegal free space.
1)	>)
LINE 19, PAGE 7
2)	Action:	Look at the dump.  By backing up the stack you
2)		should be able to tell what routine called for the illegal
2)		free space.
2)	
2)	
2)	>)


LINE 32, PAGE 7
1)	Action:	If this BUG persists, make it dumpable and submit an SPR with the
1)		dump and a copy of MONITR.EXE.  If possible, include any known
1)		method for reproducing the problem and/or the state of the system
1)		at the time the BUG was observed.  The dump will show the routine
1)		which is calling OKINT.  Make the routine be NOINT until it has 
1)		ensured that the block will be freed when it is interrupted 
1)		(e.g. JSB stack).
1)	
1)	Data:	CALLER - The address of the calling routine
LINE 35, PAGE 7
2)	Action:	Make the routine be NOINT until it has ensured that the block will
2)		be freed when it is interrupted (e.g. JSB stack).
2)	
2)	Data:	CALLER -  The address of the calling routine


LINE 30, PAGE 10
1)		it could get interrupted and loose the block.  All free space actions 
1)		should occur while NOINT.
1)	
1)	Action:	If this BUG persists, make it dumpable and submit an SPR with the
1)		dump and a copy of MONITR.EXE.  If possible, include any known
1)		method for reproducing the problem and/or the state of the system
1)		at the time the BUG was observed.  The dump will show the routine
1)		which is calling OKINT.  Make it be NOINT when it removes the address

; FREE.NEW.1 & <MONITOR>FREE.MAC.1 31-Mar-89 2331	PAGE 2


1)		of the block about to be released from the database.  The routine
LINE 30, PAGE 10
2)		it could get interrupted and loose the block.  All
2)		free space actions should occur while NOINT.
2)	
2)	Action:	Make the calling routine become NOINT when it removes the address
2)		of the block about to be released from the database.  The routine


LINE 39, PAGE 11
1)	Action:	If this BUG persists, make it dumpable and submit an SPR with the
1)		dump and a copy of MONITR.EXE.  If possible, include any known
1)		method for reproducing the problem and/or the state of the system
1)		at the time the BUG was observed.  By looking at the stack you
1)		should be able to determine who called for the releasing
LINE 39, PAGE 11
2)	Action:	If the problem persists, change the CHK to a HLT and
2)		look through the dump.  By looking at the stack you
2)		should be able to determine who called for the releasing


LINE 62, PAGE 21
1)	>)
LINE 63, PAGE 21
2)	Action: Analyze the dump.
2)	
2)	>)


LINE 11, PAGE 31
1)		free space.  In T2 the caller is providing the pool number from 
1)		which the free space should come.  This pool number is incorrect.
1)	
1)	Action:	If this BUG persists, make it dumpable and submit an SPR with the
1)		dump and a copy of MONITR.EXE.  If possible, include any known
1)		method for reproducing the problem and/or the state of the system
1)		at the time the BUG was observed.
1)	>)
LINE 11, PAGE 31
2)		free space.  In T2 the caller is providing a pool number for where
2)		the free space should come from.  This pool number is incorrect.
2)	
2)	Action:	If the problem persists change the BUGCHK to a BUGHLT to find the
2)		culprit. The caller putting a bad value into T2.
2)	
2)	
2)	>)


; FREE.NEW.1 & <MONITOR>FREE.MAC.1 31-Mar-89 2331	PAGE 3



LINE 16, PAGE 32
1)	Action:	If this BUG persists, make it dumpable and submit an SPR with the
1)		dump and a copy of MONITR.EXE.  If possible, include any known
1)		method for reproducing the problem and/or the state of the system
1)		at the time the BUG was observed.
1)	>)
LINE 16, PAGE 32
2)	Action:	If the problem persists change the BUGCHK to a BUGHLT and look
2)		through the dump to find the caller.
2)	
2)	
2)	>)


LINE 8, PAGE 43
1)			BUG.(CHK,RESBAD,FREE,SOFT,<Illegal address passed to RELRES>,<<T1,BADADR>,<T2,CALLER>>,<
1)	
1)	Cause:	This is a free space problem.  The caller is trying to release some
1)		resident free space.  The address being specified is not a legal
1)		resident free space address.
1)	
1)	Action:	If this BUG persists, make it dumpable and submit an SPR with the
1)		dump and a copy of MONITR.EXE.  If possible, include any known
1)		method for reproducing the problem and/or the state of the system
1)		at the time the BUG was observed.  The dump will indicate the 
1)		caller which is providing the illegal address.  Find where the 
1)		caller gets the address and how that location gets modified.
1)	
1)	Data:	BADADR - the address given to the free space manager
LINE 8, PAGE 43
2)			BUG.(CHK,RESBAD,FREE,SOFT,<RELRES - Illegal address passed to RELRES>,<<T1,BADADR>,<T2,CALLER>>,<
2)	
2)	Cause:	This is a free space problem.  The caller is trying to release some
2)		resident free space.  The address being specified is not a legal
2)		resident free space address.
2)	
2)	Action:	If the problem persists change the BUGCHK to a BUGHLT and find the
2)		caller.  The caller is providing an illegal address.
2)		Find where the caller get the address and how that location gets
2)		modified.
2)	
2)	Data:	BADADR - the address given to the free space manager


; FREE.NEW.1 & <MONITOR>FREE.MAC.1 31-Mar-89 2331	PAGE 4



LINE 9, PAGE 45
1)	Action:	If this BUG persists, make it dumpable and submit an SPR with the
1)		dump and a copy of MONITR.EXE.  If possible, include any known
1)		method for reproducing the problem and/or the state of the system
1)		at the time the BUG was observed.
1)	
1)	Data:	BADADR - the address given to the free space manager
LINE 9, PAGE 45
2)	Action:	If the problem persists change the BUGCHK to a BUGHLT.
2)	
2)	Data:	BADADR - the address given to the free space manager


LINE 28, PAGE 61
1)	Data:	POOLN  - Pool number
1)		CALRPC - PC of caller of ASGFSP
1)	>)
LINE 28, PAGE 61
2)	Data:	POOLN		Pool number
2)		CALRPC		PC of caller of ASGFSP
2)	>)


LINE 66, PAGE 64
1)		the pool size must be increased and the monitor rebuilt.  The pool
1)		size is specified in STG.MAC as the third argument in the FSPPL. 
1)		macro used to build the freespace pools.
1)	
1)	Data:	POOLN - Freespace pool number
LINE 66, PAGE 64
2)		the pool size must be increased and the monitor rebuilt.
2)	
2)	Data:	POOLN - Freespace pool number


LINE 25, PAGE 65
1)		it could get interrupted and loose the block.  All free space actions 
1)		should occur while NOINT.
1)	
1)	Action:	The data supplied gives the address of the calling routine.  Make
1)		the routine become NOINT when it removes the address of the block
1)		about to be released from the database.  The routine can be made 
1)		OKINT when control is returned to it.
1)	
1)	Data:	POOLN  - Pool number
LINE 26, PAGE 65
2)		it could get interrupted and loose the block.  All
2)		free space actions should occur while NOINT.
2)	

; FREE.NEW.1 & <MONITOR>FREE.MAC.1 31-Mar-89 2331	PAGE 5


2)	Action:	The data supplied gives the address of the calling routine.  Make
2)		the routine become NOINT when it removes the address of the block
2)		about to be released from the database.  The routine
2)		can be made OKINT when control is returned to it.
2)	
2)	Data:	POOLN - Pool number


LINE 82, PAGE 66
1)	Data:	POOLN  - Pool number
1)		CALRPC - PC of caller of RELFSP
1)		BLKADR - Address of user block
1)	>)
LINE 82, PAGE 66
2)	Data:	POOLN		Pool number
2)		CALRPC		PC of caller of RELFSP
2)		BLKADR		Address of user block
2)	
2)	
2)	>)


LINE 65, PAGE 73
1)	Data:	POOLN  - Pool number
LINE 66, PAGE 73
2)		If the problem persists, change the BUGCHK to a BUGHLT and analyze the 
2)		dump.
2)	
2)	
2)	Data:	POOLN - Pool number


LINE 88, PAGE 73
1)	Data:	POOLN  - Pool number
LINE 93, PAGE 73
2)		If the problem persists, change the BUGCHK to a BUGHLT and analyze the 
2)		dump.
2)	
2)	
2)	Data:	POOLN - Pool number


LINE 65, PAGE 74
1)	Data:	POOLN  - Pool number
1)		BLKADR - Address of the block containing the bad pointer.
1)		NXTPTR - The bad pointer
1)	>)
LINE 66, PAGE 74
2)	Action:	Analyze the Dump.
2)	
2)	

; FREE.NEW.1 & <MONITOR>FREE.MAC.1 31-Mar-89 2331	PAGE 6


2)	Data:	POOLN		Pool number
2)		BLKADR		Address of the block containing the bad pointer.
2)		NXTPTR		The bad pointer
2)	>)


LINE 81, PAGE 74
1)	Data:	POOLN  - Pool number
1)		BLKADR - Address of the current block.
1)	>)
LINE 88, PAGE 74
2)	Action:	If the problem persists, change the BUGCHK to a BUGHLT and analyze the 
2)		dump.
2)	
2)	
2)	Data:	POOLN		Pool number
2)		BLKADR		Address of the current block.
2)	>)


LINE 93, PAGE 74
1)	Data:	POOLN  - Pool number
1)		BLKADR - Address of the block
1)	>)
LINE 105, PAGE 74
2)	Action:	Analyze the Dump.
2)	
2)	
2)	Data:	POOLN		Pool number
2)		BLKADR		Address of the block.
2)	>)


LINE 55, PAGE 75
1)	Action:	If this BUG persists, make it dumpable and submit an SPR with the
1)		dump and a copy of MONITR.EXE.  If possible, include any known
1)		method for reproducing the problem and/or the state of the system
1)		at the time the BUG was observed.  Use the dump to examine the 
1)		calling routine and fix it to supply a valid pool number.
1)	
1)	Data:	POOLN  - Pool number
LINE 55, PAGE 75
2)	Action:	Examine the calling routine and fix it to supply a valid pool
2)		number.
2)	
2)	Data:	POOLN - Pool number
