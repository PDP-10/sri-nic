

; JSYSA.MAC.1 & <MONITOR>JSYSA.MAC.3 24-Feb-89 1722	PAGE 1



LINE 1, PAGE 1
1)	;[MACBETH.STANFORD.EDU]SRC:<7.FT2.MONITOR.STANFORD>JSYSA.MAC.2,  7-Apr-88 17:23:30, Edit by A.APPLEHACKS
1)	; FT7.2 Merge - Note well MEXEC/JSYSA/JSYSM code rearrangement
1)	;
1)	; UPD ID= 8649, RIP:<7.MONITOR>JSYSA.MAC.18,  18-Feb-88 15:33:19 by RASPUZZI
LINE 1, PAGE 1
2)	;[SRI-NIC]SRC:<MONITOR>JSYSA.MAC.2, 14-Nov-88 15:03:06, Edit by MKL
2)	; v7 merge
2)	;[SRI-NIC]XS:<SU-61SU>JSYSA.MAC.2,  5-Dec-86 14:57:18, Edit by MKL
2)	;;[SRI-NIC]SS:<6-1-MONITOR>JSYSA.MAC.8, 15-Nov-85 15:47:18, Edit by MKL
2)	;;change password delay stuff at PASPEN
2)	;;SS:<6-1-MONITOR>JSYSA.MAC.4, 28-Oct-85 16:49:50, Edit by KNIGHT
2)	;; ERRMES: instead of SYSTEM:ERRMES.BIN (and no GJ%PHY)
2)	;<6-1-MONITOR>JSYSA.MAC.3, 29-Sep-85 19:42:24, Edit by WHP4
2)	; don't log out jobs for excessive password failures if they have
2)	; wheel or operator privileges (don't need to be enabled, just present)
2)	;<6-1-MONITOR.FT6>JSYSA.MAC.2, 12-Aug-85 17:07:53, Edit by WHP4
2)	;Stanford changes:
2)	; Make CHKPSX more paranoid about garbage at the end of strings
2)	; Make sure ACJ had sometime to do before timing it out at RCVCH7
2)	
2)	; Edit= 8850 to JSYSA.MAC on 31-May-88 by RASPUZZI
2)	;Add code to do the TMON% version of .SFSEA and .SFLTS. Also, teach INFO% how
2)	;it must handle ethernet addresses for .SFSEA between remote systems.
2)	; Edit= 8821 to JSYSA.MAC on 7-Apr-88 by RASPUZZI
2)	;Fix oversight in edit 7251. Mainly, restore class in T3 before calling
2)	;CPYCSH.
2)	; UPD ID= 8649, RIP:<7.MONITOR>JSYSA.MAC.18,  18-Feb-88 15:33:19 by RASPUZZI


LINE 21, PAGE 1
1)	;[MACBETH]SRC:<7.FT1.MONITOR.STANFORD>JSYSA.MAC.2,  6-Feb-88 14:05:57, Edit by A.APPLEHACKS
1)	; FT7 Merge
1)	;
1)	;SIERRA::SRC:<6.1.MONITOR.STANFORD>JSYSA.MAC.11, 17-Jan-87 14:05:04, Edit by GROSSMAN
1)	;Put in Dave Edwards NTINF fix for bad job numbers.
1)	;Also, put in Bjorn Victors ADBRK% fix.
1)	;[OTHELLO.STANFORD.EDU]DEV:<MONITOR.STANFORD>JSYSA.MAC.9,  3-Dec-86 15:24:12, Edit by A.ALDERSON
1)	;Delete LOTS Job-Slot Queue stuff
1)	;SIERRA::SRC:<6.1.MONITOR.STANFORD>JSYSA.MAC.7, 23-Oct-86 13:37:32, Edit by GROSSMAN
1)	;Add Paul Hegarty's non-PS login stuff
1)	;
1)	; UPD ID= 281, RIP:<7.MONITOR>JSYSA.MAC.11,  10-Nov-87 17:07:18 by MCCOLLUM
LINE 39, PAGE 1
2)	; UPD ID= 281, RIP:<7.MONITOR>JSYSA.MAC.11,  10-Nov-87 17:07:18 by MCCOLLUM


; JSYSA.MAC.1 & <MONITOR>JSYSA.MAC.3 24-Feb-89 1722	PAGE 2



LINE 85, PAGE 1
1)	;------------------------- Autopatch Tape # 13 -------------------------
1)	; *** Edit 7236 to JSYSA.MAC by GRANT on 5-Feb-86, for SPR #21080
1)	; Fix incorrect node name in USAGE% tape mount entry header record 
1)	;------------------------- Autopatch Tape # 12 -------------------------
1)	; Edit 7173 to JSYSA.MAC by PALMIERI on 23-Oct-85 (TCO 6.1.1542)
LINE 92, PAGE 1
2)	; *** Edit 7236 to JSYSA.MAC by GRANT on 5-Feb-86, for SPR #21080
2)	; Fix incorrect node name in USAGE% tape mount entry header record 
2)	; Edit 7173 to JSYSA.MAC by PALMIERI on 23-Oct-85 (TCO 6.1.1542)


LINE 98, PAGE 1
1)	;[LOTSA]DEV:<MONITOR.LOTS>JSYSA.MAC.2,  7-Nov-85 13:28:41, Edit by A.ALDERSON
1)	; Add .SFLTQ functionality for LOTS Job-Slot Queue (temporary hack)
1)	;<6-1-MONITOR>JSYSA.MAC.3, 29-Sep-85 19:42:24, Edit by WHP4
1)	; don't log out jobs for excessive password failures if they have
1)	; wheel or operator privileges (don't need to be enabled, just present)
1)	;<6-1-MONITOR.FT6>JSYSA.MAC.2, 12-Aug-85 17:07:53, Edit by WHP4
1)	;Stanford changes:
1)	; GTDIR% is unprivileged at LOTS
1)	; Make CHKPSX more paranoid about garbage at the end of strings
1)	; Make sure ACJ had sometime to do before timing it out at RCVCH7
1)	; Release PKOPR% resources on a RESET%
1)	;Pup changes:
1)	; DIBE%, DOBE%, SOBE%, SOBF% work for Pup JFNs
1)	; SMON% functions
1)	;
1)	; UPD ID= 2277, SNARK:<6.1.MONITOR>JSYSA.MAC.174,  25-Jun-85 14:24:33 by LEACHE
LINE 103, PAGE 1
2)	; UPD ID= 2277, SNARK:<6.1.MONITOR>JSYSA.MAC.174,  25-Jun-85 14:24:33 by LEACHE


LINE 25, PAGE 11
1)	PASPEN::MOVEI T1,^D3000		;3 sec. delay
1)		DISMS%			;Sit it out
LINE 25, PAGE 11
2)	PASPEN::
2)	IFE NICSW,<
2)	MOVEI T1,^D3000		;3 sec. delay
2)	>
2)	IFN NICSW,<
2)	MOVEI T1,^D1000		;1 sec. delay
2)	>
2)		DISMS%			;Sit it out


; JSYSA.MAC.1 & <MONITOR>JSYSA.MAC.3 24-Feb-89 1722	PAGE 3



LINE 5, PAGE 26
1)	IFE STANSW,<
1)		NOSKED			;KEEP HARDWARE AND PSB DATA IN SYNCH
LINE 5, PAGE 26
2)		NOSKED			;KEEP HARDWARE AND PSB DATA IN SYNCH


LINE 10, PAGE 26
1)	>;End of IFE STANSW
1)		CALL SETLFX		;Map PSB and check for execute-only
LINE 9, PAGE 26
2)		CALL SETLFX		;Map PSB and check for execute-only


LINE 17, PAGE 26
1)	IFN STANSW,<
1)		CAIN P1,.FHSLF		;CLEARING OUR OWN BREAKS?
1)		JSP T4,CLRBRK		;YES. CLEAR BREAK CONDITIONS IN HARDWARE
1)		MOVE T1,P1		;RESTORE THE FORK HANDLE
1)	>;End of IFN STANSW
1)	IFE STANSW,<
1)		OKSKED			;BREAK CLEARED IN HARDWARE AND PSB
1)	>;End of IFE STANSW
1)		CALL CLRLFK		;UNMAP PSB
LINE 15, PAGE 26
2)		OKSKED			;BREAK CLEARED IN HARDWARE AND PSB
2)		CALL CLRLFK		;UNMAP PSB


LINE 8, PAGE 45
1)	IFE STANSW&PUPSW,<
1)		 JRST MRETN
1)	>;IFE STANSW&PUPSW
1)	IFN STANSW&PUPSW,<
1)		IFNSK.
1)		  CALL PUDIBE		;CHECK FOR DIBE ON PUP JFN (PUP:SOCKET-NBR)
1)		  JRST MRETN		;HERE IF PUP JFN WHEN INPUT BFR EMPTY
1)		ENDIF.
1)	>;IFN STANSW&PUPSW
1)		CALL LCKTTY		;POINT TO DYNAMIC DATA, PREVENT DEALLOCATION
LINE 8, PAGE 45
2)		 JRST MRETN
2)		CALL LCKTTY		;POINT TO DYNAMIC DATA, PREVENT DEALLOCATION


; JSYSA.MAC.1 & <MONITOR>JSYSA.MAC.3 24-Feb-89 1722	PAGE 4



LINE 8, PAGE 47
1)	IFE STANSW&PUPSW,<
1)		 JRST MRETN
1)	>;IFE STANSW&PUPSW
1)	IFN STANSW&PUPSW,<
1)		IFNSK.
1)		  CALL PUDOBE		;CHECK FOR DOBE ON PUP JFN (PUP:SOCKET-NBR)
1)		  JRST MRETN		;NOT PUP OR DISMISS DONE
1)		ENDIF.
1)	>;IFN STANSW&PUPSW
1)		CALL LCKTTY		;POINT TO DYNAMIC DATA, PREVENT DEALLOCATION
LINE 8, PAGE 47
2)		 JRST MRETN
2)		CALL LCKTTY		;POINT TO DYNAMIC DATA, PREVENT DEALLOCATION


LINE 34, PAGE 48
1)		HRROI 2,[ASCIZ /SYSTEM:ERRMES.BIN/]
1)		MOVSI 1,(GJ%OLD!GJ%PHY!GJ%SHT)
1)		GTJFN			; Get jfn for error mnemonics
LINE 34, PAGE 48
2)	IFE NICSW,<
2)		HRROI 2,[ASCIZ /SYSTEM:ERRMES.BIN/]
2)		MOVSI 1,(GJ%OLD!GJ%PHY!GJ%SHT)
2)	>;IFE NICSW
2)	IFN NICSW,<
2)		HRROI 2,[ASCIZ /ERRMES:/]
2)		MOVSI 1,(GJ%OLD!GJ%SHT)
2)	>;IFN NICSW
2)		GTJFN			; Get jfn for error mnemonics


LINE 20, PAGE 79
1)	IFE STANSW&LOTSW,<
1)		MOVX B,DC%CN		;SEE IF USER HAS OWNER ACCESS TO DIR
LINE 20, PAGE 79
2)		MOVX B,DC%CN		;SEE IF USER HAS OWNER ACCESS TO DIR


LINE 34, PAGE 79
1)	>;IFE STANSW&LOTSW
1)		SETO P1,		;MARK ONLY LIMITED ACCESS
LINE 33, PAGE 79
2)		SETO P1,		;MARK ONLY LIMITED ACCESS


; JSYSA.MAC.1 & <MONITOR>JSYSA.MAC.3 24-Feb-89 1722	PAGE 5



LINE 9, PAGE 136
1)	IFN STANSW,<
1)		CALL PKOKFK		;RELEASE PKOPR% RESOURCES
1)	>;IFN STANSW
1)		JRST MRETN
LINE 9, PAGE 136
2)		JRST MRETN


LINE 39, PAGE 159
1)	SMON2:
1)	IFN STANSW,<
1)		TRZE T1,1B18		;DOES THE FUNCTION CODE HAVE 1B18 SET?
1)		 JRST SMON3		;YES, POSSIBLY A LOCAL SMON% FUNCTION
1)	>;IFN STANSW
1)		CAILE T1,^D35+NSMON2	;IS IT TOO BIG A CODE?
1)	SMONER:	ITERR(SMONX2)		;YES, RETURN FAILURE
LINE 39, PAGE 159
2)	SMON2:	CAILE T1,^D35+NSMON2	;IS IT TOO BIG A CODE?
2)	SMONER:	ITERR(SMONX2)		;YES, RETURN FAILURE


LINE 54, PAGE 159
1)	IFN STANSW,<
1)	SMON3:	CAILE T1,NSMON3		;IS IT TOO BIG A CODE?
1)		 JRST SMONER		;YES, RETURN FAILURE
1)		LSH T1,1		;DOUBLE THE CODE
1)		UMOVE T2,2		;GET USER'S VALUE FOR THE FUNCTION
1)		SKIPE T2		;IF ZERO, DO EVEN DISPATCH
1)		 TRO T1,1		;IF NONZERO, DO ODD DISPATCH
1)		XCT SMON3T(T1)		;DO THE FUNCTION
1)		MRETNG			;RETURN TO USER
1)	
1)	;TABLE FOR STANFORD SMON FUNCTIONS (MOSTLY PUP)
1)	
1)	SMON3T:
1)	IFN PUPSW,<
1)		CALL NTDINI		;CODE 0, INITIALIZE PUP DIRECTORY
1)		CALL NTDINI		;CODE 0, INITIALIZE PUP DIRECTORY
1)		CALL SETRTE		;CODE 1, SET PUP ROUTING TABLE ENTRY
1)		CALL SETRTE		;CODE 1, SET PUP ROUTING TABLE ENTRY
1)		SETZM PUPBGF		;CODE 2, DISABLE PUP BUG LOGGING
1)		SETOM PUPBGF		;CODE 2, ENABLE PUP BUG LOGGING
1)		CALL SETGAT		;CODE 3, DISABLE GATEWAY PROCESSING
1)		CALL SETGAT		;CODE 3, ENABLE GATEWAY PROCESSING
1)		CALL SETPUP		;CODE 4, DISABLE PUP ETHERNET
1)		CALL SETPUP		;CODE 4, ENABLE PUP ETHERNET
1)	>;IFN PUPSW
1)	NSMON3==<.-SMON3T>/2		;LENGTH OF STANFORD SMON% TABLE

; JSYSA.MAC.1 & <MONITOR>JSYSA.MAC.3 24-Feb-89 1722	PAGE 6


1)	>;IFN STANSW
   {Skipped 1 page and 1 line}
1)	;TABLE FOR SMON FUNCTION CODES .GE. 36
LINE 1, PAGE 160
2)	;TABLE FOR SMON FUNCTION CODES .GE. 36


LINE 18, PAGE 186
1)	IFE STANSW&PUPSW,<
1)		 JRST SOBE1
1)	>;IFE STANSW&PUPSW
1)	IFN STANSW&PUPSW,<
1)		IFNSK.
1)		  CALL PUSOBE		;CHECK FOR SOBE ON PUP JFN (PUP:SOCKET-NBR)
1)		   JRST SOBE1		;EMPTY OR NOT A PUP JFN
1)		  UMOVEM A,B		;NOT EMPTY, RETURN CHAR COUNT TO USER
1)		  JRST EMRET1		;AND RETURN +1
1)		ENDIF.
1)	>;IFN STANSW&PUPSW
1)		CALL LCKTTY		;POINT TO DYNAMIC DATA, PREVENT DEALLOCATION
LINE 18, PAGE 186
2)		 JRST SOBE1
2)		CALL LCKTTY		;POINT TO DYNAMIC DATA, PREVENT DEALLOCATION


LINE 19, PAGE 187
1)	IFE STANSW&PUPSW,<
1)		JRST [	SETZ A,		;NOT A TERMINAL. RETURN COUNT OF 0
1)			JRST SOBF1]
1)	>;IFE STANSW&PUPSW
1)	IFN STANSW&PUPSW,<
1)		IFNSK.
1)		  CALL PUSBF		;CHECK FOR SOBF ON PUP JFN (PUP:SCOKET-NBR)
1)		   JRST SOBF1		;NOT FULL OR JFN IS BAD, T1/ BYTE COUNT
1)		  UMOVEM A,B		;HERE IF PUP JFN AND FULL, RETURN CNT TO USER
1)		  SMRETN		;RETURN +2
1)		ENDIF.
1)	>;IFN STANSW&PUPSW
1)		CALL LCKTTY		;POINT TO DYNAMIC DATA, PREVENT DEALLOCATION
LINE 19, PAGE 187
2)		JRST [	SETZ A,		;NOT A TERMINAL. RETURN COUNT OF 0
2)			JRST SOBF1]
2)		CALL LCKTTY		;POINT TO DYNAMIC DATA, PREVENT DEALLOCATION


; JSYSA.MAC.1 & <MONITOR>JSYSA.MAC.3 24-Feb-89 1722	PAGE 7



LINE 25, PAGE 199
1)		ITERR (TMONX1)		;[7.1063]72 - Not defined
1)		ITERR (TMONX1)		;[7.1063]73 - Not defined
1)		ITERR (TMONX1)		;[7.1063]74 - Not defined
1)		MOVE T1,CLUSET		;[7.1076]75 - Get CLUDGR SYSYAP status
LINE 25, PAGE 199
2)		JRST GETNIA		;[8850] 72 - Get ethernet address
2)		ITERR (TMONX1)		;[7.1063]73 - Not defined
2)	IFN LAHFLG <			;[8850] If LAT code assembled in
2)		MOVE T1,LASDEF		;[8850] 74 Get LAT state
2)	>;End of IFN LAHFLG		;[8850]
2)	IFE LAHFLG <			;[8850] If no LAT code
2)		ITERR (TMONX1)		;[8850] 74 - Not defined if no LAT
2)	>;End if IFE LAHFLG		;[8850]
2)		MOVE T1,CLUSET		;[7.1076]75 - Get CLUDGR SYSYAP status


LINE 1, PAGE 201
1)	^L	SUBTTL UTEST JSYS
LINE 1, PAGE 201
2)	^L	SUBTTL TMON JSYS - Get ethernet address
2)	;[8850]
2)	;GETNIA - Routine to pass on to the user the 6 ethernet bytes.
2)	;
2)	; Called with:
2)	;
2)	;	User T3/ Byte pointer to put ethernet address
2)	;	XCT TMON2T(.SFSEA)
2)	;
2)	; Returns:
2)	;
2)	;	To user - Always with updated byte pointer in user space
2)	
2)	MAXCH==^D17			;Number of characters in the ethernet address string
2)	
2)	GETNIA:	XCTU [SKIPE T2]		;User give us channel 0 (the only channel)?
2)		ITERR (NIENSC)		;No, bad channel number
2)		SAVEQ			;These get used
2)		STKVAR <USERBP,<STRING,4>,COUNT> ;Temp storage
2)		UMOVE T1,T3		;Get user's byte pointer
2)		TLC T1,-1		;Check source pointer
2)		TLCN T1,-1		;Was a -1 in left half?
2)		HRLI T1,(POINT 7,)	;Yes, make the usual byte pointer
2)		MOVEM T1,USERBP		;Save for later useage
2)		DMOVE Q2,ETHADR		;Get our ethernet address
2)		HRRI T1,STRING		;Set up T1 with our byte pointer
2)		HRLI T1,(POINT 7,)	;Make 7-bit byte pointer
2)		SETZM COUNT		;Start at 0
2)		DO.			;Loop to get each character

; JSYSA.MAC.1 & <MONITOR>JSYSA.MAC.3 24-Feb-89 1722	PAGE 8


2)		  AOS T3,COUNT		;Our character number
2)		  CAILE T3,MAXCH	;Have we reached our max?
2)		  EXIT.			;Yes we have
2)		  SETZ Q1,		;Character is going to go here
2)		  IDIVI T3,3		;Every third character is a separator
2)		  IFE. T4		;Are we on the third character?
2)	IFE NICSW,<
2)		    MOVEI Q1,.CHDAS	;If third character, then we want a dash
2)	>
2)	IFN NICSW,<
2)		    MOVEI Q1,"-"	;If third character, then we want a dash
2)	>
2)		  ELSE.			;Else, we get a real byte from ethernet address
2)		    LSHC Q1,4		;Get a byte in the right AC
2)		    LSHC Q2,4		;Move other bytes into useful position
2)		    CAIGE Q1,^D10	;Are we in character range?
2)		    IFSKP.		;If so,
2)		      ADDI Q1,71	;Make it the right character
2)		    ELSE.		;Else,
2)		      ADDI Q1,60	;Make it a number
2)		    ENDIF.
2)		  ENDIF.
2)		  IDPB Q1,T1		;Save character in our holding cell
2)		  LOOP.			;Go back for more characters
2)		OD.			;Have put in all of the characters
2)		MOVEI Q1,.CHNUL		;End string with a null
2)		IDPB Q1,T1		;And make sure it gets in there
2)		MOVE T1,USERBP		;Get user byte pointer
2)		MOVEI T2,STRING		;String starts here in monitor space
2)		SOS T2			;And of course, CPYTU1 wants this 1 less
2)		MOVEI T3,3		;Put updated pointer into user's AC 3
2)		CALL CPYTU1		;(T1,T2,T3/) Now give the string to the user
2)		MRETNG			;And done
2)	
2)	^L	SUBTTL UTEST JSYS


LINE 31, PAGE 211
1)		CALL CPYCSH		;SAVE ACCT AND EXP DATE IN JSB CACHE
LINE 31, PAGE 212
2)		MOVE T3,VERCLS		;[8821] Restore class
2)		CALL CPYCSH		;SAVE ACCT AND EXP DATE IN JSB CACHE
