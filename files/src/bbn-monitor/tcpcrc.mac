; UPD ID= 2722, SNARK:<6.MONITOR>TCPCRC.MAC.2,  22-Jul-83 14:56:25 by PAETZOLD
;TCO 6.1733 - Merge TCP/IP changes in release 6 again
;<TCPIP.5.1.MONITOR>TCPCRC.MAC.5,  5-Jul-83 08:29:52, Edit by PAETZOLD
;TCP Changes for 5.1



;THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY ONLY BE USED
;  OR COPIED IN ACCORDANCE WITH THE TERMS OF SUCH LICENSE.
;
;COPYRIGHT (C) 1982,1983,1984,
;BY DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.

	SEARCH	ANAUNV,PROLOG
	TTITLE	TCPCRC
	SUBTTL	Cyclic Redundancy Check Routines
	SWAPCD

COMMENT !

These  routines  implement the checksumming function for the IP
header  and  for  the  TCP.  Two  versions  are  provided:  a  "one's
complement sum" and a CRC. The runtime  cell  CRCF  may  be  used  to
select  CRC  if  it  is set non-zero. The prototype CRC routines were
supplied by Dave Reed at MIT-ML.

N.B.

ACs  PTR,  CNT,  and SUM are used globally within this file. They are
assigned from the local ACs area so  the  will  be  saved  by  called
routines. They are preserved for callers. SUM must be T4+1 .

These  routines  are  highly  dependent  on the PACKET definitions in
ANAUNV.MAC.

!

repeat 0,<
%CRC==0			; Set non-zero to assemble in the CRC code
IFN %CRC,<CRCF:	0>	; Set non-zero to use CRC

IF1 <
; AC redefinitions:

SUM=1+T4		; Holds CRC or ordinary sum
BAS=Q2			; Extended address of data
CNT=Q3			; Holds byte count during CRC
PTR=P1			; Holds byte pointer into packet during CRC
>
> ; End of repeat 0

IF1 <
; AC redefinitions

SUM==T1		; Sum, value returned
TMP==T2		; Argument, to be added to SUM
BAS==T3		; Argument, ext. adr. of first byte (maybe pseudo byte pointer)
CNT==T4		; Argument, number of bytes to be summed, becomes # words
REM==T4+1	; # odd bytes (0 means 4)
INST==Q2	; Instruction to be executed to get next (4) bytes
EXTI==Q3	; Extended instruction to be executed to get next (4) bytes
PTR==P1		; Byte pointer for INST
>

; Macro to contruct a byte pointer to a structure field:

DEFINE .POINT(STR,Y)<
	..STR0(...PT,,STR,Y)>
	DEFINE ...PT(AC,LOC,MSK)<
		POINTR(LOC,MSK)	>

; Symbol which is all ones in a right justified field which is the
;  width of the checksum field

CKSMSK==PICKS_-<^D35-POS(PICKS)>

IFN WID(PTCKS)-WID(PICKS),<PRINTX ? Code assumes PTCKS and PICKS are the same width>
IFN WID(CMCKS)-WID(PICKS),<PRINTX ? Code assumes PCCKS and PICKS are the same width>

; Keep these resident for speed of access
	RESCD

;TCPCKS	Returns number for TCP checksum

;PKT/	Extended pointer to packet
;TPKT/	Extended pointer to TCP header of packet
;	CALL TCPCKS
;Ret+1:	Always.  Number for TCP header checksum field in T1

TCPCKS::
MNTM5	AOS CELL(TCCAA,4,,TCC)	; TCPCKS calls
	LOAD T2,IPSH,+PKTELI(PKT)	; Source address
	LOAD T1,IPDH,+PKTELI(PKT)	; Destination address
	ADD T2,T1
	LOAD T1,IPPRO,+PKTELI(PKT)	; Protocol
	ADD T2,T1
	LOAD T1,IPDO,+PKTELI(PKT)	; # words in IP header
	LSH T1,2			; Bytes in IP header
	LOAD CNT,IPPL,+PKTELI(PKT)	; # bytes in packet
	SUB CNT,T1		; TCP bytes to checksum
	ADD T2,CNT		; Checksum of TCP pseudo header
	XMOVEI BAS,(TPKT)	; Address of TCP header
	CALLRET GENCKS		; Compute checksum


;GENCKU	General checksum routine, previous address space

;T2/	Initial sum, if any, or 0
;T3/	Extended address of first byte
;T4/	Length, bytes
;	CALL GENCKU
;Ret+1:	Always, T1/ 16-bit checksum

GENCKU::			; Data is in previous (user) address space
MNTM5	AOS CELL(TCCAA,1,,TCC)	; GENCKU calls
	ADJSP P,4		; Save regs
	DMOVEM T4+1,-3(P)
	DMOVEM T4+3,-1(P)
	DMOVE INST,[	XCTBU INST+1
			ILDB T2,PTR]
	JRST COMCKS		; Join common code

;GENCKS	General checksum routine, current address space

;T2/	Initial sum, if any, or 0
;T3/	Extended address of first byte
;T4/	Length, bytes
;	CALL GENCKS
;Ret+1:	Always, T1/ 16-bit checksum

GENCKS::			; Data is in current (monitor) address space
MNTM5	AOS CELL(TCCAA,1,,TCC)	; GENCKS calls
	ADJSP P,4		; Save regs
	DMOVEM T4+1,-3(P)
	DMOVEM T4+3,-1(P)
	MOVE INST,[	ILDB T2,PTR]
COMCKS:
	MOVX PTR,<POINT 32,(BAS)>
	SETZ T1,		; For the sum
	IFG. CNT		; Make sure there is some data to be summed
	  IDIVI CNT,4		; # 32-bit words
	  SKIPE CNT+1		; Any odd bytes?
	    ADDI CNT,1		; Yes, get word containing them also
	  DO.			; T2 has initial sum
	    ADD T1,T2		; Add next word to checksum
	    IFL. T1		; Overflow?
	      LDB T2,[POINT 20,T1,19] ; Yes, get overflow bits
	      ANDI T1,177777	; Remove them from sum
	      ADD T1,T2		; Fold them into sum
	    ENDIF.
	    XCT INST		; Get bits from next word
	    SOJG CNT,TOP.	; Back for next (partial) word
	  ENDDO.
	  AND T2,[	BYTE (4)0(8)-1,-1,-1,-1	; 4 valid bytes
			BYTE (4)0(8)-1,0,0,0	; 1 valid byte
			BYTE (4)0(8)-1,-1,0,0	; 2 valid bytes
			BYTE (4)0(8)-1,-1,-1,0	; 3 valid bytes
		](CNT+1)	; Valid bytes in last word
	ENDIF.
	ADD T1,T2		; Final sum
	DO.
	  LDB T2,[POINT 20,T1,19] ; Yes, get overflow bits
	  ANDI T1,177777	; Remove them from sum
	  ADD T1,T2		; Fold them into sum
	  CAILE T1,177777	; Down to 16 bits?
	    LOOP.		; Not yet
	ENDDO.
	IFN. T1			; Sum non-zero?
	  XORI T1,177777	; Yes, 1-s complement it
	ENDIF.
	DMOVE T4+1,-3(P)	; Restore registers
	DMOVE T4+3,-1(P)
	ADJSP P,-4
	RET

repeat 0,<
;INTCKS(PKT)
;Compute Value for IP Checksum Field

;PKT/	Extended Pointer Packet
;	CALL INTCKS
;Ret+1:	Always.
;T1 has the checksum for the IP header

INTCKS::
MNTM5	AOS CELL(TCCAA,2,,TCC)	; INTCKS calls
	PUSH P,PTR		; Save ACs we will use as globals
	PUSH P,CNT
	PUSH P,BAS
	PUSH P,SUM
IFN %CRC,<
	SKIPN CRCF		; Use CRC or Old 1's comp?
	 JRST INTADD		; Use additive function

; Compute CRC for IP header

INTCRC:	MOVX SUM,-1B<WID(PICKS)-1>	; Init sum to all 1's
	MOVE PTR,[POINT 32,PKTELI(PKT)]	; Start at beginning of IN part
	LOAD CNT,PIDO,(PKT)	; Number of 32-bit words to do
	CALL CRC32		; Process that many 32-bit bytes
	MOVE T1,SUM		; Get left-justified result
	LSH T1,-<^D36-WID(PICKS)>; Right justify it
	JRST INTCKX
>

; 1's complement additive checksum calculation for IP header

INTADD:	MOVEI SUM,0		; Init the sum
	MOVE PTR,[POINT 32,PKTELI(PKT)]	; Point to IN hdr
	LOAD CNT,PIDO,(PKT)	; Number of 32-bit words to do
	CALL ADDSUM		; Add those in
	CALL FIXSUM		; Handle extra carries
	CAIE SUM,0		; Avoid complementing a +0
         XORI SUM,CKSMSK       	; Return complement of the sum
INTCKX:	MOVE T1,SUM		; Return value
	POP P,SUM		; Restore caller's ACs
	POP P,BAS
	POP P,CNT
	POP P,PTR
	RET

;GENCKS	General checksum routine

;T1/	Length, bytes
;T2/	Extended address of first byte
;T3/	Initial sum, if any, or 0
;	CALL GENCKS
;Ret+1:	Always, T1/ 16-bit checksum

	SETZ T3,		; Zero initial sum
GENCKS::
MNTM5	AOS CELL(TCCAA,1,,TCC)	; GENCKS calls
	PUSH P,PTR		; Save ACs we will use as globals
	PUSH P,CNT
	PUSH P,BAS
	PUSH P,SUM

IFN %CRC,<PRINTX ? Fix GENCKS[TCPCRC] for CRC checksum>

	MOVE BAS,T2		; Extended address of first byte
	MOVX PTR,<POINT 32,0(BAS)> ; Get 32-bit bytes
	MOVE SUM,T3		; May have additional for sum
	IDIVI T1,^D<36/8>	; Number of full words
	PUSH P,T2		; Number of bytes in last word
	SKIPE CNT,T1		; Set count of 32-bit words
	  CALL UADDSU		; Add in the data
	POP P,CNT		; Recover number of bytes at end
	TLC PTR,(<POINT 32,>^!<POINT 8,>)	; Back to 8-bit mode
	SKIPLE CNT		; Get out if none
	  CALL UADD8
	JRST IPGEN1		; Join common exit

;ICMCKS(PKT)	Compute Value for ICMP Checksum Field

;PKT/	Extended Pointer to Packet
;	CALL ICMCKS
;Ret+1:	Always.
;T1 has the checksum for the ICMP packet
;Can be used to checksum the data portion of any IP packet.

ICMCKS::
MNTM5	AOSA CELL(TCCAA,3,,TCC)	; ICMCKS calls
DATCKS::
MNTM5	  AOS CELL(TCCAA,1,,TCC)	; DATCKS calls
	PUSH P,PTR		; Save ACs we will use as globals
	PUSH P,CNT
	PUSH P,BAS
	PUSH P,SUM
IFN %CRC,<
	SKIPN CRCF		; Use CRC or Old 1's comp?
	 JRST ICMADD		; Use additive function

; Compute CRC for ICMP packet

ICMCRC:	MOVX SUM,-1B<WID(PCCKS)-1>	; Init sum to all 1's
TCPCRC:	MOVX SUM,-1B<WID(PCHKS)-1>	; Init CRC to all one's
	MOVX PTR,<POINT 32,PKTELI(PKT)>	; Point to IP header
	LOAD T1,PIPL,(PKT)	; Get total length
	LOAD T2,PIDO,(PKT)	; Get data offset
	ADD PTR,T2		; Locate ICMP header
	ASH T2,2		; Convert to byte count
	SUB T1,T2		; Get length of ICMP portion
	IDIVI T1,^D<36/8>	; Number of full words and extra bytes
	PUSH P,T2		; Save number of bytes in partial word
	MOVSI PTR,(<POINT 32,0(TPKT)>	; Skip over IP options
	SKIPN CNT,T1
         CALL CRC32
	TLC PTR,(<POINT 32,>^!<POINT 8,>)	; Back to 8-bit mode
	POP P,CNT		; Recover number of bytes in last word
	SKIPE CNT
         CALL CRC8		; Do them
	MOVE T1,SUM		; Get left-justified result
	LSH T1,-<^D36-WID(PCCKS)>; Right justify it
	JRST ICMCKX
>

; 1's complement additive checksum calculation for IP header

ICMADD:	MOVEI SUM,0		; Init the sum
	MOVE PTR,[POINT 32,PKTELI(PKT)]	; Pointer IP header
	LOAD T1,PIPL,(PKT)	; Packet length in bytes
	LOAD T2,PIDO,(PKT)	; IP data offset
	ADD PTR,T2		; Point to ICMP header
	ASH T2,2		; Convert to bytes
	SUB T1,T2		; Compute length of ICMP portion
	IDIVI T1,^D<36/8>	; Number of full words
	PUSH P,T2		; Number of bytes in last word
	SKIPE CNT,T1		; Set count of 32-bit words
         CALL ADDSUM		; Add in the data
	POP P,CNT		; Recover number of bytes at end
	TLC PTR,(<POINT 32,>^!<POINT 8,>)	; Back to 8-bit mode
	SKIPLE CNT		; Get out if none
         CALL ADD8
IPGEN1:	CALL FIXSUM		; Handle extra carries
	CAIE SUM,0		; Avoid complementing a +0
	  XORI SUM,CKSMSK	; Return complement of the sum
ICMCKX:	MOVE T1,SUM		; Return value
	POP P,SUM		; Restore caller's ACs
	POP P,BAS
	POP P,CNT
	POP P,PTR
	RET

;TCPCKS(PKT,TPKT)
;Returns number for TCP checksum

;PKT/	Extended pointer to packet
;TPKT/	Extended pointer to TCP header of packet
;	CALL TCPCKS
;Ret+1:	Always.  Number for TCP header checksum field in T1

TCPCKS::
MNTM5	AOS CELL(TCCAA,4,,TCC)	; TCPCKS calls
	PUSH P,PTR		; Save ACs which will be used globally
	PUSH P,CNT
	PUSH P,BAS
	PUSH P,SUM
IFN %CRC,<
	SKIPN CRCF		; Supposed to use CRC?
	JRST TCPADD		; No.  1's comp.
TCPCRC:	MOVX SUM,-1B<WID(PCHKS)-1>	; Init CRC to all one's
	MOVX PTR,[<.POINT PIDST,(PKT)>-<WID(PIDST)>B5]	; Destination
	MOVEI CNT,2		; and source
	CALL CRC32		; Do those.
	MOVE PTR,[POINT 8,[0]]	; Pseudo header has a 0 byte next
	MOVEI CNT,1
	CALL CRC8		; Do it
	MOVX PTR,[<.POINT PIPRO,(PKT)>-<WID(PIPRO)>B5]; Ptr to Protocol
	MOVEI CNT,1		; One byte
	CALL CRC8		; Do it.
	LOAD T1,PIPL,(PKT)	; Get total length
	PUSH P,T1		; Save so it can be restored
	LOAD T2,PIDO,(PKT)	; Get data offset
	ASH T2,2		; Convert to byte count
	SUB T1,T2		; Get length of TCP header
	STOR T1,PIPL,(PKT)	; Smash into packet for CRC calculation
	MOVX PTR,[<.POINT PIPL,(PKT)>-<WID(PIPL)>B5]	; Get ptr to it
	MOVEI CNT,1		; Do one 16-bit byte
	CALL CRC16		; TCP packet length
	POP P,T1
	STOR T1,PIPL,(PKT)	; Restore the packet
	LOAD T2,PIDO,(PKT)	; Number of words in IP header
	ASH T2,2		; Number of bytes there
	SUB T1,T2		; Number of bytes in TCP portion
	IDIVI T1,^D<36/8>	; Number of full words and extra bytes
	PUSH P,T2		; Save number of bytes in partial word
	MOVSI PTR,(<POINT 32,0(TPKT)>	; Skip over IP options
	SKIPN CNT,T1
	CALL CRC32
	MOVSI PTR,(<POINT 8,0(TPKT)>)	; Switch to 8-bits for tail
	POP P,CNT		; Recover number of bytes in last word
	SKIPE CNT
	 CALL CRC8		; Do them
	MOVE T1,SUM		; Get the result
	LSH T1,-<^D36-WID(PTCKS)>; Right-justify
	JRST TCPCKX
>

; 1's complement function for TCP packet

TCPADD:	LOAD SUM,PISH,(PKT)	; Start with "pseudo header"
	LOAD T1,PIDH,(PKT)	; Source and destination hosts, and protocol
	ADD SUM,T1		; Are constants and part of "addr info"
	LOAD T1,PIPRO,(PKT)	; Internet protocol (TCP, XNET, etc)
	ADD SUM,T1
	LOAD T1,PIPL,(PKT)	; Packet length in bytes
	LOAD T2,PIDO,(PKT)	; IP data offset
	ASH T2,2		; Convert to bytes
	SUB T1,T2		; Compute length of TCP portion
	ADD SUM,T1		; Add in to checksum
	IDIVI T1,^D<36/8>	; Number of full words
	PUSH P,T2		; Number of bytes in last word
	MOVE PTR,[POINT 32,0(TPKT)]	; Pointer to TCP portion
	SKIPE CNT,T1		; Set count of 32-bit words
	 CALL ADDSUM		; Add in the data
	POP P,CNT		; Recover number of bytes at end
	TLC PTR,(<POINT 32,>^!<POINT 8,>)	; Back to 8-bit mode
	SKIPLE CNT		; Get out if none
	 CALL ADD8
	CALL FIXSUM		; Fold into 16 bits
	CAIE SUM,0		; Avoid complementing plus zero
	XORI SUM,CKSMSK		; Do one's complement
TCPCKX:	MOVE T1,SUM
	POP P,SUM
	POP P,BAS
	POP P,CNT
	POP P,PTR
	RET

IFN %CRC,<
;CRC32(PKT,PTR,CNT,SUM)
;Add 32-bit bytes into the SUM

;PKT/	Extended pointer to packet
;TPKT/	Extended pointer to TCP part of packet
;PTR/	Pointer into packet where to begin (may index by PKT or TPKT)
;CNT/	Number of 32-bit bytes to do
;SUM/	Current sum
;	CALL CRC32
;Ret+1:	Always. PTR, CNT, SUM updated to reflect processing done.

CRC32:	ILDB T1,PTR		; Get next 32-bit byte
	LSH T1,^D<36-32>	; Left justify
	XOR T1,SUM		; Start CRCing
	SETZ SUM,
	LSHC T1,-^D<36-8>	; Get left most 8-bit byte
	XOR T2,CRCTAB(T1)
	LSHC T2,-^D<36-8>	; Get next 8-bit byte
	XOR T3,CRCTAB(T2)
	LSHC T3,-^D<36-8>
	XOR T4,CRCTAB(T3)
	LSHC T4,-^D<36-8>	; N.B. some bits go into SUM
	XOR SUM,CRCTAB(T4)
	SOJG CNT,CRC32
	RET

;CRC24(PKT,PTR,SUM)
;Add one 24-bit byte into the SUM

;PKT/	Extended pointer to packet
;TPKT/	Extended pointer to TCP part of packet
;PTR/	Pointer into packet where to begin (may index by PKT or TPKT)
;SUM/	Current sum
;	CALL CRC24
;Ret+1:	Always. PTR, SUM updated to reflect processing done.

CRC24:	ILDB T2,PTR
	LSH T2,^D<36-24>
	XOR R2,SUM
	SETZ SUM,
	LSHC T2,-^D<36-8>
	XOR T3,CRCTAB(T2)
	LSHC T3,-^D<36-8>
	XOR T4,CRCTAB(T3)
	LSHC T4,-^D<36-8>	; N.B. some bits go into SUM
	XOR SUM,CRCTAB(T4)
	RET

;CRC16(PKT,PTR,CNT,SUM)
;Add 16-bit bytes into the SUM

;PKT/	Extended pointer to packet
;TPKT/	Extended pointer to TCP part of packet
;PTR/	Pointer into packet where to begin (may index by PKT or TPKT)
;CNT/	Number of 16-bit bytes to do
;SUM/	Current sum
;	CALL CRC16
;Ret+1:	Always. PTR, CNT, SUM updated to reflect processing done.

CRC16:	ILDB T3,PTR
	LSH T3,^D<36-16>
	XOR T3,SUM
	SETZ SUM,
	LSHC T3,-^D<36-8>
	XOR T4,CRCTAB(T3)
	LSHC T4,-^D<36-8>	; N.B. some bits go into SUM
	XOR SUM,CRCTAB(T4)
	SOJG CNT,CRC16
	RET

;CRC8(PKT,PTR,CNT,SUM)
;Add 8-bit bytes into the SUM

;PKT/	Extended pointer to packet
;TPKT/	Extended pointer to TCP part of packet
;PTR/	Pointer into packet where to begin (may index by PKT or TPKT)
;CNT/	Number of 8-bit bytes to do
;SUM/	Current sum
;	CALL CRC8
;Ret+1:	Always. PTR, CNT, SUM updated to reflect processing done.

CRC8:	ILDB T4,PTR
	LSH T4,^D<36-8>
	XOR T4,SUM
	SETZ SUM,
	LSHC T4,-^D<36-8>	; N.B. some bits go into SUM
	XOR SUM,CRCTAB(T4)
	SOJG CNT,CRC8
	RET

; Macros to build the table used in the CRC calculations

DEFINE BLDTAB(COEFS)<
	$WORD==0
	IRP COEFS,<$WORD==$WORD!1B<^D35-COEFS>>
	POLY==$WORD_^L<$WORD>	;; High order coefficient to sign bit
	CRCA==^D255
	REPEAT ^D256,<	CRCB==CRCA_^D24
			REPEAT 8,<
			IFL CRCB,<CRCB==CRCB^!POLY>
			CRCB==CRCB_1>
	.NCONC (\CRCB)
	CRCA==CRCA-1>>

	DEFINE .TAB(X,Y)<X
Y>				; Init the table macro
	DEFINE .NCONC(Z)<.TAB(<DEFINE .TAB(X,Y)><X
Z,Y>)>				; Macro to add to the table
	BLDTAB(<16,15,2,0>)	; Build the table in .TAB
				; for X**16+X**15+X**2+1
CRCTAB:	.TAB			; Assemble the table

>; end of IFN %CRC several pages back

;ADDSUM(PKT,PTR,CNT,SUM)
;Adds N 32 or 16 bit bytes into the SUM

;PKT/	Extended pointer to packet
;TPKT/	Extended pointer to TCP part of packet
;PTR/	Pointer into packet where to begin (may index by PKT or TPKT)
;CNT/	Number of bytes to do
;SUM/	Current sum
;	CALL ADDSUM
;Ret+1:	Always. PTR, CNT, SUM updated to reflect processing done.

ADDSUM:	ILDB T1,PTR		; Get a byte
	ADD SUM,T1		; Add it in
	SKIPGE SUM		; Too many carries?
	  CALL FIXSUM		; Yes.  Worry about that
	SOJG CNT,ADDSUM		; Loop over all
	RET

UADDSU:	XCTBU [ILDB T1,PTR]	; Get a byte
	ADD SUM,T1		; Add it in
	SKIPGE SUM		; Too many carries?
	  CALL FIXSUM		; Yes.  Worry about that
	SOJG CNT,UADDSU		; Loop over all
	RET

;ADD8(SUM,PKT,PTR,CNT)
;Adds in 8-bit bytes

;PKT/	Extended pointer to packet
;TPKT/	Extended pointer to TCP part of packet
;PTR/	Pointer into packet where to begin (may index by PKT or TPKT)
;CNT/	Number of bytes to do
;SUM/	Current sum
;	CALL ADDSUM
;Ret+1:	Always. PTR, CNT, SUM updated to reflect processing done.

ADD8:	ILDB T1,PTR
	TLNE PTR,(1B2)		; See if left/right of 16 bit word
	  LSH T1,8		; Left half
	ADD SUM,T1		; Add into sum
	SKIPGE SUM		; Too many carries?
	  CALL FIXSUM		; Yes.  Fold them into low bits
	SOJG CNT,ADD8		; Do more
	RET

UADD8:	XCTBU [ILDB T1,PTR]
	TLNE PTR,(1B2)		; See if left/right of 16 bit word
	  LSH T1,8		; Left half
	ADD SUM,T1		; Add into sum
	SKIPGE SUM		; Too many carries?
	  CALL FIXSUM		; Yes.  Fold them into low bits
	SOJG CNT,UADD8		; Do more
	RET

;FIXSUM(SUM)
;Folds SUM so it fits in one 16-bit field

;SUM/	current checksum, computed using 32-bit arithmetic
;	CALL FIXSUM
;Ret+1:	Always.  All carries added in (1's complement) to low 16

FIXSUM:	TXNN SUM,<^-CKSMSK>	; Any bits outside the mask?
	 RET			; No.  We're done
	LDB T1,[POINTR SUM,<^-CKSMSK>]	; Get carries
	ANDX SUM,CKSMSK		; Remove them from sum
	ADD SUM,T1		; Add in to low end
	JRST FIXSUM		; Must stop soon.
> ; End of repeat 0
	TNXEND
	END
