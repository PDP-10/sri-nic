REDIT 1(104) COMPARE by user CLYNN, 13-Feb-86 21:29:40
File 1: CWL:<DEC-6-1-BASE>TTYSRV.MAC.1
File 2: CWL:<CMU>TTYSRV.MAC.6
***** CHANGE #1; PAGE 1, LINE 1; PAGE 1, LINE 1
 ---------------------------------
;Merge CMU and BBN changes
;<MONITOR.CMU>TTYSRV.MAC.2, 14-May-85 14:52:08, Edit by VAF
;[BBN] Merge BBN TCP changes - note: CS82 TVT change removed.
;CS147 Create TDCAL1/TDCALN macros and use them for simple TDCALL cases.
;<MONITOR.CMU>TTYSRV.MAC.6, 17-Apr-85 16:34:13, Edit by VAF
;CS143	Only give extra buffers to TVTs. PTYs and PNVTs cause problems.
;<MONITOR.CMU>TTYSRV.MAC.5, 21-Feb-85 10:32:04, Edit by VAF
;CS143	Use more buffers for NVT's (Hedrick@Rutgers suggestion).
;<MONITOR.CMU>TTYSRV.MAC.6,  3-Feb-85 01:26:25, Edit by VF08
;CM236	Don't ITRLGO if MTOPR in TTCKSP fails... It isn't very important.

***** CHANGE #2; PAGE 2, LINE 8; PAGE 2, LINE 8
;THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY ONLY BE USED
;  OR COPIED IN ACCORDANCE WITH THE TERMS OF SUCH LICENSE.
;
;COPYRIGHT (C) 1976,1977,1978,1979,1980,1981,1982,1983,
;BY DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.

	SEARCH PROLOG
	SALL
 ---------------------------------
;THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY ONLY BE USED
;  OR COPIED IN ACCORDANCE WITH THE TERMS OF SUCH LICENSE.
;
;COPYRIGHT (C) 1976,1977,1978,1979,1980,1981,1982,1983,
;BY DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.

IFDEF  CMU,<	SEARCH PROLGX,BUGTTY	;CS147 >
IFNDEF CMU,<	SEARCH PROLOG >
	SALL

***** CHANGE #3; PAGE 2, LINE 49; PAGE 2, LINE 50
  IFN ARPAF,<
	.NTFLG==1		;INCLUDE NT CODE
	.TVFLG==1>		;INCLUDE TV CODE

	.PTFLG==1		;ALWAYS INCLUDE PT CODE

ND .FEFLG,0
 ---------------------------------
  IFN ARPAF,<
	.NTFLG==1		;INCLUDE NT CODE
	.TVFLG==1>		;INCLUDE TV CODE

	.PTFLG==1		;ALWAYS INCLUDE PT CODE

IFDEF CMU,<
IFNDEF TTYN,<TTYN==:0>		;CS99 default to no IP TTY
IFNDEF CSFEN,<CSFEN==:0>	;CS19 default to no CSFE
IFNDEF PUPN,<PUPN==:0>		;CS36 default to no PUP
CSFE,<.CSFLG==1>		;CS19 include CS front end terminals
PUP,<.PNFLG==1>			;CS36 include PN (pup) terminals
ND .CSFLG,0			;CS19 default to no CS front end support
ND .PNFLG,0			;CS36 default to no PN terminals
>; end of IFDEF CMU
ND .FEFLG,0

***** CHANGE #4; PAGE 2, LINE 57; PAGE 2, LINE 67
ND .MCFLG,1
ND .PTFLG,1
ND .DCFLG,0
ND .NTFLG,0
ND .DZFLG,0
ND .TVFLG,0			;DEFAULT ALL

ND NVTLEN,0
ND TTMCLN,0
ND TVTLEN,0

 ---------------------------------
ND .MCFLG,1
ND .PTFLG,1
ND .DCFLG,0
ND .NTFLG,0
ND .DZFLG,0
ND .TVFLG,0			;DEFAULT ALL
ND .CHFLG,0

ND NVTLEN,0
ND TTMCLN,0
ND TVTLEN,0
ND CVTLEN,0


***** CHANGE #5; PAGE 2, LINE 67; PAGE 2, LINE 79
;TELETYPE SERVICE ROUTINES - D. MURPHY

	SUBTTL DATA DEFINITIONS

;AC DEFINITIONS USED HEREIN
 ---------------------------------
;TELETYPE SERVICE ROUTINES - D. MURPHY

	SUBTTL DATA DEFINITIONS

IFDEF CMU,< PUP,<INTERN TTFORK,TTYAWK,TTCHI,TTYDIS,TTSND,TTCHID> ;CS36 PUP >

;AC DEFINITIONS USED HEREIN

***** CHANGE #6; PAGE 3, LINE 46; PAGE 3, LINE 46
DEFINE TDCALL (DT,VECTOR,DEFLT)<
  IFIDN <DT><S>,<
	LOAD CX,TTSTY,(T2)>
  IFIDN <DT><D>,<
	LOAD CX,TLTYP,(T2)>
	CALL [
	  ..TDC1 (<VECTOR>,<FE,MC,PT,DC,NT,DZ,TV>,<DEFLT>) ](CX)
  >

 ---------------------------------
DEFINE TDCALL (DT,VECTOR,DEFLT)<
  IFIDN <DT><S>,<
	LOAD CX,TTSTY,(T2)>
  IFIDN <DT><D>,<
	LOAD CX,TLTYP,(T2)>
	CALL [
IFDEF  CMU,<..TDC1 (<VECTOR>,<FE,MC,PT,DC,NT,DZ,TV,CS,PN>,<DEFLT>) > ;CS19
IFNDEF CMU,<..TDC1 (<VECTOR>,<FE,MC,PT,DC,NT,DZ,TV,CH>,<DEFLT>) >
             ](CX)
  >

IFDEF CMU,<
;CS147 *** Begin ***
DEFINE TDCAL1 (DT,TYP,ADR) <
  IFIDN <DT><S>,<
	LOAD CX,TTSTY,(T2)>
  IFIDN <DT><D>,<
	LOAD CX,TLTYP,(T2)>
  CAIN CX,TT.'TYP'
  CALL ADR
>

DEFINE TDCALN (DT,TYP,ADR) <
  IFIDN <DT><S>,<
	LOAD CX,TTSTY,(T2)>
  IFIDN <DT><D>,<
	LOAD CX,TLTYP,(T2)>
  CAIE CX,TT.'TYP'
  CALL ADR
>
;CS147 *** End ***
>; end of IFDEF CMU


***** CHANGE #7; PAGE 3, LINE 79; PAGE 3, LINE 103
	JRST ADR>>

;VARIENT MACRO USED IF LINE TYPE ALREADY IN AC

DEFINE TDCALX (AC,VECTOR,DEFLT)<
	CALL [
	  ..TDC1 (<VECTOR>,<FE,MC,PT,DC,NT,DZ,TV>,<DEFLT>) ](AC)>

 ---------------------------------
	JRST ADR>>

;VARIENT MACRO USED IF LINE TYPE ALREADY IN AC

DEFINE TDCALX (AC,VECTOR,DEFLT)<
	CALL [
IFDEF  CMU,<..TDC1 (<VECTOR>,<FE,MC,PT,DC,NT,DZ,TV,CH,PN>,<DEFLT>) >
IFNDEF CMU,<..TDC1 (<VECTOR>,<FE,MC,PT,DC,NT,DZ,TV,CH>,<DEFLT>) >
	      ](AC)>


***** CHANGE #8; PAGE 3, LINE 96; PAGE 3, LINE 122
	TRO T1,200		;MC
	TRO T1,200		;PT
	TRO T1,200		;DC
	TRZ T1,200		;NT
	TRO T1,200		;DZ
	TRZ T1,200		;TV
IFN .-PARTBL-NLTYPS,<PRINTX %PARTBL SIZE DOES NOT AGREE WITH NLTYPS>
 ---------------------------------
	TRO T1,200		;MC
	TRO T1,200		;PT
	TRO T1,200		;DC
	TRZ T1,200		;NT
	TRO T1,200		;DZ
	TRZ T1,200		;TV
IFDEF  CMU,<	TRO T1,200		;CS19 CS
		TRO T1,200		;CS36 PUP >
IFNDEF CMU,<	TRZ T1,200		;CH >
IFN .-PARTBL-NLTYPS,<PRINTX %PARTBL SIZE DOES NOT AGREE WITH NLTYPS>

***** CHANGE #9; PAGE 3, LINE 108; PAGE 3, LINE 137
	TTMCLN			;MC
	TTDDLN			;PT
	TTDDLN			;DC
	NVTLEN			;NT
	TTDDLN			;DZ
	TVTLEN			;TV
IFN .-DDLTBL-NLTYPS,<PRINTX %DDLTBL SIZE DOES NOT AGREE WITH NLTYPS>
 ---------------------------------
	TTMCLN			;MC
	TTDDLN			;PT
	TTDDLN			;DC
	NVTLEN			;NT
	TTDDLN			;DZ
	TVTLEN			;TV
IFDEF  CMU,<	TTDDLN			;CS19 CS
		TTDDLN			;CS36 PUP >
IFNDEF CMU,<	CVTLEN			;CH (CHAOS) >
IFN .-DDLTBL-NLTYPS,<PRINTX %DDLTBL SIZE DOES NOT AGREE WITH NLTYPS>

***** CHANGE #10; PAGE 5, LINE 18; PAGE 5, LINE 18
TT%IGI==1B6			;IGNORE INPUT WHEN LINE IS INACTIVE
TT%AUT==1B7			;LINE IS AUTO-SPEED
TT%XOC==1B8			;LINE NEEDS XON/XOFF CHARACTER (2020)
TT%FPK==1B8			; WAITING FOR FE POST (KL)
TT%SHU==1B9			;LINE IS SHUT OFF
TT%WSO==1B10			;LINE WAS SHUT OFF
MSKSTR TTFEM,TTSTAT,TT%FEM
 ---------------------------------
TT%IGI==1B6			;IGNORE INPUT WHEN LINE IS INACTIVE
TT%AUT==1B7			;LINE IS AUTO-SPEED
TT%XOC==1B8			;LINE NEEDS XON/XOFF CHARACTER (2020)
TT%FPK==1B8			; WAITING FOR FE POST (KL)
TT%SHU==1B9			;LINE IS SHUT OFF
TT%WSO==1B10			;LINE WAS SHUT OFF
IFDEF  CMU,<
TT%INT==1B11			;CM328 Line is interactive for scheduling
				; purposes
>
MSKSTR TTFEM,TTSTAT,TT%FEM

***** CHANGE #11; PAGE 5, LINE 31; PAGE 5, LINE 35
MSKSTR TTIGI,TTSTAT,TT%IGI	;IGNORE INPUT WHEN LINE IS INACTIVE
MSKSTR TTAUT,TTSTAT,TT%AUT	;LINE IS AUTO-SPEED
MSKSTR TTXOC,TTSTAT,TT%XOC	;LINE NEEDS XON/XOFF CHARACTER OUTPUT
MSKSTR TTFPK,TTSTAT,TT%FPK	; FE TO POST
MSKSTR TTSHU,TTSTAT,TT%SHU
MSKSTR TTWSO,TTSTAT,TT%WSO	;LINE WAS SHUT OFF
; 11-13 FREE
DEFSTR TTSTY,TTSTAT,17,4	;LINE TYPE
 ---------------------------------
MSKSTR TTIGI,TTSTAT,TT%IGI	;IGNORE INPUT WHEN LINE IS INACTIVE
MSKSTR TTAUT,TTSTAT,TT%AUT	;LINE IS AUTO-SPEED
MSKSTR TTXOC,TTSTAT,TT%XOC	;LINE NEEDS XON/XOFF CHARACTER OUTPUT
MSKSTR TTFPK,TTSTAT,TT%FPK	; FE TO POST
MSKSTR TTSHU,TTSTAT,TT%SHU
MSKSTR TTWSO,TTSTAT,TT%WSO	;LINE WAS SHUT OFF
IFDEF  CMU,<
MSKSTR TTINT,TTSTAT,TT%INT	;CM328 Line is interactive for scheduling
				; purposes
		;CM328 12-13 FREE >

IFNDEF CMU,<	; 11-13 FREE >
DEFSTR TTSTY,TTSTAT,17,4	;LINE TYPE

***** CHANGE #12; PAGE 5, LINE 45; PAGE 5, LINE 54
;RS TTACTL,NLINES		;ADDRESS OF DYNAMIC DATA IF ACTIVE
				; OR -1 IF BECOMING ACTIVE
				; OR 0 IF INACTIVE
TTSHBK==1B0			;SHORT BLOCK
;RS TTCSAD,NLINES		;BITS FOR FUNCTIONS NEEDED
;RS TTCSTM,NLINES		;TIME FOR SCHEDULER TO CALL ROUTINE

 ---------------------------------
;RS TTACTL,NLINES		;ADDRESS OF DYNAMIC DATA IF ACTIVE
				; OR -1 IF BECOMING ACTIVE
				; OR 0 IF INACTIVE
TTSHBK==1B0			;SHORT BLOCK
;RS TTCSAD,NLINES		;BITS FOR FUNCTIONS NEEDED
;RS TTCSTM,NLINES		;TIME FOR SCHEDULER TO CALL ROUTINE
IFDEF CMU,<
;RS TTCMWN,NLINES		;CS46 Last time a character was typed
;RS HSILIN,NLINES		;CM375 input rate
;RS HSOLIN,NLINES		;CM375 output rate

DEFSTR TTNMC,TTCMST,11,1	;CM324 micom server touched/this incarnation
DEFSTR TTDIA,TTCMST,10,1	;CM324 Dialup line
DEFSTR TTABM,TTCMST,9,1		;CM324 Micom server will autobaud this line
DEFSTR TTMCM,TTCMST,8,1		;CM324 Micom line
DEFSTR TTITP,TTCMST,7,6		;CM31 Static terminal type
DEFSTR TTTNT,TTCMST,1,1		;CM255 Telenet line
DEFSTR TTPBL,TTCMST,0,1		;CM31 Public terminal room terminal
;RS TTCMST,NLINES		;CM31
>


***** CHANGE #13; PAGE 6, LINE 24; PAGE 6, LINE 24
TT%DD1==1B13			;DEVICE DEPENDENT BIT
TT%NPM==1B14			;MCB NVT OLD PAGE MODE
TT%RXF==1B15			;HAVE RECEIVED XOFF ON LINE
TT%FLO==1B16			;FLUSHING OUTPUT AT TTSND
TT%HPO==1B17			;HIGH PRIORITY OUTPUT QUEUED
TT%DAL==1B18			;DEALLOCATE OF BLOCK REQUESTED
;**;[2906] Insert 1 line at TTFLG1==:+20		DSW	03-Feb-83
TT%XFF==1B20			;[2906] FORCE XOFF/XON STATUS TO FRONT-END
TT%LCK==77B35			;COUNT OF LOCKS ON THIS BLOCK
 ---------------------------------
TT%DD1==1B13			;DEVICE DEPENDENT BIT
TT%NPM==1B14			;MCB NVT OLD PAGE MODE
TT%RXF==1B15			;HAVE RECEIVED XOFF ON LINE
TT%FLO==1B16			;FLUSHING OUTPUT AT TTSND
TT%HPO==1B17			;HIGH PRIORITY OUTPUT QUEUED
TT%DAL==1B18			;DEALLOCATE OF BLOCK REQUESTED
IFDEF  CMU,<
TT%DET==1B19			;CS36 [151] User-invoked detach on PUP NVT
>
;**;[2906] Insert 1 line at TTFLG1==:+20		DSW	03-Feb-83
TT%XFF==1B20			;[2906] FORCE XOFF/XON STATUS TO FRONT-END
IFDEF  CMU,<
TT%SEN==1B21			;CS26 Refuse sends
TT%BMD==1B22			;CS47 Backspace means delete
TT%WPM==1B28			;CS82 Was permanent before .MOSNH MTOPR%
				;CS82 Leave B29 for overflow from TT%LCK
>
TT%LCK==77B35			;COUNT OF LOCKS ON THIS BLOCK

***** CHANGE #14; PAGE 6, LINE 47; PAGE 6, LINE 56
MSKSTR TTDD1,TTFLG1,TT%DD1	;DEVICE DEPENDENT BIT
MSKSTR TTNPM,TTFLG1,TT%NPM
MSKSTR TTRXF,TTFLG1,TT%RXF
MSKSTR TTFLO,TTFLG1,TT%FLO
MSKSTR TTHPO,TTFLG1,TT%HPO
MSKSTR TTDAL,TTFLG1,TT%DAL
;**;[2906] Insert 1 line at TTFLG1==:+42		DSW	03-Feb-83
MSKSTR TTXFF,TTFLG1,TT%XFF	;[2906] FORCE XOFF/XON STATUS TO FRONT-END
MSKSTR TTLCK,TTFLG1,TT%LCK
 ---------------------------------
MSKSTR TTDD1,TTFLG1,TT%DD1	;DEVICE DEPENDENT BIT
MSKSTR TTNPM,TTFLG1,TT%NPM
MSKSTR TTRXF,TTFLG1,TT%RXF
MSKSTR TTFLO,TTFLG1,TT%FLO
MSKSTR TTHPO,TTFLG1,TT%HPO
MSKSTR TTDAL,TTFLG1,TT%DAL
IFDEF  CMU,<
MSKSTR TTPDT,TTFLG1,TT%DET	;CS36 [151]
>
;**;[2906] Insert 1 line at TTFLG1==:+42		DSW	03-Feb-83
MSKSTR TTXFF,TTFLG1,TT%XFF	;[2906] FORCE XOFF/XON STATUS TO FRONT-END
IFDEF  CMU,<
MSKSTR TTSEN,TTFLG1,TT%SEN	;CS26 refuse sends
MSKSTR TTBMD,TTFLG1,TT%BMD	;CS47 backspace means delete
MSKSTR TTWPM,TTFLG1,TT%WPM	;CS82 Line was permanent before .MOSNH MTOPR%
>
MSKSTR TTLCK,TTFLG1,TT%LCK

***** CHANGE #15; PAGE 9, LINE 14; PAGE 9, LINE 14

;USUAL DEVICE FLAGS AND STATUS
; 66 LINES/PAGE, 75 CHARS/LINE
; WAKEUP ON ALL, ECHO MODE 2 (DEFERRED OR IMMED)
; DATA MODE ASCII, 'RAISE' LC INPUT (ALSO CONVERTS OLD-STYLE ALT-MODES)

NORMTF::^D66B10+^D72B17+17B23+2B25+TT%ALK+1B29+1B31+TT%PGM
NORMTY:: ^D8			;NORMAL TERMINAL TYPE
 ---------------------------------

;USUAL DEVICE FLAGS AND STATUS
; 66 LINES/PAGE, 75 CHARS/LINE
; WAKEUP ON ALL, ECHO MODE 2 (DEFERRED OR IMMED)
; DATA MODE ASCII, 'RAISE' LC INPUT (ALSO CONVERTS OLD-STYLE ALT-MODES)

NORMTF::
IFDEF  CMU,<
CS,<	17B23+2B25+1B29+TT%PGM+TT%ALK> ;CM31 default terminal mode
CC,<	17B23+2B25+1B29+TT%PGM>	;CM31
>
IFNDEF CMU,<
	^D66B10+^D72B17+17B23+2B25+TT%ALK+1B29+1B31+TT%PGM
>
NORMTY:: ^D8			;NORMAL TERMINAL TYPE

***** CHANGE #16; PAGE 10, LINE 35; PAGE 10, LINE 35
	SOJG 2,.-2
	MOVEM 1,TTFREB		;FREE BUFFER LIST

;INITIALIZE THE STATIC DATA FOR ALL LINES. TTSPWD IS DONE BY DTEINI

	SETOM SALLCK		;INIT SENDALL LOCK
	MOVEI T1,NLINES		;DO ALL LINES
	SETZ T2,		;START WITH LINE 0
TTINI1:	SETZM TTSTAT(T2)	;CLEAR STATUS WORD
	MOVEI T3,MXFECC		;GET DEFAULT LINE ALLOCATION
 ---------------------------------
	SOJG 2,.-2
	MOVEM 1,TTFREB		;FREE BUFFER LIST

;INITIALIZE THE STATIC DATA FOR ALL LINES. TTSPWD IS DONE BY DTEINI

	SETOM SALLCK		;INIT SENDALL LOCK
IFDEF  CMU,<
CC,<	SETZM MCMRUN		;CM324 no micom server running yet
	SETZM MCMDBG		;CM324 no micom debugging
	SETZM HSITAB+.SFBON >	;CM324 no input rate detecting yet
	SETZM HCKIDX		;CM324 Init current index into TTCMWN
>
	MOVEI T1,NLINES		;DO ALL LINES
	SETZ T2,		;START WITH LINE 0
TTINI1:	SETZM TTSTAT(T2)	;CLEAR STATUS WORD
IFDEF  CMU,<
CC,<	SETZM HSILIN(T2)	;CM375 input rate
	SETZM HSOLIN(T2) >	;CM375 output chars
	SETZM TTCMWN(T2)	;CS46 Last time a character came in
	SETZM TTCMST(T2)	;CM31 Clear CMU only bits
>
	MOVEI T3,MXFECC		;GET DEFAULT LINE ALLOCATION

***** CHANGE #17; PAGE 11, LINE 7; PAGE 11, LINE 7

;THIS CODE ESTABLISHES THE TYPE OF EACH LINE. LINES OF A TYPE ARE ASSIGNED
;CONSECUTIVELY, STARTING WITH LINES THAT ARE LOCAL TO THE MACHINE.  THIS
;CODE STORES THE LINE TYPE WITH THE LINE AND SETS UP TT1LIN
;FOR EACH TYPE TO CONTAIN THE NUMBER OF THE FIRST LINE.

	;..
 ---------------------------------

;THIS CODE ESTABLISHES THE TYPE OF EACH LINE. LINES OF A TYPE ARE ASSIGNED
;CONSECUTIVELY, STARTING WITH LINES THAT ARE LOCAL TO THE MACHINE.  THIS
;CODE STORES THE LINE TYPE WITH THE LINE AND SETS UP TT1LIN
;FOR EACH TYPE TO CONTAIN THE NUMBER OF THE FIRST LINE.

	MOVSI T1,<-NLTYPS>
	SETOM TT1LIN(T1)	; Make sure "No Lines"
	AOBJN T1,.-1
	;..

***** CHANGE #18; PAGE 11, LINE 34; PAGE 11, LINE 37
	HRLI T4,-NTTTVT		;GET NEG NUMBER OF TCP VIRTUAL TERMINALS
	HRR T4,T2		;FIRST LINE
	MOVEM T4,TVTPTR		;SET AOBJN POINTER FOR TVTS
	MOVEI T3,TT.TVT		;GET THE CODE FOR TVTS
	MOVEI T4,NTTTVT		;GET THE NUMBER OF TVTS
	CALL SETTYP

 ---------------------------------
	HRLI T4,-NTTTVT		;GET NEG NUMBER OF TCP VIRTUAL TERMINALS
	HRR T4,T2		;FIRST LINE
	MOVEM T4,TVTPTR		;SET AOBJN POINTER FOR TVTS
	MOVEI T3,TT.TVT		;GET THE CODE FOR TVTS
	MOVEI T4,NTTTVT		;GET THE NUMBER OF TVTS
	CALL SETTYP
IFDEF  CMU,<
PUP,<	HRLI T4,-NTTPN		;CS36 set up puppar with -nttpnv,,first pn
	HRR T4,T2		;CS36 GET FIRST PNV
	MOVEM T4,PUPPAR >	;CS36 STORE IT AWAY
	MOVEI T3,TT.PN		;CS36 T3/ CODE FOR ETHERNET LINES
	MOVEI T4,NTTPN		;CS36 T4/ NUMBER OF ETHERNET LINES
	CALL SETTYP		;CS36
>


***** CHANGE #19; PAGE 11, LINE 43; PAGE 11, LINE 54

	SETZM TTBIGO
	SETZM TTBIGC
	SETZM TTBIGI

	SETZM TTCQLN		;INITIALIZE FOR TTHNG4

	SAVEAC <Q1>
	MOVSI Q1,-NLTYPS	;FIND NUMBER OF LINE TYPES
TYINLP:	TDCALX Q1,<<DZ,DZINIT>>,<RET>
	AOBJN Q1,TYINLP		;DO ALL TYPES
 ---------------------------------

	SETZM TTBIGO
	SETZM TTBIGC
	SETZM TTBIGI

	SETZM TTCQLN		;INITIALIZE FOR TTHNG4
IFDEF  CMU,<
IPTT,<	CALL TIPINI>		;CS99 Initialize IP line
>
	SAVEAC <Q1>
	MOVSI Q1,-NLTYPS	;FIND NUMBER OF LINE TYPES
TYINLP:
IFDEF  CMU,<	TDCALX Q1,<<CS,CSITBL>,<DZ,DZINIT>>,<RET> ;CS19 >
IFNDEF CMU,<	TDCALX Q1,<<DZ,DZINIT>,<CH,CHTINI>>,<RET> >
	AOBJN Q1,TYINLP		;DO ALL TYPES

***** CHANGE #20; PAGE 13, LINE 23; PAGE 13, LINE 23
	SETOM CTYINT		;INITIALIZE INTERNAL EQUIVALENT OF ACTUAL
				; CTY LINE ON .FEDLS DEVICE
	HRRZ T1,DDLTBL(T3)	; AND FULL LENGTH BLOCK
	HRLI T1,.RESP1		;INDICATE NOT SWAPPABLE
	MOVEI T2,.RESTP
	CALL ASGRES		;GET RESIDENT SPACE
	 BUG(NOCTY)
	MOVE T2,CTYLNO		;T2/ LINE NUMBER, T1/ ADDRESS OF BLOCK
 ---------------------------------
	SETOM CTYINT		;INITIALIZE INTERNAL EQUIVALENT OF ACTUAL
				; CTY LINE ON .FEDLS DEVICE
	HRRZ T1,DDLTBL(T3)	; AND FULL LENGTH BLOCK
	HRLI T1,.RESP1		;INDICATE NOT SWAPPABLE
	MOVEI T2,.RESTP
	CALL ASGRES		;GET RESIDENT SPACE
IFDEF  CMU,< BUG(NOCTY) >
IFNDEF CMU,< BUG.(HLT,NOCTY,TTYSRV,SOFT,<UNABLE TO ALLOCATE DATA FOR CTY>,,<

Cause:	During initialization of terminal lines, a call to ASGRES was made
	to get resident free space for the CTY's data base.  The call got
	a failure return - no free space available.


>) >
	MOVE T2,CTYLNO		;T2/ LINE NUMBER, T1/ ADDRESS OF BLOCK

***** CHANGE #21; PAGE 14, LINE 25; PAGE 14, LINE 25

TTSETS:
TTSETM:	MOVEI T4,MSGLEN		;INDICATE MESSAGE BLOCK
	JRST TTSET

TTSET:	SAVEQ
	TDCALL S,<<FE,TTSETF>>
	LOAD T3,TTSTY,(T2)	;GET LINE TYPE FROM STATIC
	STOR T3,TLTYP,(T1)	; AND COPY TO DYNAMIC
	MOVE Q1,NORMTY		;GET NORMAL TERMINAL TYPE
	STOR Q1,TTTYP,(T1)	;SET IN DYNAMIC DATA
	STOR T2,TINTL,(T1)	;MAKE DYNAMIC DATA POINT TO STATIC
	MOVE T3,IBFRC		;GET DEFAULT BUFFER CONTROL
 ---------------------------------

TTSETS:
TTSETM:	MOVEI T4,MSGLEN		;INDICATE MESSAGE BLOCK
	JRST TTSET

TTSET:	SAVEQ
IFDEF  CMU,<
	SETONE TTINT,(T2)	;CM328 Assume should be scheduled as an
				; interactive line.  Before the TDJRST so that
				; it can be changed by the line-type-dependent
				; code.
	TDCALL S,<<FE,TTSETF>,<CS,CSINIV>,<PN,PNVSET>> ;CS19
>
IFNDEF CMU,<	TDCALL S,<<FE,TTSETF>> >
	LOAD T3,TTSTY,(T2)	;GET LINE TYPE FROM STATIC
	STOR T3,TLTYP,(T1)	; AND COPY TO DYNAMIC
IFDEF  CMU,<	LOAD Q1,TTITP,(T2)	;CM31 Get static terminal type >
IFNDEF CMU,<	MOVE Q1,NORMTY		;GET NORMAL TERMINAL TYPE >
	STOR Q1,TTTYP,(T1)	;SET IN DYNAMIC DATA
	STOR T2,TINTL,(T1)	;MAKE DYNAMIC DATA POINT TO STATIC
IFDEF  CMU,<
CS,<	SETZRO TTSEN,(T1)>	;CS26 Default to receive sends
CC,<	SETONE TTSEN,(T1)>	;CS26 Default to refuse sends
	SETZRO TTBMD,(T1)	;CS47 Default to no backspace translation
>
	MOVE T3,IBFRC		;GET DEFAULT BUFFER CONTROL

***** CHANGE #22; PAGE 14, LINE 47; PAGE 14, LINE 60
	MOVE Q1,TTICB1		;SETUP USUAL CONTROL CHARACTER MODES
	MOVEM Q1,FCMOD1(T1)
	MOVE Q1,TTICB2
	MOVEM Q1,FCMOD2(T1)
	SETOM TTLINK(T1)	;NO LINKS TO OTHER LINES
	MOVE Q1,NORMTF		;USUAL DEVICE FLAGS AND STATUS
	CAMN T2,CTYLNO		;Assigning CTY?
	TXZ Q1,TT%ALK		;Yes - disallow TALK links
	LOAD T3,TTSTY,(T2)	;GET TYPE OF LINE AGAIN
	CAIN T3,TT.PTY		;IS IT A PTY?
	TXZ Q1,TT%PGM		;YES. NO XON/XOFF THEN
	LOAD T3,TT%WID,Q1	;GET STANDARD WIDTH
	LOAD T4,TT%LEN,Q1	;GET LENGTH
	SETZRO <TT%WID,TT%LEN>,Q1 ;CLEAR OUT THESE VALUES
	DPB Q1,[POINT 35,TTFLGS(T1),35] ;STORE STANDARD VALUES IN DYNAMIC DATA
	PUSH P,T2		;SAVE
	MOVE T2,T1
	TDCALL D,<<FE,TTEXF>,<MC,MCEXF>>	;ENABLE XOFF RECOGNITION IN FE
	STOR T3,TPWID,(T2)	;SET UP STANDARD WIDTH
	STOR T4,TPLEN,(T2)	;STORE PAGE LENGTH
	MOVEI T3,PGMOC2		;SET DEFAULT PAGE UNPAUSE CHARACTER
	TDCALL D,<<MC,RSKP>>	;DECNET NVT?
	 MOVEI T3,PGMONC	;NOT NVT, USE SAME AS COMMAND UNPAUSE
	STOR T3,TTUPC,(T2)
	TDCALL D,<<MC,RSKP>>	;DECNET NVT?
	 MOVEI T3,PGMOFC	;NO, USE SAME AS COMMAND PAUSE
 ---------------------------------
	MOVE Q1,TTICB1		;SETUP USUAL CONTROL CHARACTER MODES
	MOVEM Q1,FCMOD1(T1)
	MOVE Q1,TTICB2
	MOVEM Q1,FCMOD2(T1)
	SETOM TTLINK(T1)	;NO LINKS TO OTHER LINES
	MOVE Q1,NORMTF		;USUAL DEVICE FLAGS AND STATUS
IFDEF  CMU,<
CS,<	CAMN T2,CTYLNO>		;CM31 Assigning CTY?
>
IFNDEF CMU,<	CAMN T2,CTYLNO		;Assigning CTY? >
	TXZ Q1,TT%ALK		;Yes - disallow TALK links
	LOAD T3,TTSTY,(T2)	;GET TYPE OF LINE AGAIN
	CAIN T3,TT.PTY		;IS IT A PTY?
	TXZ Q1,TT%PGM		;YES. NO XON/XOFF THEN
IFDEF  CMU,<
;CM31 *** 3 lines delted ***
REPEAT 0,<			;CM255 Don't need this any more
CC,<	MOVEI T3,.TTLDX		;CM255
	OPSTR <SKIPE>,TTTNT,(T2) ;CM255 Is it Telenet line?
	STOR T3,TT%DUM,Q1 >	;CM255 Yes, make it half duplex
   >;REPEAT 0			;CM255
>
IFNDEF CMU,<
	LOAD T3,TT%WID,Q1	;GET STANDARD WIDTH
	LOAD T4,TT%LEN,Q1	;GET LENGTH
	SETZRO <TT%WID,TT%LEN>,Q1 ;CLEAR OUT THESE VALUES
>
	DPB Q1,[POINT 35,TTFLGS(T1),35] ;STORE STANDARD VALUES IN DYNAMIC DATA
	PUSH P,T2		;SAVE
	MOVE T2,T1
	TDCALL D,<<FE,TTEXF>,<MC,MCEXF>>	;ENABLE XOFF RECOGNITION IN FE
IFDEF  CMU,<
	LOAD T3,TTTYP,(T2)	;CM31 Get type again
;	HRRZ T4,TTYPE1(T3)	;CM31 get video attributes table
;	SKIPE T4		;CM31 is this a video terminal?
;	MOVEI T4,1		;CM31 yes.
;	STOR T4,TTNXO,(T2)	;CM31 set page stop bit appropriately
	LDB T4,TTMBIT		;CM31 Set mechanical bits
	DPB T4,[POINT 3,TTFLGS(T2),3] ;CM31
	LDB T4,TTTLEN		;CM31 Get length
	LDB T3,TTTWID		;CM31 Get width
>
	STOR T3,TPWID,(T2)	;SET UP STANDARD WIDTH
	STOR T4,TPLEN,(T2)	;STORE PAGE LENGTH
	MOVEI T3,PGMOC2		;SET DEFAULT PAGE UNPAUSE CHARACTER
IFDEF  CMU,<	TDCAL1 D,MCB,RSKP	;CS147 DECNET NVT? >
IFNDEF CMU,<	TDCALL D,<<MC,RSKP>>	;DECNET NVT? >
	 MOVEI T3,PGMONC	;NOT NVT, USE SAME AS COMMAND UNPAUSE
	STOR T3,TTUPC,(T2)
IFDEF  CMU,<	TDCAL1 D,MCB,RSKP	;CS147 DECNET NVT? >
IFNDEF CMU,<	TDCALL D,<<MC,RSKP>>	;DECNET NVT? >
	 MOVEI T3,PGMOFC	;NO, USE SAME AS COMMAND PAUSE

***** CHANGE #23; PAGE 15, LINE 8; PAGE 15, LINE 8
;TTSTRT - ACTIVATE ALL LINES.  USED ON RESTART AS WELL AS START

TTSTRT:	SETZM TTHNGT
	SETZM TTHNGN
	SAVEQ			;SAVE REGISTERS
	MOVSI Q1,-NLTYPS	;GET THE COUNT OF TYPES
TYRSLP:	TDCALX Q1,<<DZ,DZRSTR>>,<RET>
	AOBJN Q1,TYRSLP		;DO ALL LINES
 ---------------------------------
;TTSTRT - ACTIVATE ALL LINES.  USED ON RESTART AS WELL AS START

TTSTRT:	SETZM TTHNGT
	SETZM TTHNGN
	SAVEQ			;SAVE REGISTERS
	MOVSI Q1,-NLTYPS	;GET THE COUNT OF TYPES
TYRSLP:
IFDEF  CMU,<	TDCALX Q1,<<CS,CSACTL>,<DZ,DZRSTR>>,<RET> ;CS19 >
IFNDEF CMU,<	TDCALX Q1,<<DZ,DZRSTR>>,<RET> >
	AOBJN Q1,TYRSLP		;DO ALL LINES

***** CHANGE #24; PAGE 17, LINE 25; PAGE 17, LINE 25
;CLOBBERS NO AC'S

;CALLER SHOULD INSURE THAT THE TERMINAL'S DATA CANNOT GO AWAY EITHER
;BY BEING NOSKED OR BY CALLING LCKTTY

STADYN::
	SKIPLE T2,TTACTL(T2)	;HAVE A BLOCK?
 ---------------------------------
;CLOBBERS NO AC'S

;CALLER SHOULD INSURE THAT THE TERMINAL'S DATA CANNOT GO AWAY EITHER
;BY BEING NOSKED OR BY CALLING LCKTTY

STADYN::
	HRRZS T2		; Be sure that
	CAIG T2,NLINES		; Line number is in allowed range
	IFSKP.
	  BUG.(CHK,LINBAD,TTYSRV,SOFT,<STADYN called with illegal line number>,<<T2,D>>,<
Cause:	The routine that returns a terminal line's dynamic data block
	address was passed an invalid line number.

Action:	Proceed the bugcheck, STADYN will call the line 'becoming active'

Data:	Line number
>)
	  SETO T2,		; No, call it 'becoming active'
	  RET			; And return unsuccesfully
	ENDIF.
	SKIPLE T2,TTACTL(T2)	;HAVE A BLOCK?

***** CHANGE #25; PAGE 18, LINE 55; PAGE 18, LINE 55
	NOINT			;BE NOINT WHILE LINE IS LOCKED
LCKTT1:	INCR TTLCK,(T2)		;BUMP THE LOCK
	JE TTLCK,(T2),LCKTT2	;CHECK FOR BAD LOCK
	OKSKD1			;ALLOW SCHEDULING ONCE LOCKED
	RET
LCKTT2:				;HERE TO HANDLE BAD LOCK
	BUG(TTLOKB)		;KILL US
	JRST LCKTT1		;HANDLE IF WE ARE CONTINUED FROM BUGHLT
 ---------------------------------
	NOINT			;BE NOINT WHILE LINE IS LOCKED
LCKTT1:	INCR TTLCK,(T2)		;BUMP THE LOCK
	JE TTLCK,(T2),LCKTT2	;CHECK FOR BAD LOCK
	OKSKD1			;ALLOW SCHEDULING ONCE LOCKED
	RET
LCKTT2:				;HERE TO HANDLE BAD LOCK
IFDEF  CMU,<	BUG(TTLOKB)		;KILL US >
IFNDEF CMU,<	BUG.(HLT,TTLOKB,TTYSRV,SOFT,<BAD TTY LOCK IN TTLCK>,,<

Cause:	The monitor tried to lock a tty line and discovered the lock
	count was overdecremented.

>) >
	JRST LCKTT1		;HANDLE IF WE ARE CONTINUED FROM BUGHLT

***** CHANGE #26; PAGE 19, LINE 27; PAGE 19, LINE 27
	ENDIF.
	OKINT			;ALLOW INTERRUPTS NOW THAT BLOCK IS UNLOCKED
	RET

ULKTMP:	SAVELN
	LOAD T2,TINTL,(T2)
	BUG(ULKBAD,<<T2,D>>)
	OKINT
 ---------------------------------
	ENDIF.
	OKINT			;ALLOW INTERRUPTS NOW THAT BLOCK IS UNLOCKED
	RET

ULKTMP:	SAVELN
	LOAD T2,TINTL,(T2)
IFDEF  CMU,<	BUG(ULKBAD,<<T2,D>>) >
IFNDEF CMU,<	BUG.(CHK,ULKBAD,TTYSRV,HARD,<UNLOCKING TTY WHEN COUNT IS ZERO>,<<T2,D>>,<

Cause:	This BUG is not documented yet.

Action:

>) >
	OKINT

***** CHANGE #27; PAGE 19, LINE 42; PAGE 19, LINE 49
ULKTT1:	IFQN. TTDAL,(T2)	;DID SOMEBODY TRY TO DEALLOCATE THIS?
	  CALL TTYDED		;YES, DO IT NOW
	   NOP
	ENDIF.
	RET
ULKTT2:				;HERE ON BAD UNLOCK
	BUG(TTULKB)		;KILL US
	JRST ULKTT1		;HANDLE IF CONTINUE AFTER BUGHLT
 ---------------------------------
ULKTT1:	IFQN. TTDAL,(T2)	;DID SOMEBODY TRY TO DEALLOCATE THIS?
	  CALL TTYDED		;YES, DO IT NOW
	   NOP
	ENDIF.
	RET
ULKTT2:				;HERE ON BAD UNLOCK
IFDEF  CMU,<	BUG(TTULKB)		;KILL US >
IFNDEF CMU,<	BUG.(CHK,TTULKB,TTYSRV,HARD,<BAD TTY UNLOCK IN ULKTT>,,<

Cause:	The monitor tried to unlock the tty and it was allready 
	unlocked.
>) >
	JRST ULKTT1		;HANDLE IF CONTINUE AFTER BUGHLT

***** CHANGE #28; PAGE 23, LINE 19; PAGE 23, LINE 19

TTYDED:	SAVELN			;ENTRY WITH T2/ DYNAMIC PTR
	STKVAR <TTYDLN,TTYDAD>
	DYNST
	JRST TTYDE4

TTYDEA::TDCALL S,<<TV,TVTDET>>
TTYDE0:	SAVELN
 ---------------------------------

TTYDED:	SAVELN			;ENTRY WITH T2/ DYNAMIC PTR
	STKVAR <TTYDLN,TTYDAD>
	DYNST
	JRST TTYDE4

TTYDEA::
IFDEF  CMU,<TDCALL S,<<CS,CSDE0>,<PN,PNVDEA>,<TV,TVTDET>> ;CM59, CS19 >
IFNDEF CMU,<TDCALL S,<<TV,TVTDET>,<CH,CVTDET>> >
TTYDE0:	SAVELN

***** CHANGE #29; PAGE 23, LINE 39; PAGE 23, LINE 41
	ENDIF.			;[2880]

	JN TTPRM,(T2),TTYDE3	;HANDLE PERMANENT BLOCK SPECIALLY
	JN TTLCK,(T2),TTYDE2	;IF LOCKED, WAIT FOR COUNT TO GO TO 0
	JN TTSAL,(T2),TTYDE2	;IF DOING SENDALL, WAIT UNTIL DONE
	MOVEM T2,TTYDAD		;SAVE ADDRESS OF DYNAMIC DATA
	NOSKD1			;NO SCHEDULING WHILE CHNOFF IN FORCE
 ---------------------------------
	ENDIF.			;[2880]

	JN TTPRM,(T2),TTYDE3	;HANDLE PERMANENT BLOCK SPECIALLY
	JN TTLCK,(T2),TTYDE2	;IF LOCKED, WAIT FOR COUNT TO GO TO 0
	JN TTSAL,(T2),TTYDE2	;IF DOING SENDALL, WAIT UNTIL DONE
	MOVEM T2,TTYDAD		;SAVE ADDRESS OF DYNAMIC DATA
;**;[3105]  Add 1 line after TTYDE4:+6			DML	27-APR-84
	CONSO PI,77000		;[3105] SKIP NOSKED IF NOT AT PI LEVEL 7
	NOSKD1			;NO SCHEDULING WHILE CHNOFF IN FORCE

***** CHANGE #30; PAGE 23, LINE 50; PAGE 23, LINE 54
	CALL TTCIBF		;CLEAR INPUT, RELEASE BUFFERS IF NEEDED
	MOVE T2,TTYDAD		;DYNAMIC DATA ADDRESS AGAIN
	CALL TTXONA		;MAKE SURE IS NOT X-OFF'ED
	MOVE T2,TTYDAD		;GET DYN ADDRESS
	SETZRO TT%PGM,TTFLGS(T2) ;INSURE WE WILL TURN XOFF FLAGS OFF
	TDCALL D,<<FE,TTEXF>,<MC,MCEXF>> ;SET FE XOFF RECOGNITION
	MOVE T2,TTYDLN		;GET BACK LINE NUMBER
	SETZM TTACTL(T2)	;INDICATE NO DYNAMIC DATA
	CHNON DLSCHN		;TURN CHANNEL BACK ON
	OKSKD1			;OK TO SCHED NOW
 ---------------------------------
	CALL TTCIBF		;CLEAR INPUT, RELEASE BUFFERS IF NEEDED
	MOVE T2,TTYDAD		;DYNAMIC DATA ADDRESS AGAIN
	CALL TTXONA		;MAKE SURE IS NOT X-OFF'ED
	MOVE T2,TTYDAD		;GET DYN ADDRESS
	SETZRO TT%PGM,TTFLGS(T2) ;INSURE WE WILL TURN XOFF FLAGS OFF
	TDCALL D,<<FE,TTEXF>,<MC,MCEXF>> ;SET FE XOFF RECOGNITION
	TDCALL D,<<TV,TVRLSB>>	;Release subnegotiation buffers
	MOVE T2,TTYDLN		;GET BACK LINE NUMBER
	SETZM TTACTL(T2)	;INDICATE NO DYNAMIC DATA
	CHNON DLSCHN		;TURN CHANNEL BACK ON
;**;[3105]  Add 1 line after TTYDE1:-8			DML	27-APR-84
	CONSO PI,77000		;[3105] SKIP OKSKED IF NOT AT PI LEVEL 7
	OKSKD1			;OK TO SCHED NOW

***** CHANGE #31; PAGE 23, LINE 62; PAGE 23, LINE 69
	CALL RELRES		;RELEASE THE RESIDENT SPACE
	RETSKP			;SUCCESS

;LINE IS NOT ACTIVE. THIS SHOULD NOT HAPPEN

TTYDE1:	MOVE T2,TTYDLN		;GET LINE NUMBER
	BUG(TTNAC7,<<T2,D>>)
	RETSKP
 ---------------------------------
	CALL RELRES		;RELEASE THE RESIDENT SPACE
	RETSKP			;SUCCESS

;LINE IS NOT ACTIVE. THIS SHOULD NOT HAPPEN

TTYDE1:	MOVE T2,TTYDLN		;GET LINE NUMBER
IFDEF  CMU,<	BUG(TTNAC7,<<T2,D>>) >
IFNDEF CMU,<	BUG.(CHK,TTNAC7,TTYSRV,HARD,<DEALLOCATING INACTIVE LINE>,<<T2,D>>,<

Cause:	This BUG is not documented yet.

Action:

>) >
	RETSKP

***** CHANGE #32; PAGE 25, LINE 18; PAGE 25, LINE 18
;		T1/BUFFER ADDRESS
;		T2/ LINE NUMBER

	SWAPCD

ASGSHT:	LOAD T1,TTSTY,(T2)	; Get line type
	CAIN T1,TT.TVT		; TVT?
 ---------------------------------
;		T1/BUFFER ADDRESS
;		T2/ LINE NUMBER

	SWAPCD

ASGSHT:	LOAD T1,TTSTY,(T2)	; Get line type
IFDEF  CMU,<
	CAIE T1,TT.MCB		;CM236 Sends to non-active MCB's are pretty...
	CAIN T1,TT.PN		;CM236  ...useless, PUP terminals too
	RET			; Yes, don't do this then
>
	CAIN T1,TT.TVT		; TVT?

***** CHANGE #33; PAGE 26, LINE 20; PAGE 26, LINE 20
;IF LINE HAS NO OUTPUT BUFFERS, RETURNS QUIETLY. IF IT HAS A MESSAGE BLOCK,
;IGNORES LINKS.  IF FULLY ACTIVE, HANDLES LINKS

	RESCD

TTCOB1:	SAVELN			;SAVE LINE NUMBER
	CALL LCKTTY		;POINT TO DYNAMIC DATA
 ---------------------------------
;IF LINE HAS NO OUTPUT BUFFERS, RETURNS QUIETLY. IF IT HAS A MESSAGE BLOCK,
;IGNORES LINKS.  IF FULLY ACTIVE, HANDLES LINKS

	RESCD

TTCOB1:	SAVELN			;SAVE LINE NUMBER
IFDEF  CMU,<
PUP,<TCOB.A:>			;CS36 Don't save/restore static line #
>
	CALL LCKTTY		;POINT TO DYNAMIC DATA

***** CHANGE #34; PAGE 28, LINE 30; PAGE 28, LINE 30
	JRST TTCBF8		;NO, KEEP FLUSHING
	SETZRO TTFLO,(T2)	;CLEAR FLUSH FLAG
	JRST TTCBF7		;DONE

TTCBF9:	NOSKD1
	CHNOFF DLSCHN		;TURN OFF CHANNEL ALSO
	JE TTSAL,(T2),TTCBF6	;CHECK FOR SENDLL IN PROGRESS
	CALL CLRSAL		;CLEAR IT
 ---------------------------------
	JRST TTCBF8		;NO, KEEP FLUSHING
	SETZRO TTFLO,(T2)	;CLEAR FLUSH FLAG
	JRST TTCBF7		;DONE

TTCBF9:	NOSKD1
	CHNOFF DLSCHN		;TURN OFF CHANNEL ALSO
	JE TTSAL,(T2),TTCBF6	;CHECK FOR SENDALL IN PROGRESS
	CALL CLRSAL		;CLEAR IT

***** CHANGE #35; PAGE 28, LINE 39; PAGE 28, LINE 39
TTCBF6:
	CALL CFEOB		;CLEAR FE OUTBUF
TTCOB5:	SETZM TTOCT(2)		;ZERO OUTPUT COUNT
	SETZB 3,TTOOUT(2)	;CLEAR OUTPUT POINTER
	EXCH 3,TTOIN(2)		;CLEAR INPUT POINTER
	CALL TTRLBF		;RELEASE BUFFERS
TTCBF7:	CHNON DLSCHN
 ---------------------------------
TTCBF6:
	CALL CFEOB		;CLEAR FE OUTBUF
TTCOB5:	SETZM TTOCT(2)		;ZERO OUTPUT COUNT
	SETZB 3,TTOOUT(2)	;CLEAR OUTPUT POINTER
	EXCH 3,TTOIN(2)		;CLEAR INPUT POINTER
	CALL TTRLBF		;RELEASE BUFFERS
IFDEF  CMU,<
	TDCAL1 D,TVT,TVTCOB	;CS147;[BBN] CLEAR TVT OUTPUT BUFFER (SEND SYNCH)
>
IFNDEF CMU,<	TDCALL D,<<TV,TVTCOB>,<CH,NVTCOB>> >
				;CLEAR NVT OUTPUT BUFFER (SEND SYNCH)
TTCBF7:	CHNON DLSCHN

***** CHANGE #36; PAGE 28, LINE 45; PAGE 28, LINE 50
;**;[2906] Insert 1 line at TTCBF7:+1		DSW	03-Feb-83
;	SETONE TTXFF,(T2)	;[2906] SET FORCE XOFF/XON STATUS
	CALL TTXONA		;REACTIVATE OUTPUT IF NECESSARY
	OKSKD1
	TDCALL D,<<TV,TVTCOB>>	;CLEAR TVT OUTPUT BUFFER (SEND SYNCH)
	CALL CHKBKO		;PERHAPS FORK WAITING FOR OBUF EMPTY
 ---------------------------------
;**;[2906] Insert 1 line at TTCBF7:+1		DSW	03-Feb-83
;	SETONE TTXFF,(T2)	;[2906] SET FORCE XOFF/XON STATUS
	CALL TTXONA		;REACTIVATE OUTPUT IF NECESSARY
	OKSKD1
	CALL CHKBKO		;PERHAPS FORK WAITING FOR OBUF EMPTY

***** CHANGE #37; PAGE 29, LINE 19; PAGE 29, LINE 19
	DYNST			;GET LINE NUMBER
	CAMN 2,CTRLTT		;CONTROLLING TTY?
	SETZM RSCNPT		;YES, CLEAR RESCAN POINTER TOO
	POP P,2			;RESTORE ADDRESS OF DYNAMIC DATA

TTCIBF::SAVELN			;SAVE LINE NUMBER
	NOSKD1
 ---------------------------------
	DYNST			;GET LINE NUMBER
	CAMN 2,CTRLTT		;CONTROLLING TTY?
	SETZM RSCNPT		;YES, CLEAR RESCAN POINTER TOO
	POP P,2			;RESTORE ADDRESS OF DYNAMIC DATA

TTCIBF::SAVELN			;SAVE LINE NUMBER
;**;[3106]  Add 1 line after TTCIBF:+0			DML	7-MAY-84
	CONSO PI,77000		;[3106] GO NOSKED ONLY AT PI LEVEL 7
	NOSKD1

***** CHANGE #38; PAGE 29, LINE 27; PAGE 29, LINE 29
	SETZRO <TTRFG>,(T2)	;CLEAR BKJFN FLAG
	SETZB T1,TTICT(T2)	;CLEAR COUNT OF INPUT CHARACTERS
	STOR T1,TYLCH,(T2)	;CLOBBER LAST CH IN CASE CR
	SETZB 3,TTIOUT(T2)	;CLEAR POINTER FOR REMOVING CHARACTERS
	EXCH 3,TTIIN(2)		; AND POINTER FOR ADDING CHARACTERS
	CALL TTRLBF		;RELEASE INPUT BUFFERS
	OKSKD1
 ---------------------------------
	SETZRO <TTRFG>,(T2)	;CLEAR BKJFN FLAG
	SETZB T1,TTICT(T2)	;CLEAR COUNT OF INPUT CHARACTERS
	STOR T1,TYLCH,(T2)	;CLOBBER LAST CH IN CASE CR
	SETZB 3,TTIOUT(T2)	;CLEAR POINTER FOR REMOVING CHARACTERS
	EXCH 3,TTIIN(2)		; AND POINTER FOR ADDING CHARACTERS
	CALL TTRLBF		;RELEASE INPUT BUFFERS
;**;[3106]  Add 1 line after TTCIBF:+7			DML	7-MAY-84
	CONSO PI,77000		;[3106] GO OKSKED ONLY AT PI LEVEL 7
	OKSKD1

***** CHANGE #39; PAGE 31, LINE 31; PAGE 31, LINE 31
	ENDIF.
;**;[2883]MAKE CHANGES AT TTSOBE:+11L	TAM	9-DEC-82
	MOVE 1,TTOCT(T2)	;[2883] GET COUNT OF CHARS IN BUFFER
	JN TTOTP,(T2),R		;RETURN NOSKIP IF OUTPUT IS STILL ACTIVE
	SKIPLE 1		;[2883] BYTES STILL IN -10 MEMORY
	RET			;NO. NONSKIP
	TDCALL D,<<FE,TTSBEF>,<MC,MCSBEF>>
 ---------------------------------
	ENDIF.
;**;[2883]MAKE CHANGES AT TTSOBE:+11L	TAM	9-DEC-82
	MOVE 1,TTOCT(T2)	;[2883] GET COUNT OF CHARS IN BUFFER
	JN TTOTP,(T2),R		;RETURN NOSKIP IF OUTPUT IS STILL ACTIVE
	SKIPLE 1		;[2883] BYTES STILL IN -10 MEMORY
	RET			;NO. NONSKIP
IFDEF  CMU,<
	OPSTR <SKIPLE T1,>,TSALC,(T2) ;CMB52 Count TTMSG chars too
	RET			;CMB52 Nonskip
>
	TDCALL D,<<FE,TTSBEF>,<MC,MCSBEF>>

***** CHANGE #40; PAGE 32, LINE 21; PAGE 32, LINE 21
	 SKIPN CTRLOF		;NEW STYLE?
	IFSKP.
	  MOVEI T1,TTOMRK	;YES, JUST PUT MARKER IN OUTPUT STREAM
	  CALL TCOUM
	  RETSKP
	ENDIF.
	TDCALL D,<<TV,TVTDOB>>
	CALL TSOBED		;SEE IF OUTPUT IN PIPE
 ---------------------------------
	 SKIPN CTRLOF		;NEW STYLE?
	IFSKP.
	  MOVEI T1,TTOMRK	;YES, JUST PUT MARKER IN OUTPUT STREAM
	  CALL TCOUM
	  RETSKP
	ENDIF.
IFDEF  CMU,<	TDCAL1 D,TVT,TVTDOB	;CS147 >
IFNDEF CMU,<	TDCALL D,<<TV,TVTDOB>,<CH,NVTDOB>> >
	CALL TSOBED		;SEE IF OUTPUT IN PIPE

***** CHANGE #41; PAGE 32, LINE 28; PAGE 32, LINE 29
	IFSKP. <RETSKP>		;NO, RETURN OK

;CHARACTERS ARE PRESENT. DISMISS UNTIL THEY ARE GONE

TTDBE1:	TDCALL D,<<PT,CHKPTA>>	;CHECK FOR INTERRUPT NEEDED
	SETONE TTBKO,(T2)	;NOTE WAITING FOR OUTPUT EVENT
 ---------------------------------
	IFSKP. <RETSKP>		;NO, RETURN OK

;CHARACTERS ARE PRESENT. DISMISS UNTIL THEY ARE GONE

TTDBE1:
IFDEF  CMU,<	TDCAL1 D,PTY,CHKPTA	;CS147 CHECK FOR INTERRUPT NEEDED >
IFNDEF CMU,<	TDCALL D,<<PT,CHKPTA>>	;CHECK FOR INTERRUPT NEEDED >
	SETONE TTBKO,(T2)	;NOTE WAITING FOR OUTPUT EVENT

***** CHANGE #42; PAGE 36, LINE 15; PAGE 36, LINE 15

;IMPLEMENTS SFMOD JSYS

TTSMOD::PUSH P,1
	TRNE 1,400000		;THIS BIT MUST BE ZERO
	ITERR(DECRSV,<CALL ULKTTY>)	;NOT ZERO - ERROR RETURN
	XOR 1,TTFLGS(2)		;FIND THE CHANGED BITS
 ---------------------------------

;IMPLEMENTS SFMOD JSYS

TTSMOD::PUSH P,1
	TRNE 1,400000		;THIS BIT MUST BE ZERO
	ITERR(DECRSV,<CALL ULKTTY>)	;NOT ZERO - ERROR RETURN
;	TDCALL D,<<FE,R>,<MC,R>,<NT,NVTMOD>,<DZ,R>,<TV,NVTMOD>,<CH,NVTMOD>>
IFDEF  CMU,<	TDCAL1 D,TVT,NVTMOD	;CS147;[BBN] >
IFNDEF CMU,<	TDCALL D,<<TV,NVTMOD>,<CH,NVTMOD>> >
	XOR 1,TTFLGS(2)		;FIND THE CHANGED BITS

***** CHANGE #43; PAGE 38, LINE 39; PAGE 38, LINE 39
	CALL ULKTTY		;ALLOW DEALLOCATION
	RETSKP			;SUCCESS


;GET DEVICE DEPENDENT BITS

TTGSTS::LOAD T3,TLTYP,(T2)	;GET VECTOR ADR FOR THIS TTY
 ---------------------------------
	CALL ULKTTY		;ALLOW DEALLOCATION
	RETSKP			;SUCCESS


;GET DEVICE DEPENDENT BITS

	RESCD			;CMB53 called from ttlink code now
TTGSTS::LOAD T3,TLTYP,(T2)	;GET VECTOR ADR FOR THIS TTY

***** CHANGE #44; PAGE 38, LINE 46; PAGE 38, LINE 47
	SETZ T1,
	XCT PARTBL(T3)		;SEE IF PARITY BIT WOULD GET SET
	CAIE T1,0
	MOVX T1,GD%PAR		;YES
	RET			;AND DONE
 ---------------------------------
	SETZ T1,
	XCT PARTBL(T3)		;SEE IF PARITY BIT WOULD GET SET
	CAIE T1,0
	MOVX T1,GD%PAR		;YES
	RET			;AND DONE
	SWAPCD			;CMB53 called from ttlink code now

***** CHANGE #45; PAGE 40, LINE 21; PAGE 40, LINE 21
TTSSPD::
	STKVAR <TTSLIN>		;SAVE LINE NUMBER HERE
	CAIL B,NLINES		;VALID LINE NUMBER?
	RETSKP			;NO. JUST RETURN QUIETLY
	MOVEM B,TTSLIN		;SAVE LINE NUMBER
	UMOVE C,C		;GET SPEED
	GTOKM (.GOTBR,<B,C>,[RETBAD ()]) ;DO GETOK IF NECESSARY AND RETBAD IF ERROR
	TDCALL S,<<FE,TTSSP2>,<DZ,DZSSP2>>
	MOVE B,TTSLIN		;GET BACK LINE NUMBER
 ---------------------------------
TTSSPD::
	STKVAR <TTSLIN>		;SAVE LINE NUMBER HERE
	CAIL B,NLINES		;VALID LINE NUMBER?
	RETSKP			;NO. JUST RETURN QUIETLY
	MOVEM B,TTSLIN		;SAVE LINE NUMBER
	UMOVE C,C		;GET SPEED
IFDEF  CMU,<
;CM324 *** Begin ***
CC,<	UMOVE CX,2		;get user args
	TXNN CX,MO%IAM		;I am micom server?
	IFSKP.			;yes
	  MOVE CX,CAPENB	;we realy are the micom server, yes?
	  TXNN CX,SC%WHL!SC%OPR!SC%TTY
	   RETBAD(WHELX1)	;no! punt this charlatan
	  AOS MCMRUN		;a micom server is running, report timeouts now
	  CAMN T3,[-1]		;just saying there is a micom server now?
	   RETSKP		;yes, fine we have set MCMRUN
	  OPSTR <SKIPN>,TTMCM,(T2) ;this is a micom line isn't it?
	   RETBAD(TTYMCE)	;no, server must be confused
	  OPSTR <SKIPE>,TTNMC,(T2) ;server set this line yet?
	   RETBAD(TTYMCE)	;yes, don't set it twice
	  SETONE TTNMC,(T2)	;server is setting the speed now
	ENDIF.
   >;CC
;CM324 *** End ***
>
	GTOKM (.GOTBR,<B,C>,[RETBAD ()]) ;DO GETOK IF NECESSARY AND RETBAD IF ERROR
IFDEF  CMU,<	TDCALL S,<<FE,TTSSP2>,<DZ,DZSSP2>,<TV,TVSSP2>>,<JRST TTSSP0> ;[BBN];CMB54 >
IFNDEF CMU,<	TDCALL S,<<FE,TTSSP2>,<DZ,DZSSP2>,<TV,TVSSP2>> >
	MOVE B,TTSLIN		;GET BACK LINE NUMBER

***** CHANGE #46; PAGE 40, LINE 35; PAGE 40, LINE 56
	MOVE T2,TTSLIN		;GET LINE NUMBER AGAIN
	CALL SETOBF		;SET BUFFERING
	MOVE T2,T1		;GET DYNAMIC DATA ADDRESS
	CALL ULKTTY		;DONE, UNLOCK DATA
	RETSKP			; AND RETURN SUCCESS

	ENDSV.			;END STKVAR
 ---------------------------------
	MOVE T2,TTSLIN		;GET LINE NUMBER AGAIN
	CALL SETOBF		;SET BUFFERING
	MOVE T2,T1		;GET DYNAMIC DATA ADDRESS
	CALL ULKTTY		;DONE, UNLOCK DATA
	RETSKP			; AND RETURN SUCCESS

IFDEF  CMU,<
TTSSP0: MOVEM C,TTSPWD(B)	;CMB54 allow users to set the speed on
	RET			;CMB54  random terminals
>
	ENDSV.			;END STKVAR

***** CHANGE #47; PAGE 40, LINE 55; PAGE 40, LINE 80
;		    -1 IF NOT PHYSICAL TERMINAL OR SPEED NOT SET

;IMPLEMENTS THE .MORSP FUNCTION OF MTOPR

TTRSPD::CAIL B,NLINES		;LEGAL LINE NUMBER?
	JRST TTRSP2		;NO. RETURN NO SPEED
	TDCALL S,<<MC,RSKP>,<PT,RSKP>,<TV,RSKP>> ;SKIP IF SPEED NOT KNOWN
	 SKIPA C,TTSPWD(B)	;GET SPEED SETTING
 ---------------------------------
;		    -1 IF NOT PHYSICAL TERMINAL OR SPEED NOT SET

;IMPLEMENTS THE .MORSP FUNCTION OF MTOPR

TTRSPD::CAIL B,NLINES		;LEGAL LINE NUMBER?
	JRST TTRSP2		;NO. RETURN NO SPEED
IFDEF  CMU,<	TDCALL S,<<MC,RSKP>,<PT,RSKP>,<TV,RSKP>> >
IFNDEF CMU,<	TDCALL S,<<MC,RSKP>,<PT,RSKP>,<TV,R>,<CH,RSKP>> >
				;SKIP IF SPEED NOT KNOWN
	 SKIPA C,TTSPWD(B)	;GET SPEED SETTING

***** CHANGE #48; PAGE 41, LINE 12; PAGE 41, LINE 12
;	T2/ LINE NUMBER
;RETURNS:	+1 ALWAYS
;ALL REGS PRESERVED

SETOBF:	SAVET			;SAVE ALL REGS
	MOVE T3,TTSPWD(T2)	;GET LINE SPEED
	CAMN T3,[-1]		;KNOWN SPEED?
	RET			;NO. GIVE UP THEN
	HRRZS T3		;YES. GET OUTPUT SPEED
	MOVE T4,IBFRC		;ASSUME SLOW SPEED
	CAILE T3,LOWSPD		;ACCEPTABLE?
	MOVE T4,IBFRC1		;NO. GET OTHER VALUE
	MOVEM T4,TTBFRC(T1)	;SET COUNT FIELDS
 ---------------------------------
;	T2/ LINE NUMBER
;RETURNS:	+1 ALWAYS
;ALL REGS PRESERVED

SETOBF:	SAVET			;SAVE ALL REGS
	MOVE T3,TTSPWD(T2)	;GET LINE SPEED
IFDEF  CMU,<
	LOAD T4,TTSTY,(T2)	;CS143 Get tty type
	CAIN T4,TT.TVT		;CS143 Only do this to TVTs.
	CAME T3,[-1]		;CS143 Unknown speed?
	IFSKP.			;CS143 Yes, assume network
	  MOVE T4,IBFRC2	;CS143 Lots of buffers, for big TCP packets
	ELSE.			;CS143
;CS143	RET			;NO. GIVE UP THEN
>
IFNDEF CMU,<
	CAMN T3,[-1]		;KNOWN SPEED?
	RET			;NO. GIVE UP THEN
>
	HRRZS T3		;YES. GET OUTPUT SPEED
	MOVE T4,IBFRC		;ASSUME SLOW SPEED
	CAILE T3,LOWSPD		;ACCEPTABLE?
	MOVE T4,IBFRC1		;NO. GET OTHER VALUE
IFDEF  CMU,<	ENDIF.			;CS143 >
	MOVEM T4,TTBFRC(T1)	;SET COUNT FIELDS

***** CHANGE #49; PAGE 43, LINE 2; PAGE 43, LINE 2
	SETONE TTPSFK,(T2)		;YES, CLEAR IT
TTDTP2:	CALL ULKTTY			;UNLOCK DATABASE
	SOJGE T1,TTDTP1			;LOOP THRU ALL LINES
	RET

;TTSNTS - CODE TO DO A SET/RESET NON-TERMINAL STATUS FOR TTY LINE.
 ---------------------------------
	SETONE TTPSFK,(T2)		;YES, CLEAR IT
TTDTP2:	CALL ULKTTY			;UNLOCK DATABASE
	SOJGE T1,TTDTP1			;LOOP THRU ALL LINES
	RET

IFDEF  CMU,<
;CS26 *** Begin ***
; Set refuse sends status
;Accepts:
; T2 - Internal line number to set
; T3 - Value (.MO%ALW or .MO%REF)
; Returns+1: Success
; Returns+2: Failure (Tty not active)

TTSTST::CALL LCKTTY		;Lock down the dynamic data
	 RETBAD(TTYX01,<CALL ULKTTY>) ;Must have regular block
	STOR T3,TTSEN,(T2)	;Set the value
	CALL ULKTTY		;Done
	RETSKP			;Succeed

; Return refuse sends setting
;Accepts:
; T2 - Internal line number to set
; Returns+1: Failure (Tty not active)
; Returns+2 T1 - Refuse sends setting

TTGTST::CALL LCKTTY		;Lock down the dynamic data
	 RETBAD(TTYX01,<CALL ULKTTY>) ;Must have regular block
	LOAD T1,TTSEN,(T2)	;Set the value
	CALL ULKTTY		;Done
	RETSKP			;Succeed
;CS26 *** End ***
>

;TTSNTS - CODE TO DO A SET/RESET NON-TERMINAL STATUS FOR TTY LINE.

***** CHANGE #50; PAGE 44, LINE 2; PAGE 45, LINE 2
	CAIL B,NLINES		;A VALID TERMINAL LINE?
	RET			;NO. ASSUME DEFAULT
	LOAD T3,TTNTS,(T2)	;GET NON-TERMINAL STATUS
	RET

;TTSTIH - TEST INPUT REQUIRED
 ---------------------------------
	CAIL B,NLINES		;A VALID TERMINAL LINE?
	RET			;NO. ASSUME DEFAULT
	LOAD T3,TTNTS,(T2)	;GET NON-TERMINAL STATUS
	RET

;TELNET negotiation MTOPR% functions
; 2/	internal line number

; .MONEG - perform a TELNET negotiation
TTTNEG::
	CALL LCKTTY		; Convert to dynamic data
	  RETBAD (,<CALL ULKTTY>)  ; Could not lock it
IFDEF  CMU,<	TDCALN D,TVT,NONEG	;CS147 Error if not TVT
		CALL TVTNEG		;CS147 Else, do it >
IFNDEF CMU,<	TDCALL D,<<FE,NONEG>,<MC,NONEG>,<TV,TVTNEG>,<CH,NONEG>> >
	  RETBAD (,<CALL ULKTTY>)  ; Return error, unlock TTY
	CALL ULKTTY		; Unlock TTY
	RETSKP			; Success

; .MOGSB return subnegotiation byte string
TTTGSB::
	CALL LCKTTY
	  RETBAD (,<CALL ULKTTY>)  ; Could not lock it
IFDEF  CMU,<	TDCALN D,TVT,NONEG	;CS147 Error if not TVT
		CALL TVTGSB		;CS147 >
IFNDEF CMU,<	TDCALL D,<<FE,NONEG>,<MC,NONEG>,<TV,TVTGSB>,<CH,NONEG>> >
	  RETBAD (,<CALL ULKTTY>)  ; Return error, unlock TTY
	CALL ULKTTY		; Unlock TTY
	RETSKP			; Success

; .MOSSB send subnegotiation byte string
TTTSSB::
	CALL LCKTTY
	  RETBAD (,<CALL ULKTTY>)  ; Could not lock it
IFDEF  CMU,<	TDCALN D,TVT,NONEG	;CS147
		CALL TVTSSB		;CS147 >
IFNDEF CMU,<	TDCALL D,<<FE,NONEG>,<MC,NONEG>,<TV,TVTSSB>,<CH,NONEG>> >
	  RETBAD (,<CALL ULKTTY>)  ; Return error, unlock TTY
	CALL ULKTTY		; Unlock TTY
	RETSKP			; Success

; Invalid line type for TELNET negotiation functions.
NONEG:	RETBAD (DESX9)		; Invalid operation for this device


;TTSTIH - TEST INPUT REQUIRED

***** CHANGE #51; PAGE 46, LINE 2; PAGE 48, LINE 2
TTPPCR::LOAD T1,TTUPC,(T2)
	LOAD T3,TTPPC,(T2)
	HRL T1,T3
	RET

	SUBTTL FULL WAKE-UP CLASSES SUPPORT
 ---------------------------------
TTPPCR::LOAD T1,TTUPC,(T2)
	LOAD T3,TTPPC,(T2)
	HRL T1,T3
	RET

IFDEF  CMU,<
;CM31 *** Begin ***
;Set static terminal data
	RESCD			;CS19 Called from PI
TTSSTP::SETZ T3,		;Assume not public
	TXZE T1,MO%STU		;Public?
	SETO T3,		;Set it
	STOR T3,TTPBL,(T2)
CC,<	SETZ T3,		;Assume not Telenet
	TXZE T1,MO%STT		;Is it?
	SETO T3,		;Set it
	STOR T3,TTTNT,(T2)
	SETZ T3,		;Assume not Micom line
	TXZE T1,MO%STM		;Is it?
	SETO T3,		;Set it
	STOR T3,TTMCM,(T2)
 	SETZ T3,		;Assume not autobauded by Micom server
	TXZE T1,MO%STW		;Is it?
	SETO T3,		;Set it
	STOR T3,TTABM,(T2)
   >;CC
	SETZ T3,		;Assume not dialup line
	TXZE T1,MO%STI		;Is it?
	SETO T3,		;Set it
	STOR T3,TTDIA,(T2)
	STOR T1,TTITP,(T2)
	CALL LCKTTY		;Find dynamic data
	 JUMPLE T2,R		;If none, forget it
	STOR T1,TTTYP,(T2)	;Copy type
	JN <TTSHT,TTMES>,(T2),TTSSTX ;CS19 Done if short or message
	MOVEI T3,(T1)		;Save index
	LDB T1,TTMBIT		;Get other mechanical bits
	DPB T1,[POINT 3,TTFLGS(T2),3]
	LDB T1,TTTWID		;Get width
	STOR T1,TPWID,(T2)
	LDB T1,TTTLEN		;Get length
	STOR T1,TPLEN,(T2)
;CM31	HRRZ T1,TTYPE1(T3)	;get video attributes table
;CM31	SKIPE T1		;is this a video terminal?
;CM31	MOVEI T1,1		;yes.
;CM31	STOR T1,TTNXO,(T2)	;set page stop bit appropriately
TTSSTX:	CALL ULKTTY		;Release lock
	RET

	SWAPCD

;Get static terminal data

TTRSTP::CAIL T2,NLINES		;Legal line number?
	JRST RETZ		;No
	LOAD T1,TTSTY,(T2)	;Get line type
	CAIN T1,TT.PTY		;PTY?
	JRST RETZ		;Yes, nothing more to say
	LOAD T1,TTITP,(T2)	;Get initial terminal type
	OPSTR <SKIPE>,TTFEM,(T2) ;Is it remote line?
	TXO T1,MO%RTD		;Say so
	OPSTR <SKIPE>,TTPBL,(T2) ;Is it public?
	TXO T1,MO%RTU		;Say so
CC,<	OPSTR <SKIPE>,TTTNT,(T2) ;Is it Telenet line?
	TXO T1,MO%RTT		;Say so
	OPSTR <SKIPE>,TTMCM,(T2) ;Is it a Micom line?
	TXO T1,MO%RTM		;Say so
	OPSTR <SKIPE>,TTABM,(T2) ;Is it autobauded by the Micom server?
	TXO T1,MO%RTW		;Say so
   >;CC
	OPSTR <SKIPE>,TTDIA,(T2) ;Is it dialup line?
	TXO T1,MO%RTI		;Say so
	RET
;CM31 *** End ***
>

	SUBTTL FULL WAKE-UP CLASSES SUPPORT

***** CHANGE #52; PAGE 52, LINE 43; PAGE 55, LINE 43
	  SKIPN TTCAPF		;BUT ONLY IF CAPABILITIES PRESENT
	  ITERR (GTDIX1,<SETOM SALLCK>)	;WRONG CAPS, ITRAP AND RELEASE LOCK
	ELSE.
	  CAIL A,.TTDES		;MAKE SURE TTY ARGUMENT IS NOT TOO SMALL
	  CAIL A,.TTDES+NLINES	;AND NOT TOO LARGE
       	  ITERR (GTJIX2,<SETOM SALLCK>)	;REPORT INVALID AND RELEASE LOCK
	ENDIF.
 ---------------------------------
	  SKIPN TTCAPF		;BUT ONLY IF CAPABILITIES PRESENT
	  ITERR (GTDIX1,<SETOM SALLCK>)	;WRONG CAPS, ITRAP AND RELEASE LOCK
	ELSE.
	  CAIL A,.TTDES		;MAKE SURE TTY ARGUMENT IS NOT TOO SMALL
	  CAIL A,.TTDES+NLINES	;AND NOT TOO LARGE
       	  ITERR (GTJIX2,<SETOM SALLCK>)	;REPORT INVALID AND RELEASE LOCK
IFDEF  CMU,<
	  SKIPE TTCAPF		;CS26 Privaliged?
	ANSKP.			;CS26 Yes, allow it
	  PUSH P,T1		;CS26 save it
	  PUSH P,T2		;CS26
	  MOVE T2,T1		;CS26
	  TXZ T2,.TTDES		;CS26 Make it a line number
	  CALL TTGTST		;CS26 Get the refuse sends setting
	   ITERR(,<SETOM SALLCK>) ;CS26 Line isn't active
	  JUMPN T1,[ITERR (TTYX02,<SETOM SALLCK>)] ;CS26 Refused
	  POP P,T2		;CS26
	  POP P,T1		;CS26 Get back number
>
	ENDIF.

***** CHANGE #53; PAGE 52, LINE 60; PAGE 55, LINE 73
				;SETUP SENDALL BFR
	 ITERR ,<SETOM SALLCK>

;BUFFER IS SET UP WITH TEXT. IF THERE ARE NO CHARACTERS,
;WE ARE DONE.

	SKIPN TTMSCT		;AT LEAST ONE BYTE?
	JRST TTMS50		;NO. GO FINISH
	JUMPL P3,[SETZ C,	;IF DOING ALL LINES, START WITH LINE TYPE 0
		JRST TTMS26]	;ENTER LOOP
	MOVE B,P3		;SINGLE LINE, GET LINE NUMBER
	TDCALL S,<<FE,TTMSSN>,<MC,MCCKSA>,<DZ,RSKP>,<TV,TVMSNT>> ;SKIP TO SEND
	 JRST TTMS50		;SKIP THIS LINE
 ---------------------------------
				;SETUP SENDALL BFR
	 ITERR ,<SETOM SALLCK>

;BUFFER IS SET UP WITH TEXT. IF THERE ARE NO CHARACTERS,
;WE ARE DONE.

	SKIPN C,TTMSCT		;AT LEAST ONE BYTE? Pass count to TDCALL
	JRST TTMS50		;NO. GO FINISH
	JUMPL P3,[SETZ C,	;IF DOING ALL LINES, START WITH LINE TYPE 0
		JRST TTMS26]	;ENTER LOOP
	MOVE B,P3		;SINGLE LINE, GET LINE NUMBER
	MOVE A,SALBFR		;PASS BYTE PTR
	HRLI A,(POINT 8,0)
	LOAD D,TTSTY,(B)	;Get line type for TDCALL
IFDEF  CMU,<
	TDCALL S,<<FE,TTMSSN>,<MC,MCCKSA>,<CS,CSNDAL>,<DZ,RSKP>,<PN,PNVSND>,<TV,TVMSNT>> ;CS19 >
IFNDEF CMU,<
	TDCALL S,<<FE,TTMSSN>,<MC,MCCKSA>,<DZ,RSKP>,<TV,TVMSNT>,<CH,TTMSCH>>
>				;SKIP TO SEND
	 JRST TTMS50		;SKIP THIS LINE

***** CHANGE #54; PAGE 53, LINE 30; PAGE 56, LINE 30
;	+2 AND T2/LINE NUMBER: DO THIS LINE

TTMS20:	MOVE A,SALBFR		;PASS BYTE PTR
	HRLI A,(POINT 8,0)
	MOVE D,C		;SAVE THE LINE TYPE FOR THE TDCALL
	MOVE C,TTMSCT		;PASS COUNT
	TDCALL S,<<FE,TTMSAL>,<MC,MCCKSA>,<PT,TTMSNO>,<DZ,DZSNDL>,<TV,TVMSNT>>
	 JRST TTMS21		;DON'T DO THIS LINE. GO ON TO NEXT LINE
 ---------------------------------
;	+2 AND T2/LINE NUMBER: DO THIS LINE

TTMS20:	MOVE A,SALBFR		;PASS BYTE PTR
	HRLI A,(POINT 8,0)
	MOVE D,C		;SAVE THE LINE TYPE FOR THE TDCALL
	MOVE C,TTMSCT		;PASS COUNT
IFDEF  CMU,<
	TDCALL S,<<FE,TTMSAL>,<MC,MCCKSA>,<PT,TTMSNO>,<CS,CSNDAL>,<DZ,DZSNDL>,<PN,PNVSND>,<TV,TVMSNT>> ;CS19
>
IFNDEF CMU,<
	TDCALL S,<<FE,TTMSAL>,<MC,MCCKSA>,<PT,TTMSNO>,<DZ,DZSNDL>,<TV,TVMSNT>,<CH,TTMSCH>>
>
	 JRST TTMS21		;DON'T DO THIS LINE. GO ON TO NEXT LINE

***** CHANGE #55; PAGE 56, LINE 14; PAGE 59, LINE 14
CKSALL:
	SAVEAC <T1>
	MOVE T1,T2		;SAVE THE LINE NUMBER
	CALL STADY		;STILL ACTIVE?
	 RET			;NO, DONE
	JE TTSAL,(T2),R		;DONE IF NO LONGER DOING SENDALL
	JN TTSHU,(T2),[CALLRET CLRSAL] ;IF LINE SHUT OFF, CLEAR IMMED.
	DECR TSALT,(T2)		;COUNTDOWN SECONDS
 ---------------------------------
CKSALL:
	SAVEAC <T1>
	MOVE T1,T2		;SAVE THE LINE NUMBER
	CALL STADY		;STILL ACTIVE?
	 RET			;NO, DONE
	JE TTSAL,(T2),R		;DONE IF NO LONGER DOING SENDALL
IFDEF  CMU,<
;CMB100	JN TTSHU,(T2),[CALLRET CLRSAL] ;IF LINE SHUT OFF, CLEAR IMMED.
>
	JN TTSHU,(T1),[CALLRET CLRSAL] ;IF LINE SHUT OFF, CLEAR IMMED.
	DECR TSALT,(T2)		;COUNTDOWN SECONDS

***** CHANGE #56; PAGE 56, LINE 32; PAGE 59, LINE 35
	MOVEI T3,CKSALL		;ROUTINE TO CALL
	CALLRET TTQAD		;QUEUE IT

;CLEAR SENDALL STATE FOR LINE
; T2/ DYNAMIC PTR

CLRSAL:	SETZRO <TSALC>,(T2)	;CLEAR SENDALL POINTER, COUNT
;**;[2863] At CLRSAL: +1L, Modified 1 line                  SM  8-Nov-82
	SETZM TTSAL2(T2)	;[2863] (T2) IS THE POINTER
	SETZRO TTSAL,(T2)	;INDICATE NO LONGER DOING SENDALL
	IFQN. TTDAL,(T2)	;DID SOMEBODY TRY TO DEALLOCATE THIS?
 ---------------------------------
	MOVEI T3,CKSALL		;ROUTINE TO CALL
	CALLRET TTQAD		;QUEUE IT

;CLEAR SENDALL STATE FOR LINE
; T2/ DYNAMIC PTR

CLRSAL:	CONI PI,CX		; Get current PI state
	PUSH P,CX		; save
	PIOFF			; turn them off
	SETZRO <TSALC>,(T2)	;CLEAR SENDALL POINTER, COUNT
;**;[2863] At CLRSAL: +1L, Modified 1 line                  SM  8-Nov-82
	SETZM TTSAL2(T2)	;[2863] (T2) IS THE POINTER
	SETZRO TTSAL,(T2)	;INDICATE NO LONGER DOING SENDALL
	POP P,CX		; Get old pi state
	ANDI CX,200		; Mask off right bit
	CONO PI,(CX)		; and restore
	IFQN. TTDAL,(T2)	;DID SOMEBODY TRY TO DEALLOCATE THIS?

***** CHANGE #57; PAGE 56, LINE 48; PAGE 59, LINE 57
	CALLRET RELSAL		;RELEASE SENDALL STORAGE
	RET

;RELEASE SENDALL STORAGE

RELSAL:	SAVEAC <T1,T2>
	MOVE T1,SALBFR
	CALL RELRES
 ---------------------------------
	CALLRET RELSAL		;RELEASE SENDALL STORAGE
	RET

;RELEASE SENDALL STORAGE

RELSAL:	SAVEAC <T1,T2>
IFDEF  CMU,<
	MOVEI T1,0		;CM236 make sure we never release twice
	EXCH T1,SALBFR		;CM236 read and set to zero in unitary opn
	SKIPE T1		;CM236 only release if something there...
>
IFNDEF CMU,<	MOVE T1,SALBFR >
	CALL RELRES

***** CHANGE #58; PAGE 57, LINE 34; PAGE 60, LINE 34
	BLCAL. ASGRSB,<C,[.RESP3],[.RESTP]> ;GET RES STG FROM TERMINAL POOL
	 RETBAD()		;FAILED - SHOULDN'T HAPPEN
	MOVEM A,@TTMSBF		;SAVE ADDRESS
	HRLI A,(POINT 8,0)	;BUILD BYTE PTR - 8-BIT, INCLUDES PARITY BIT
	SKIPE TTCAPF		;CAPABILITIES?
	IFSKP.
	  HRROI B,[ASCIZ /From /] ;No, must prefix header
	  CALL GSALCP		;BUILD STRING IN RES STG
	  HRROI B,USRNAM+1
	  CALL GSALCP		;USER NAME
	  HRROI B,[ASCIZ / on line /]
	  CALL GSALCP
 ---------------------------------
	BLCAL. ASGRSB,<C,[.RESP3],[.RESTP]> ;GET RES STG FROM TERMINAL POOL
	 RETBAD()		;FAILED - SHOULDN'T HAPPEN
	MOVEM A,@TTMSBF		;SAVE ADDRESS
	HRLI A,(POINT 8,0)	;BUILD BYTE PTR - 8-BIT, INCLUDES PARITY BIT
	SKIPE TTCAPF		;CAPABILITIES?
	IFSKP.
IFDEF  CMU,<	  HRROI B,[ASCIZ /
[/]				;CS26 No, must prefix header >
IFNDEF CMU,<	  HRROI B,[ASCIZ /From /] ;No, must prefix header >
	  CALL GSALCP		;BUILD STRING IN RES STG
	  HRROI B,USRNAM+1
	  CALL GSALCP		;USER NAME
IFDEF  CMU,<	  HRROI B,[ASCIZ /, TTY/] ;CS26 >
IFNDEF CMU,<	  HRROI B,[ASCIZ / on line /] >
	  CALL GSALCP

***** CHANGE #59; PAGE 57, LINE 81; PAGE 60, LINE 84
	CAIL P1," "		;[2885] BETWEEN SPACE AND
	CAILE P1,"z"+40		;[2885]	LOWER CASE Z
	SKIPA			;[2885] YES, MUST BE A CONTROL CHARACTER
	JRST GETSA2		;[2885] REGULAR CHARS ARE OK
	CAIN P1,"M"-100		;[2885] CR?
	JRST GETSA4		;[2885] YES
	CAIN P1, "J"-100	;[2885] LF?
	JRST GETSA5		;[2885] YES
 ---------------------------------
	CAIL P1," "		;[2885] BETWEEN SPACE AND
	CAILE P1,"z"+40		;[2885]	LOWER CASE Z
	SKIPA			;[2885] YES, MUST BE A CONTROL CHARACTER
	JRST GETSA2		;[2885] REGULAR CHARS ARE OK
	CAIN P1,"M"-100		;[2885] CR?
	JRST GETSA4		;[2885] YES
	CAIN P1,"J"-100		;[2885] LF?
	JRST GETSA5		;[2885] YES

***** CHANGE #60; PAGE 57, LINE 123; PAGE 60, LINE 126
;END OF STRING OR COUNT EXHAUSTED (COUNT CAN ONLY BE WRONG IF STRING
;IN USER SPACE CHANGED SINCE WE COUNTED IT.)

GETSA6:	MOVEM P1,@TTMSBY	;SAVE LAST BYTE COPIED
	RETSKP

;LOCAL SUBROUTINE TO COPY STRING
 ---------------------------------
;END OF STRING OR COUNT EXHAUSTED (COUNT CAN ONLY BE WRONG IF STRING
;IN USER SPACE CHANGED SINCE WE COUNTED IT.)

GETSA6:	MOVEM P1,@TTMSBY	;SAVE LAST BYTE COPIED
	RETSKP

IFDEF  CMU,<
;CM290 Change illegal send characters to $
; P1/ Sendall character
; CALL FIXSNA
; P1/ Fixed up Character
; Preserves:ALL
FIXSNA:	SKIPE TTCAPF		;CM236 Privs?
	 RET			;CM236 Yes - all characters are OK
	CAIGE P1," "		;CM236 Space or higher is fine
	CAIN P1,"I"-100		;CM236 Tabs are fine
	RET			;CM236
	SKIPE P1		;CM236 Padding is ok
	CAIN P1,"G"-100		;CM236 So are bells
	RET			;CM236 Leave as is
	CAIE P1,"M"-100		;CM236 Return is fine
	CAIN P1,"J"-100		;CM236 So is linefeed
	RET			;CM236 Leave as is
	MOVEI P1,"$"		;CM236 Nothing else is ok though
	RET			;CM236
>

;LOCAL SUBROUTINE TO COPY STRING

***** CHANGE #61; PAGE 58, LINE 16; PAGE 61, LINE 16
;RETURNS +1: ALWAYS

	SWAPCD

TTSTI::	ANDI 1,377		;ISOLATE CHARACTER
	NOSKED
	CAME 2,CTYINT		;CTY ALIAS?
	CALL TTCHI		;NO. PUT CHAR INTO LINE BUFFER
	 JRST [	OKSKED		;FAILED, BUFFER FULL
		RETBAD IOX33]
	OKSKED
 ---------------------------------
;RETURNS +1: ALWAYS

	SWAPCD

TTSTI::	ANDI 1,377		;ISOLATE CHARACTER
	NOSKED
IFDEF  CMU,<PUSH P,TTCMWN(T2)	;CS46 STI doesn't update time of input >
	CAME 2,CTYINT		;CTY ALIAS?
	CALL TTCHI		;NO. PUT CHAR INTO LINE BUFFER
	 JRST [
IFDEF  CMU,<	POP P,TTCMWN(T2) ;CS46 >
		OKSKED		;FAILED, BUFFER FULL
		RETBAD IOX33]
IFDEF  CMU,<POP P,TTCMWN(T2) ;CS46 >
	OKSKED

***** CHANGE #62; PAGE 61, LINE 14; PAGE 64, LINE 14

;	STTYP

;RETURNS +1: ALWAYS

	SWAPCD
.STTYP::MCENT
	CALL CHKTTY
 ---------------------------------

;	STTYP

;RETURNS +1: ALWAYS

	SWAPCD
.STTYP::
IFNDEF  CMU,<
;CM31 *** 10 lines deleted (moved to JSYSF) ***
	MCENT
	CALL CHKTTY

***** CHANGE #63; PAGE 61, LINE 25; PAGE 64, LINE 28
	CAIL 3,0		;REASONABLE NUMBER?
	CAIL 3,NTTYPS
	ITERR (STYPX1)		;TERMINAL TYPE NOT IN RANGE
	CALL LCKTTY		;GET DYNAMIC DATA AND PREVENT DEALLOCATION
	 JRST [	CALL ULKTTY	;NOT ACTIVE. ALLOW DEALLOCATION
		ITERR (TTYX01)]
	STOR 3,TTTYP,(2)	;STORE NEW TERMINAL TYPE
 ---------------------------------
	CAIL 3,0		;REASONABLE NUMBER?
	CAIL 3,NTTYPS
	ITERR (STYPX1)		;TERMINAL TYPE NOT IN RANGE
	CALL LCKTTY		;GET DYNAMIC DATA AND PREVENT DEALLOCATION
	 JRST [	CALL ULKTTY	;NOT ACTIVE. ALLOW DEALLOCATION
		ITERR (TTYX01)]
>
	STOR 3,TTTYP,(2)	;STORE NEW TERMINAL TYPE

***** CHANGE #64; PAGE 61, LINE 33; PAGE 64, LINE 37
	LDB 1,TTMBIT		;GET MECH BITS
	DPB 1,[POINT 3,TTFLGS(2),3] ;PUT WHERE NOTICED
	LDB 1,TTTWID		;GET STANDARD WIDTH
	STOR 1,TPWID,(2)	;SET IT FOR THIS LINE
	LDB 1,TTTLEN		;STANDARD LENGTH
	STOR 1,TPLEN,(2)	;SET IF FOR THIS LINE
	HRRZ T1,TTYPE1(T3)	;GET VIDEO ATTRIBUTES TABLE
 ---------------------------------
	LDB 1,TTMBIT		;GET MECH BITS
	DPB 1,[POINT 3,TTFLGS(2),3] ;PUT WHERE NOTICED
	LDB 1,TTTWID		;GET STANDARD WIDTH
	STOR 1,TPWID,(2)	;SET IT FOR THIS LINE
	LDB 1,TTTLEN		;STANDARD LENGTH
	STOR 1,TPLEN,(2)	;SET IF FOR THIS LINE
IFDEF  CMU,<
	RET			;CM31
;CM31 *** 6 lines deleted *** >
IFNDEF CMU,<
	HRRZ T1,TTYPE1(T3)	;GET VIDEO ATTRIBUTES TABLE

***** CHANGE #65; PAGE 61, LINE 40; PAGE 64, LINE 48
	SKIPE T1		;IS THIS A VIDEO TERMINAL?
	MOVEI T1,1		;YES.
	STOR T1,TTNXO,(T2)	;SET PAGE STOP BIT APPROPRIATELY
	CALL ULKTTY		;ALLOW DEALLOCATION
	JRST MRETN

 ---------------------------------
	SKIPE T1		;IS THIS A VIDEO TERMINAL?
	MOVEI T1,1		;YES.
	STOR T1,TTNXO,(T2)	;SET PAGE STOP BIT APPROPRIATELY
	CALL ULKTTY		;ALLOW DEALLOCATION
	JRST MRETN
>

***** CHANGE #66; PAGE 63, LINE 9; PAGE 66, LINE 9

;ACCEPTS:
;	T1/ TERMINAL DESIGNATOR


;	GTTYP

 ---------------------------------

;ACCEPTS:
;	T1/ TERMINAL DESIGNATOR


;	GTTYP
;	TTGTYP (CM283)


***** CHANGE #67; PAGE 63, LINE 15; PAGE 66, LINE 16
;RETURNS +1: ALWAYS
;		T2/ TERMINAL TYPE
;		T3/ (NUMBER INPUT BUFFERS,,NUMBER OUTPUT BUFFERS)

.GTTYP::MCENT
	CALL CHKTTR
 ---------------------------------
;RETURNS +1: ALWAYS
;		T2/ TERMINAL TYPE
;		T3/ (NUMBER INPUT BUFFERS,,NUMBER OUTPUT BUFFERS)

.GTTYP::
IFNDEF CMU,<
;CM283 *** 9 lines deleted (moved to JSYSF) ***
	MCENT
	CALL CHKTTR

***** CHANGE #68; PAGE 63, LINE 25; PAGE 66, LINE 29
		JRST MRETN]
	CALL LCKTTY		;POINT TO DYNAMIC DATA AND PREVENT DEALLOCATION
	 JRST [	CALL ULKTTY	;NOT ACTIVE. ALLOW DEALLOCATION
		ITERR (TTYX01)]
	LOAD 1,TTTYP,(2)	;GET TERMINAL TYPE
	UMOVEM 1,2
	LOAD 1,TTNIN,(2)	;GET NUMBER OF INPUT BUFFERS
	LOAD 3,TTNOU,(2)	;GET NUMBER OF OUTPUT BUFFERS
	HRLI 3,0(1)		;COMBINE THEM FOR USER
	UMOVEM 3,3
	CALL ULKTTY		;ALLOW DEALLOCATION OF DYNAMIC DATA
	JRST MRETN
 ---------------------------------
		JRST MRETN]
	CALL LCKTTY		;POINT TO DYNAMIC DATA AND PREVENT DEALLOCATION
	 JRST [	CALL ULKTTY	;NOT ACTIVE. ALLOW DEALLOCATION
		ITERR (TTYX01)]
	LOAD 1,TTTYP,(2)	;GET TERMINAL TYPE
	UMOVEM 1,2
>
	LOAD 1,TTNIN,(2)	;GET NUMBER OF INPUT BUFFERS
	LOAD 3,TTNOU,(2)	;GET NUMBER OF OUTPUT BUFFERS
	HRLI 3,0(1)		;COMBINE THEM FOR USER
IFNDEF CMU,<
	UMOVEM 3,3
	CALL ULKTTY		;ALLOW DEALLOCATION OF DYNAMIC DATA
	JRST MRETN
>
IFDEF  CMU,<
	LOAD 1,TTTYP,(2)	;CM283  get terminal type
	RET			;CM283
;CM283 *** 3 lines deleted ***
;CS55 Entire page
	SUBTTL RTLOC - Return terminal location

;Call:	T1/ terminal device designator
;Returns: +1 always, with:
;	T1/ <tty type>,,<line number>
;	T2/ 32-bit Host number of line, or -1 if N/A
;	T3/ 32-bit TTYLOC identifier (EtherFE/CSFE) or foriegn port (TVT)
;	    or -1 if N/A

.RTLOC::CALL CHKTTR		; Make sure we have a TTY
	 ITERR (TTYX1)		; Nope - lose
	MOVE Q1,T2		; Save line number
	CALL LCKTTY		; Lock down dynamic data
	 ITERR (TTYX01,<CALL ULKTTY>) ;Failed - release partially allocated
	SETOB T3,T4		; Initialize values to undefined
	HLL Q1,T2(T2)		; Get terminal type in LH of Q1
	TDCALL D,<<FE,RTLLOC>,<MC,RTLMCB>,<CS,RTLCSF>,<PN,RTLPUP>,<TV,RTLTVT>>
	CALL ULKTTY		; Unlock dynamic data
	XCTU [DMOVEM T3,T2]	; Give info back to user
	XCTU [MOVEM Q1,T1]	; And this word...
	JRST MRETN		;Return success

RTLLOC:	MOVE T3,NLHOST		; Get the local host number
	HRRZ T4,Q1		; And the local line number
IFE .TVFLG,<
RTLTVT::
>
IFE .MCFLG,<
RTLMCB::
>
IFE .CSFLG,<
RTLCSF::
>
IFE .PNFLG,<
RTLPUP::
>
	RET
>

***** CHANGE #69; PAGE 65, LINE 16; PAGE 69, LINE 16

;RETURNS +1: ALWAYS

.STPAR::MCENT
	CALL CHKTTR		;IS THIS A TTY?
	 MRETNG			; NO, THEN THIS IS A NOOP
	CALL CHKTTY		;CAN WE GET TO IT?
	 EMRETN ()		; NO, ERROR OUT WITH REASON
	CALL LCKTTY		;POINT TO DYNAMIC DATA AND PREVENT DEALLOCATION
	 JRST [	CALL ULKTTY	;NOT ACTIVE. ALLOW DEALLOCATION
		ITERR (TTYX01)]
	UMOVE 1,2		;GET NEW JFN MODE WORD
	TDCALL D,<<PT,STPAR5>,<TV,TVTPAR>>
	PUSH P,1
	XOR 1,TTFLGS(2)
	ANDI 1,TT%ECM+TT%UOC+TT%LIC+TT%DUM+TT%PGM ;CHANGE THESE BITS
	XORM 1,TTFLGS(2)
	TXNE T1,TT%PGM		;DID PAGE MODE CHANGE?
 ---------------------------------

;RETURNS +1: ALWAYS

.STPAR::MCENT
	CALL CHKTTR		;IS THIS A TTY?
	 MRETNG			; NO, THEN THIS IS A NOOP
IFDEF  CMU,<	CALL CHKTTX		;CM326 CAN WE GET TO IT? >
IFNDEF CMU,<	CALL CHKTTY		;CAN WE GET TO IT? >
	 EMRETN ()		; NO, ERROR OUT WITH REASON
	CALL LCKTTY		;POINT TO DYNAMIC DATA AND PREVENT DEALLOCATION
	 JRST [	CALL ULKTTY	;NOT ACTIVE. ALLOW DEALLOCATION
		ITERR (TTYX01)]
	NOINT			;I WILL NOT DIE
	UMOVE 1,2		;GET NEW JFN MODE WORD
IFDEF  CMU,<	TDCALL D,<<PT,STPAR5>,<NT,NVTPAR>,<TV,TVTPAR>> ;[BBN] >
IFNDEF CMU,<	TDCALL D,<<PT,STPAR5>,<NT,NVTPAR>,<TV,TVTPAR>,<CH,NVTPAR>> >
	PUSH P,1
	XOR 1,TTFLGS(2)
	ANDI 1,TT%ECM+TT%UOC+TT%LIC+TT%DUM+TT%PGM ;CHANGE THESE BITS
	XORM 1,TTFLGS(2)
IFDEF  CMU,<
;CMB110 Need to do TTXONA first as fe doesn't recignise after TTEXF
	PUSH P,T1		;CMB110
	TXNE T1,TT%PGM		;CMB110 did page mode change?
	CALL TTXONA		;CMB110 yes, be sure output not stopped
	POP P,T1		;CMB110
>
	TXNE T1,TT%PGM		;DID PAGE MODE CHANGE?

***** CHANGE #70; PAGE 65, LINE 52; PAGE 69, LINE 62
	JRST STPAR1		;ILLEGAL WIDTHS DON'T CHANGE THE SETTING
STPAR3:	STOR T1,TPWID,(2)
STPAR1:	LDB 1,[POINT 3,0(P),3]
	DPB 1,[POINT 3,TTFLGS(2),3] ;LH BITS
	POP P,1
	CALL ULKTTY		;ALLOW DEALLOCATION OF DYNAMIC DATA
	JRST MRETN
 ---------------------------------
	JRST STPAR1		;ILLEGAL WIDTHS DON'T CHANGE THE SETTING
STPAR3:	STOR T1,TPWID,(2)
STPAR1:	LDB 1,[POINT 3,0(P),3]
	DPB 1,[POINT 3,TTFLGS(2),3] ;LH BITS
	POP P,1
	CALL ULKTTY		;ALLOW DEALLOCATION OF DYNAMIC DATA
	OKINT			;I CAN BE KILLED NOW
	JRST MRETN

***** CHANGE #71; PAGE 66, LINE 31; PAGE 70, LINE 31
;'OBJECT' IS USUALLY THE CALLER OF THE JSYS; 'REMOTE' IS THE OTHER LINE

.TLINK::MCENT
	TRVAR <OBJNO,OBJADR,REMNO,TLSAV1,LNKWRN>
	SETOM LNKWRN		;ASSUME LINK MESSAGE IS NEEDED
	MOVEI T1,-.TTDES(T1)	;TURN OBJECT DESIGNATOR INTO LINE NUMBER
	CAIN T1,-1-.TTDES	;SPECIFIED -1 FOR OWN TERMINAL?
	SKIPL T1,CTRLTT		;YES, GET IT
	CAIL T1,NLINES		;VALIDATE LINE NUMBER
 ---------------------------------
;'OBJECT' IS USUALLY THE CALLER OF THE JSYS; 'REMOTE' IS THE OTHER LINE

.TLINK::MCENT
	TRVAR <OBJNO,OBJADR,REMNO,TLSAV1,LNKWRN>
	SETOM LNKWRN		;ASSUME LINK MESSAGE IS NEEDED
	MOVEI T1,-.TTDES(T1)	;TURN OBJECT DESIGNATOR INTO LINE NUMBER
;**;[3093]  Replace 2 lines with 8 at .TLINK:+4		DML	17-APR-84
	CAIE T1,-1-.TTDES	;[3093] SPECIFIED -1 FOR OWN TERMINAL?
	IFSKP.			;[3093] YES
	HRRZ T1,FORKN		;[3093] GET NUMBER OF FORK
	LOAD T1,FRKTTY,(T1)	;[3093] GET FORK CONTROLLING TERMINAL
	TRZ T1,.TTDES		;[3093] OBTAIN LINE NUMBER
	ENDIF.			;[3093]
	CAIN T1,-1-.TTDES	;[3093] IS THERE ONE FOR THE FORK?
	SKIPL T1,CTRLTT		;[3093] NO, USE JOB CONTROLLING TERMINAL
	CAIL T1,NLINES		;VALIDATE LINE NUMBER

***** CHANGE #72; PAGE 71, LINE 32; PAGE 75, LINE 32
	CALL ULKTTY		;FREE IT
	SETZM OBJADR		;NO LOCK HELD
	SKIPN LNKWRN		;LINKING FROM MY OWN JOB?
	JRST TL25		;NO, SKIP MESSAGE
	MOVE T1,OBJNO		;GET TERMINAL NUMBER
	ADDI T1,.TTDES		;TURN INTO DESIGNATOR
	HRROI 2,[ASCIZ /
LINK FROM /]
	SETZ 3,
 ---------------------------------
	CALL ULKTTY		;FREE IT
	SETZM OBJADR		;NO LOCK HELD
	SKIPN LNKWRN		;LINKING FROM MY OWN JOB?
	JRST TL25		;NO, SKIP MESSAGE
	MOVE T1,OBJNO		;GET TERMINAL NUMBER
	ADDI T1,.TTDES		;TURN INTO DESIGNATOR
IFDEF  CMU,<	HRROI 2,[ASCIZ /
LINK FROM /]		;CM66 >
IFNDEF CMU,<	HRROI 2,[ASCIZ /
LINK FROM /] >
	SETZ 3,

***** CHANGE #73; PAGE 71, LINE 55; PAGE 75, LINE 57
	 ERJMP TL25
	HRROI T2,[ASCIZ /
/]
	SETZ T3,
	SOUT
	 ERJMP TL25
TL25:	MOVE T2,FX		;GET OBJECT LINE NUMBER
 ---------------------------------
	 ERJMP TL25
	HRROI T2,[ASCIZ /
/]
	SETZ T3,
	SOUT
	 ERJMP TL25
IFDEF  CMU,<
	MOVEI 1,^D5000		;CM66
	DISMS%			;CM66
>
TL25:	MOVE T2,FX		;GET OBJECT LINE NUMBER

***** CHANGE #74; PAGE 79, LINE 16; PAGE 83, LINE 16
;	 +2: A PHYSICAL TERMINAL

;PRESERVES AC'S

	RESCD

CKPHYT::TDCALL S,<<PT,RSKP>>
	 RETSKP			;NOT A PTY
 ---------------------------------
;	 +2: A PHYSICAL TERMINAL

;PRESERVES AC'S

	RESCD

CKPHYT::
IFDEF  CMU,<	TDCAL1 S,PTY,RSKP	;CS147 >
IFNDEF CMU,<	TDCALL S,<<PT,RSKP>> >
	 RETSKP			;NOT A PTY

***** CHANGE #75; PAGE 79, LINE 24; PAGE 83, LINE 26
	RET			;A PTY

;CKPHYD - SAME AS ABOVE BUT FOR DYNAMIC PTR
; T2/ DYNAMIC PTR

CKPHYD:	TDCALL D,<<PT,RSKP>>
	 RETSKP			;NOT A PTY
 ---------------------------------
	RET			;A PTY

;CKPHYD - SAME AS ABOVE BUT FOR DYNAMIC PTR
; T2/ DYNAMIC PTR

CKPHYD:
IFDEF  CMU,<	TDCAL1 D,PTY,RSKP	;CS147 >
IFNDEF CMU,<	TDCALL D,<<PT,RSKP>> >
	 RETSKP			;NOT A PTY

***** CHANGE #76; PAGE 82, LINE 11; PAGE 86, LINE 11
;	T1/ (NUMBER OF PTYS,,FIRST PTY NUMBER)

GTBPTY::HRLI T1,NTTPTY		;NUMBER OF PTYS
	HRR T1,TT1LIN+TT.PTY	;GET FIRST LINE NUMBER
	RET

;GTBTTF - GETAB ROUTINE FOR TTFORK TABLE
 ---------------------------------
;	T1/ (NUMBER OF PTYS,,FIRST PTY NUMBER)

GTBPTY::HRLI T1,NTTPTY		;NUMBER OF PTYS
	HRR T1,TT1LIN+TT.PTY	;GET FIRST LINE NUMBER
	RET

IFDEF  CMU,<
;*** CM343 begin addition ***

;GTBMCB - GETAB% routine to get MCB info

;Returns +1: always
;	T1/ (number of MCB's,,tty number of first MCB)
;  or (if no MCB's on this system)
;	T1/ 0

GTBMCB::HRLZI T1,NTTMCB		;Number of MCB's
	SKIPE T1		;If there are some then
	HRR T1,TT1LIN+TT.MCB	;Get first line number
	RET

;***  CM343 end addition  ***

;*** CS19 begin addition ***

;GTBCSF - GETAB% routine to get CSFE info

;Returns +1: always
;	T1/ (number of CSFE tty's,,tty number of first CSFE tty)
;  or (if no CSFE lines on this system)
;	T1/ 0

GTBCSF::HRLZI T1,NTTCS		;Number of CSFE lines
	SKIPE T1		;If there are some then
	HRR T1,TT1LIN+TT.CS	;Get first line number
	RET

;***  CS19 end addition  ***
>

;GTBTTF - GETAB ROUTINE FOR TTFORK TABLE

***** CHANGE #77; PAGE 84, LINE 28; PAGE 88, LINE 28
	TMNN TTAUT,(B)			;NON-AUTO LINE?
	SKIPG C,TTSPWD(B)	;HAVE A SPEED TO SET?
	RET			;NO. GIVE IT UP
	MOVEI A,.TTDES(B)	;A/ DEVICE DESIGNATOR FOR THIS LINE
	MOVEI B,.MOSPD		;B/ THE FUNCTION
	MTOPR			;GO SET THE SPEED
	RET			;AND DONE
 ---------------------------------
	TMNN TTAUT,(B)			;NON-AUTO LINE?
	SKIPG C,TTSPWD(B)	;HAVE A SPEED TO SET?
	RET			;NO. GIVE IT UP
	MOVEI A,.TTDES(B)	;A/ DEVICE DESIGNATOR FOR THIS LINE
	MOVEI B,.MOSPD		;B/ THE FUNCTION
	MTOPR			;GO SET THE SPEED
	 ERJMP .+1		;CM236 We don't care very much...
	RET			;AND DONE

***** CHANGE #78; PAGE 85, LINE 24; PAGE 89, LINE 24
	 JRST TTHNG1		;NOT ACTIVE. CAN'T HAVE OUTPUT
	CALL TTDOBE		;WAIT TILL NO OUTPUT
	 JRST [	POP P,T2	;GET BACK LINE
		JRST TTHNGU]	;TRY AGAIN
TTHNG1:	CALL ULKTTY		;ALLOW DEALLOCATION
	POP P,T2		;RESTORE LINE NUMBER
	TDCALL S,<<FE,TTHU2>,<MC,MCHNGU>,<DZ,DZHU0>,<TV,TVTDTS>>
	RET
 ---------------------------------
	 JRST TTHNG1		;NOT ACTIVE. CAN'T HAVE OUTPUT
	CALL TTDOBE		;WAIT TILL NO OUTPUT
	 JRST [	POP P,T2	;GET BACK LINE
		JRST TTHNGU]	;TRY AGAIN
TTHNG1:	CALL ULKTTY		;ALLOW DEALLOCATION
	POP P,T2		;RESTORE LINE NUMBER
IFDEF  CMU,<TDCALL S,<<FE,TTHU2>,<MC,MCHNGU>,<DZ,DZHU0>,<TV,TVTDTS>> >
IFNDEF CMU,<TDCALL S,<<FE,TTHU2>,<MC,MCHNGU>,<DZ,DZHU0>,<TV,TVTDTS>,<CH,NVTDTS>> >
	RET

***** CHANGE #79; PAGE 87, LINE 38; PAGE 91, LINE 38
	AOS -3(P)		;GIVE GOOD RETURN
TTGTB2:	ADJSP P,-1		;JUNK
	POP P,4
	POP P,1
	RET

TTGTB3:	BUG(TTYNTB)
	AOS TTFREC		;GIVE BACK FRUITLESS SOS
 ---------------------------------
	AOS -3(P)		;GIVE GOOD RETURN
TTGTB2:	ADJSP P,-1		;JUNK
	POP P,4
	POP P,1
	RET

TTGTB3:
IFDEF  CMU,<	BUG(TTYNTB) >
IFNDEF CMU,<	BUG.(CHK,TTYNTB,TTYSRV,HARD,<RAN OUT OF TTY BUFFERS>,,<

Cause:	This BUG is not documented yet.

Action:

>) >
	AOS TTFREC		;GIVE BACK FRUITLESS SOS

***** CHANGE #80; PAGE 89, LINE 17; PAGE 93, LINE 17

AN==1				;ALPHANUMERIC CLASS BIT
PC==2				;PUNCTUATION CLASS BIT
CT==4				;CONTROL (NON-FORMATTING) CLASS BIT
FC==10				;FORMATTING CONTROL CLASS BIT

DEFINE CH(PAR,CLS,DSP)<
   IFNB <DSP>,<<PAR>B0+<CLS>B17+DSP>
   IFB <DSP>,<<PAR>B0+<CLS>B17+TCOUT>>

 ---------------------------------

AN==1				;ALPHANUMERIC CLASS BIT
PC==2				;PUNCTUATION CLASS BIT
CT==4				;CONTROL (NON-FORMATTING) CLASS BIT
FC==10				;FORMATTING CONTROL CLASS BIT

IFDEF  CMU,<
CC,<				;CM290
DEFINE CH(PAR,CLS,DSP)<
   IFNB <DSP>,<<PAR>B0+<CLS>B17+DSP>
   IFB <DSP>,<<PAR>B0+<CLS>B17+TCOUT>>
   >;CC				;CM290
CS,<				;CM290
DEFINE CH(PAR,CLS,DSP)<
   IFNB <DSP>,<<CLS>B17+DSP>
   IFB <DSP>,<<CLS>B17+TCOUT>>
   >;CS				;CM290
>
IFNDEF CMU,<
DEFINE CH(PAR,CLS,DSP)<
   IFNB <DSP>,<<PAR>B0+<CLS>B17+DSP>
   IFB <DSP>,<<PAR>B0+<CLS>B17+TCOUT>>
>


***** CHANGE #81; PAGE 89, LINE 30; PAGE 93, LINE 44
	CH(1,CT)		; 2 ^B
	CH(0,CT)		; 3 ^C
	CH(1,CT)		; 4 ^D
	CH(0,CT)		; 5 ^E
	CH(0,CT)		; 6 ^F
	CH(1,CT)		; 7 ^G

	CH(1,FC,TTSM4)		; 10 ^H BACKSPACE
	CH(0,PC,TTSM1)		; 11 ^I TAB
 ---------------------------------
	CH(1,CT)		; 2 ^B
	CH(0,CT)		; 3 ^C
	CH(1,CT)		; 4 ^D
	CH(0,CT)		; 5 ^E
	CH(0,CT)		; 6 ^F
	CH(1,CT)		; 7 ^G
IFDEF  CMU,<	CH(1,17,TTSM4)		;CS47 10 ^H BACKSPACE >
IFNDEF CMU,<	CH(1,FC,TTSM4)		; 10 ^H BACKSPACE >
	CH(0,PC,TTSM1)		; 11 ^I TAB

***** CHANGE #82; PAGE 96, LINE 16; PAGE 100, LINE 16
TTCOHA:	CAIL 1,40		;SPACING CHAR?
	JRST [	INCR TLNPS,(T2)	;YES. INCREMENT POSITION ON LINE
		RET]
	CAIE T1,.CHLFD		;LF?
	CAIN 1,15		;CR?
	JRST [	SETZRO TLNPS,(T2) ;YES. RESET TO LEFT MARGIN
		RET]
	CAIN 1,.CHLFD		;LF?
 ---------------------------------
TTCOHA:	CAIL 1,40		;SPACING CHAR?
	JRST [	INCR TLNPS,(T2)	;YES. INCREMENT POSITION ON LINE
		RET]
	CAIE T1,.CHLFD		;LF?
	CAIN 1,15		;CR?
	JRST [	SETZRO TLNPS,(T2) ;YES. RESET TO LEFT MARGIN
IFDEF  CMU,<	JRST .+1	;CMB57 >
IFNDEF CMU,<	RET >
		]
	CAIN 1,.CHLFD		;LF?

***** CHANGE #83; PAGE 103, LINE 49; PAGE 107, LINE 49
	CAME C,[-1]
	CALL TTLNK3		;YES. GO DO THEM

;SEE IF THERE IS ROOM IN THE OUTPUT BUFFER

TCOU3:	JN TOFLG,(T2),R		;LOSE CHARACTER IF CTRL/O TYPED
TCOUM1:	DYNST T3		;GET INTERNAL LINE NUMBER
 ---------------------------------
	CAME C,[-1]
	CALL TTLNK3		;YES. GO DO THEM

;SEE IF THERE IS ROOM IN THE OUTPUT BUFFER

TCOU3:	JN TOFLG,(T2),R		;LOSE CHARACTER IF CTRL/O TYPED
;;; Check for special network terminal characters
IFDEF  CMU,<	TDCAL1	D,TVT,CHKIAC	;CS147 [BBN] >
IFNDEF CMU,<	TDCALL	D,<<TV,CHKIAC>,<CH,CHKIAC>> >
TCOUM1:	DYNST T3		;GET INTERNAL LINE NUMBER

***** CHANGE #84; PAGE 104, LINE 10; PAGE 108, LINE 10
;ACTION WHEN BUFFER FULL

	SKIPN INSKED		;ARE WE IN THE SCHEDULER?
	SKIPE NSKED		;NO. ARE WE NOSKED?
	JRST [	SETOM TCOERR	;YES. INDICATE FAILURE FOR SCHEDULER
		RET]		; AND RETURN
	TDCALL D,<<PT,CHKPTA>>	;CHECK FOR PTY ACTION NEEDED
	SETONE TTBKO,(T2)	;NOTE BLOCKE FOR OUTPUT EVENT
 ---------------------------------
;ACTION WHEN BUFFER FULL

	SKIPN INSKED		;ARE WE IN THE SCHEDULER?
	SKIPE NSKED		;NO. ARE WE NOSKED?
	JRST [	SETOM TCOERR	;YES. INDICATE FAILURE FOR SCHEDULER
		RET]		; AND RETURN
IFDEF  CMU,<	TDCAL1 D,PTY,CHKPTA	;CS147 CHECK FOR PTY ACTION NEEDED >
IFNDEF CMU,<	TDCALL D,<<PT,CHKPTA>>	;CHECK FOR PTY ACTION NEEDED >
	SETONE TTBKO,(T2)	;NOTE BLOCKE FOR OUTPUT EVENT

***** CHANGE #85; PAGE 104, LINE 30; PAGE 108, LINE 31
                  MOVE T2,0(P)  ;GET BACK LINE NUMBER
                  CALL TCOU7	;GET SPECIAL BLOCK
                  JRST .+1]
	ADJSP P,-1		;CLEAN UP STACK
	POP P,T1		;CHARACTER
	JRST TCOU3
 ---------------------------------
                  MOVE T2,0(P)  ;GET BACK LINE NUMBER
                  CALL TCOU7	;GET SPECIAL BLOCK
                  JRST .+1]
	ADJSP P,-1		;CLEAN UP STACK
	POP P,T1		;CHARACTER
	JRST TCOU3

IFDEF CMU,<
REPEAT 0,<			;[BBN] This should be fixed now
;CS82 Double IAC characters on TVT's

TCOBTV:	PUSH P,T2		;CS82 Save Line Number
	CALL TCOU6		;CS82 Output the IAC
	POP P,T2		;CS82 Restore Line Number
	MOVEI T1,IACCH		;CS82 Output a second IAC
	RET			;CS82 Return to output second IAC
   >;REPEAT 0			;[BBN]
>

***** CHANGE #86; PAGE 106, LINE 47; PAGE 110, LINE 47
		MOVEM T3,TTOIN(T2) ;SAVE CHARACTER POINTER
		JRST .+1]
	IDPB T1,TTOIN(T2)	;GET CHARACTER
	AOS 3,TTOCT(2)		;INCREMENT COUNT OF CHARACTERS IN BUFFER
	CHNON DLSCHN		;SAFE TO TURN CHN ON AFTER AOS
	AOS NTTYOT		;COUNT ALL OUTPUT
	CALLRET STRTOU		;START OUTPUT TO LINE IF NEEDED
 ---------------------------------
		MOVEM T3,TTOIN(T2) ;SAVE CHARACTER POINTER
		JRST .+1]
	IDPB T1,TTOIN(T2)	;GET CHARACTER
	AOS 3,TTOCT(2)		;INCREMENT COUNT OF CHARACTERS IN BUFFER
	CHNON DLSCHN		;SAFE TO TURN CHN ON AFTER AOS
	AOS NTTYOT		;COUNT ALL OUTPUT
IFDEF  CMU,<
CC,<	DYNST CX		;CM375 get internal line number
	AOS HSOLIN(CX) >	;CM375 one more char output
>
	CALLRET STRTOU		;START OUTPUT TO LINE IF NEEDED

***** CHANGE #87; PAGE 106, LINE 56; PAGE 110, LINE 60
;SET PARITY BIT IF REQUIRED FOR THIS LINE TYPE
; T2/ DYNAMIC DATA PTR
; T1/ CHARACTER
;RETURN +1 ALWAYS, T1 MODIFIED

SPARTY:	LOAD CX,TLTYP,(T2)	;GET LINE TYPE
	XCT PARTBL(CX)		;SET OR CLEAR BIT
	RET
 ---------------------------------
;SET PARITY BIT IF REQUIRED FOR THIS LINE TYPE
; T2/ DYNAMIC DATA PTR
; T1/ CHARACTER
;RETURN +1 ALWAYS, T1 MODIFIED

SPARTY:	LOAD CX,TLTYP,(T2)	;GET LINE TYPE
IFDEF  CMU,<
CC,<	XCT PARTBL(CX) >	;CS38 SET OR CLEAR BIT
CS,<	TXZ T1,200 >		;CS38 Flush parity bit
>
IFNDEF CMU,<	XCT PARTBL(CX)		;SET OR CLEAR BIT >
	RET

***** CHANGE #88; PAGE 108, LINE 19; PAGE 112, LINE 19
	CAIN 2,777
	JRST TTLNK1		;MEANS NOT IN USE
	PUSH P,3
	PUSH P,1		;SAVE CHARACTER
	CALL LCKTTY		;LOCK UP DESTINATION TTY
	 JRST TTLNK4		;NOT ACTIVE. DON'T SEND TO IT
	TRNN 1,200		;THIS CHARACTER HAVE PARITY?
 ---------------------------------
	CAIN 2,777
	JRST TTLNK1		;MEANS NOT IN USE
	PUSH P,3
	PUSH P,1		;SAVE CHARACTER
	CALL LCKTTY		;LOCK UP DESTINATION TTY
	 JRST TTLNK4		;NOT ACTIVE. DON'T SEND TO IT
IFDEF  CMU,<
	PUSH P,T1		;CMB53 save the char
	CALL TTGSTS		;CMB53 T1 = 0 if parity permited allowed
	MOVE T3,T1		;CMB53 save parity ok flag
	POP P,T1		;CMB53 Restore the character
	JUMPN T3,TTLK11		;CMB53 Parity allowed, leave it as is
>
	TRNN 1,200		;THIS CHARACTER HAVE PARITY?

***** CHANGE #89; PAGE 114, LINE 29; PAGE 118, LINE 29

;TAKE NEXT CHAR FROM TTY IN BFR
; T2/ TERMINAL DATA BLOCK
; RETURN +1: BUFFER EMPTY
;	+2: T1/ CHAR

GTTCI:	SKIPLE 1,TTICT(2)	;ANY CHARS IN BUFFER?
	 JRST GTTCI2		;YES
	TDCALL D,<<TV,TVRFIL>>	;DO TVT DEPENDANT REFILL SIGNAL
	RET			;AND RETURN
GTTCI2:				;HERE WHEN CHARACTERS IN BUFFER
	SKIPN 3,TTIOUT(2)	;GET POINTER
	BUG(TTICN0)
	HRRZ 4,3
 ---------------------------------

;TAKE NEXT CHAR FROM TTY IN BFR
; T2/ TERMINAL DATA BLOCK
; RETURN +1: BUFFER EMPTY
;	+2: T1/ CHAR

GTTCI:	SKIPG 1,TTICT(2)	;ANY CHARS IN BUFFER?
	 RET			;NO
	SKIPN 3,TTIOUT(2)	;GET POINTER
IFDEF  CMU,<	BUG(TTICN0) >
IFNDEF CMU,<	BUG.(HLT,TTICN0,TTYSRV,SOFT,<TCI - NO BUFFER POINTER BUT COUNT NON-0>,,<

Cause:	At TCI0 (get a character from the line's input buffer) the pointer to
	the dynamic data base for the line was 0.  This could either be a
	coding error or the resident table containing the pointers was
	clobbered.

Action:	Look at the dump.  The stack should indicate which routine called
	TCI0 without the pointer.

>) >
	HRRZ 4,3

***** CHANGE #90; PAGE 115, LINE 20; PAGE 119, LINE 20

TCIF2:	STOR T3,TYLMD,(T2)	;SAVE DATA MODE THIS INPUT
	PUSH P,3		;SAVE DATA MODE
	MOVE T3,FORKX		;GET INDEX OF THIS FORK
	STOR T3,TWFRK,(T2)	;RECORD THIS FORK WAITING FOR TTY
	SETZRO TTFWK,(T2)	;INDICATE NO FORCED WAKEUP
	TDCALL D,<<PT,TCIPTY>,<TV,TVTIGA>>
	SETZRO TTWFG,(T2)	;CLEAR WAIT RESTARTED FLAG
 ---------------------------------

TCIF2:	STOR T3,TYLMD,(T2)	;SAVE DATA MODE THIS INPUT
	PUSH P,3		;SAVE DATA MODE
	MOVE T3,FORKX		;GET INDEX OF THIS FORK
	STOR T3,TWFRK,(T2)	;RECORD THIS FORK WAITING FOR TTY
	SETZRO TTFWK,(T2)	;INDICATE NO FORCED WAKEUP
IFDEF  CMU,<	TDCALL D,<<PT,TCIPTY>,<PN,PNVIBE>,<TV,TVTIGA>> ;CS36 >
IFNDEF CMU,<	TDCALL D,<<PT,TCIPTY>,<TV,TVTIGA>,<CH,CVTCAP>> >
	SETZRO TTWFG,(T2)	;CLEAR WAIT RESTARTED FLAG

***** CHANGE #91; PAGE 117, LINE 8; PAGE 121, LINE 8
;'RAISE' INPUT

;ACCEPTS:
;	T1/ THE CHARACTER IN 7 BITS
;	T3/ TTFLGS FOR THE LINE

TTRAIS:	TXNE T3,TT%LIC		;IF NOT RAISING INPUT
	CAIGE T1,"A"+40		; OR NOT IN RANGE
 ---------------------------------
;'RAISE' INPUT

;ACCEPTS:
;	T1/ THE CHARACTER IN 7 BITS
;	T3/ TTFLGS FOR THE LINE

TTRAIS:
IFDEF  CMU,<
	OPSTR <SKIPE>,TTBMD,(T2) ;CS47 backspace hacking?
	CAIE T1,.CHBSP		;CS47 is this a backspace?
	IFSKP.			;CS47 yes, backspace and hacking such
	 MOVEI T1,.CHDEL	;CS47 translate then for user than are
	ENDIF.			;CS47  used to typing ^H
>
	TXNE T3,TT%LIC		;IF NOT RAISING INPUT
	CAIGE T1,"A"+40		; OR NOT IN RANGE

***** CHANGE #92; PAGE 118, LINE 18; PAGE 122, LINE 18
	CAIN 3,TTBSIZ		;AT END OF TTBBUF?
	SETZB 3,TTBIGO		;YES. POINT TO START OF TTBBUF
	MOVE 1,TTBBUF(3)	;GET NEXT ENTRY
	SOS TTBIGC		;DECREMENT COUNT OF ENTRIES
	HLRZ 2,1		;GET LINE NUMBER
	MOVEI Q2,0(1)		;SAVE ALL ORIGINAL FLAGS
	DECR TTFBB,(B)		;REDUCE LINE'S COUNT OF TTBBUF ENTRIES
 ---------------------------------
	CAIN 3,TTBSIZ		;AT END OF TTBBUF?
	SETZB 3,TTBIGO		;YES. POINT TO START OF TTBBUF
	MOVE 1,TTBBUF(3)	;GET NEXT ENTRY
	SOS TTBIGC		;DECREMENT COUNT OF ENTRIES
	HLRZ 2,1		;GET LINE NUMBER
	MOVEI Q2,0(1)		;SAVE ALL ORIGINAL FLAGS
IFDEF  CMU,<
IPTT,<	CALL TIPCHK		;CS99 See if IP link...
	 JRST [	CALL TIPCH7	;CS99 Process it there
		JRST TTCH7]>	;CS99
CSFE,<	CALL CSFECK		;CS19 Special processing for CS FE?
	 JRST [	CALL CSTCH7	;CS19 Yes, handle elsewhere
		JRST TTCH7]>	;CS19
>
	DECR TTFBB,(B)		;REDUCE LINE'S COUNT OF TTBBUF ENTRIES

***** CHANGE #93; PAGE 120, LINE 6; PAGE 124, LINE 6

;TTCH7..

;TTBBUF IS EMPTY. DO DEVICE DEPENDENT FUNCTIONS IF NEEDED

TTCH7X:	CALL CKQLN		;CHECK QUEUED LINES
	CALL TTYQOC		;START OUTPUT ON QUEUED LINES
  IFN .MCFLG,<
 ---------------------------------

;TTCH7..

;TTBBUF IS EMPTY. DO DEVICE DEPENDENT FUNCTIONS IF NEEDED

TTCH7X:
IFDEF  CMU,<
PUP,<	CALL PUPQLN>		;CS36 handle queued PUP interupts
>
	CALL CKQLN		;CHECK QUEUED LINES
	CALL TTYQOC		;START OUTPUT ON QUEUED LINES
IFDEF  CMU,<
CC,<	CALL HUCHK>		;CM324 Check for periodic processing
CSFE,<	CALL CSQOC>		;CS19 Start output on CS FE lines
IPTT,<	CALL TIPQOC>		;CS99 Start output to IP link line
>
  IFN .MCFLG,<

***** CHANGE #94; PAGE 122, LINE 25; PAGE 126, LINE 25
	CAMLE T1,TTCSTM(T2)	;LATER THAN NOW SET?
	MOVEM T1,TTCSTM(T2)	;YES, SAVE TIME FOR DOING THE FUNCTION
	MOVSI T4,-NTQFN		;SCAN TABLE FOR SPECIFIED ROUTINE
TTQAD2:	CAMN T3,TQFNT(T4)	;THIS ONE?
	JRST TTQAD3		;YES
	AOBJN T4,TTQAD2		;NO
	BUG(TTQADX,<<T3,ADR>>)	;UNKNOWN FUNCTION
	RET
 ---------------------------------
	CAMLE T1,TTCSTM(T2)	;LATER THAN NOW SET?
	MOVEM T1,TTCSTM(T2)	;YES, SAVE TIME FOR DOING THE FUNCTION
	MOVSI T4,-NTQFN		;SCAN TABLE FOR SPECIFIED ROUTINE
TTQAD2:	CAMN T3,TQFNT(T4)	;THIS ONE?
	JRST TTQAD3		;YES
	AOBJN T4,TTQAD2		;NO
IFDEF  CMU,<	BUG(TTQADX,<<T3,ADR>>)	;UNKNOWN FUNCTION >
IFNDEF CMU,<	BUG.(CHK,TTQADX,TTYSRV,SOFT,<TTYSRV-UNKNOWN FUNCTION REQUESTED>,
<<T3,ADR>>,<

Cause:	TTQAD has been called with a routine address which is not
	in its local table of known routines.

Action:	Look at the stack to see find the call to TTQAD, then find
	the name of the routine being passed and add it to the TQFNT
	table.
>) >
	RET

***** CHANGE #95; PAGE 124, LINE 2; PAGE 128, LINE 2
	NTYCOF
	CKSALL
NTQFN==.-TQFNT
IFG NTQFN-^D36,<PRINTX TQFNT TOO LARGE>

;ROUTINE CALLED ONCE A SECOND TO DO CONTROLLER DEPENDENT FUNCTIONS
 ---------------------------------
	NTYCOF
	CKSALL
NTQFN==.-TQFNT
IFG NTQFN-^D36,<PRINTX TQFNT TOO LARGE>

IFDEF  CMU,<
;CM324 *** Begin addition ***
CC,<
;
;Routine called to do periodic processing for each line, called for
; one line only each long cycle
;	T2/ internal line number
;	CALL HUCHK
;Returns:
;	+1 always
;Clobbers:
;	T1-T4

;currently, this routine just hangs up on micom lines without jobs, it
; should be genralized some day to take care of other types of tty's too.
;(Not used at CS)

HUCHK:	SOSGE T2,HCKIDX		;Get next index into time table
	 MOVX T2,NLINES-1	;Wrapped around, start again
	MOVEM T2,HCKIDX		;Save new index
	MOVE T1,TTCMWN(T2)	;anything happen recently?
	ADDI T1,^D<20*1000>	;in the last 20 seconds that is
	SKIPN TTACTL(T2)	;any dynamic data action?
	CAMLE T1,TODCLK
	 RET			;dynamic data or something recently happened
	OPSTR <SKIPN>,TTMCM,(T2) ;is it a micom line?
	 RET			;no, we only care about them right now
	OPSTR <SKIPN>,TTCON,(T2) ;is the carier even on?
	 RET			;no, it isn't tying up a line then
	OPSTR <SKIPE>,TTNMC,(T2) ;still waiting for micom server?
	IFSKP.			;yes, that is a problem
	 SKIPE MCMDBG		;only do this while debugging
	 BUG(MCMMIS,<<T2,D>>)	;micom missed setting us then
	ENDIF.
	CALLRET TTHU2		;tell the FE about it
   >;CC
;*** CM324 end addition ***	
>

;ROUTINE CALLED ONCE A SECOND TO DO CONTROLLER DEPENDENT FUNCTIONS

***** CHANGE #96; PAGE 125, LINE 14; PAGE 130, LINE 14
	JRST TTCX1		;NO, OFF

;CARRIER WENT ON. IF THE LINE IS IN USE OR A JOB IS BEING
;CREATED ON IT, DON'T GO CREATE ANOTHER JOB ON IT

	SETONE TTCON,(B)	;SET CARRIER ON FOR THIS LINE
	TDCALL S,<<FE,RSKP>,<DZ,DZ7CX2>>
	 JRST TTCH7		;DO NOTHING
	CALL TTCON1		;CREATE JOB
	JRST TTCH7		;DONE

;TTCON1 - CREATE JOB AS RESULT OF CARRIER COMING ON
 ---------------------------------
	JRST TTCX1		;NO, OFF

;CARRIER WENT ON. IF THE LINE IS IN USE OR A JOB IS BEING
;CREATED ON IT, DON'T GO CREATE ANOTHER JOB ON IT

	SETONE TTCON,(B)	;SET CARRIER ON FOR THIS LINE
IFDEF  CMU,<
	MOVE T1,TODCLK		;CM324 Counts as a char for timeouts
	MOVEM T1,TTCMWN(T2)	;CM324
	TDCALL S,<<FE,FE7CX2>,<DZ,DZ7CX2>> ;CM324 Don't always create job if FE
>
IFNDEF CMU,<	TDCALL S,<<FE,RSKP>,<DZ,DZ7CX2>> >
	 JRST TTCH7		;DO NOTHING
	CALL TTCON1		;CREATE JOB
	JRST TTCH7		;DONE

IFDEF  CMU,<
;CM324 *** Begin ***
;FE7CX2 - Decide whether to create a job on an FE line on
;a carrier on.  Always say not to unless the line is autobauded
;by the front end, since this behavior guarantees that the user
;will always have to type exactly one ^C (or CRLF) to get a job
;started.
;
;Takes:
;	T2/	line #
;Returns:
;	+1	do nothing
;	+2	create a job
;
FE7CX2:
CC,<	SKIPN TTACTL(T2)	;already have dynamic data
	IFSKP.			;yes, that isn't right
	  SKIPE MCMDBG		;micom diagnostics can cause this
	  BUG(TTACMU,<<T2,D>>)	;report the problem
	  JRST TTHU2		;hang up since can't make a new job
	ENDIF.
	JE TTMCM,(T2),R		;not a micom line, let user ^M for job
	SKIPN MCMRUN		;micom server running yet?
	JRST TTHU2		;don't let the user wait around then
	RET			;yes,  let user ^M for job
   >;CC
CS,<  	JE TTAUT,(T2),R	
	RETSKP >
;CM324 *** End ***
>
;TTCON1 - CREATE JOB AS RESULT OF CARRIER COMING ON

***** CHANGE #97; PAGE 125, LINE 42; PAGE 130, LINE 77
	MOVE B,C		;RESTORE LINE NUMBER
	MOVE A,FACTSW		;SEE IF REMOTE LOGINS ALLOWED
	TXNN A,SF%RMT		;...
	JRST [	HRROI A,[ASCIZ /
?LOGGING IN ON DATASETS IS CURRENTLY DISALLOWED.
/]
		CALL TTEMSS	;NO. SAY SO
		RET]		;DONE
	SETONE TTFSP,(B)	;SAY LINE NEEDS SPEED SET
 ---------------------------------
	MOVE B,C		;RESTORE LINE NUMBER
	MOVE A,FACTSW		;SEE IF REMOTE LOGINS ALLOWED
	TXNN A,SF%RMT		;...
	JRST [	HRROI A,[ASCIZ /
?LOGGING IN ON DATASETS IS CURRENTLY DISALLOWED.
/]
IFDEF  CMU,<	JRST TTNCON	;CS49 Use this message or pick a better one >
IFNDEF CMU,<	CALL TTEMSS	;NO. SAY SO
		RET		;DONE >
		]
	SETONE TTFSP,(B)	;SAY LINE NEEDS SPEED SET

***** CHANGE #98; PAGE 126, LINE 6; PAGE 131, LINE 6

;TTCH7...

;CARRIER WENT OFF

TTCX1:	JE TTCON,(B),TTCH7	;IF CARRIER WASN'T ALREADY ON, IGNORE IT
	SETZRO TTCON,(B)	;INDICATE CARRIER NO LONGER ON
	TDCALL S,<<FE,RSKP>,<DZ,DZCX2>,<TV,RSKP>>
	 JRST TTCH7		;NOTHING TO DO NOW
 ---------------------------------

;TTCH7...

;CARRIER WENT OFF

TTCX1:
IFDEF  CMU,<
CC,<	SETZRO TTNMC,(T2)>	;CM324 server allowed to set it again
>
	JE TTCON,(B),TTCH7	;IF CARRIER WASN'T ALREADY ON, IGNORE IT
	SETZRO TTCON,(B)	;INDICATE CARRIER NO LONGER ON
IFDEF  CMU,<	TDCALL S,<<FE,RSKP>,<CS,RSKP>,<DZ,DZCX2>,<TV,RSKP>> ;CS19 >
IFNDEF CMU,<	TDCALL S,<<FE,RSKP>,<DZ,DZCX2>,<TV,RSKP>,<CH,RSKP>> >
	 JRST TTCH7		;NOTHING TO DO NOW

***** CHANGE #99; PAGE 127, LINE 20; PAGE 132, LINE 20
;ISSUES A MONITOR-INTERNAL INTERRUPT THAT CAUSES THE TOP FORK
;TO GO TO JOBCOF IN MEXEC

;ALSO CALLED FOR A LINE ASSOCIATED WITH A PTY WHEN THE PTY IS CLOSED.

NTYCOF::CALL TTCOB1		;FLUSH OUTPUT
	CALL CHKCTT		;SEE IF THIS IS A CONTROLLING TERMINAL
	 CALLRET TTJBDT		;NO. DON'T ISSUE INTERRUPT
	MOVE B,C		;YES. B/ADDRESS OF DYNAMIC DATA
 ---------------------------------
;ISSUES A MONITOR-INTERNAL INTERRUPT THAT CAUSES THE TOP FORK
;TO GO TO JOBCOF IN MEXEC

;ALSO CALLED FOR A LINE ASSOCIATED WITH A PTY WHEN THE PTY IS CLOSED.

NTYCOF::CALL TTCOB1		;FLUSH OUTPUT
IFDEF  CMU,<
PUP,<NTYCF1::>			;CS36 ENTER FROM CLPNVT (OUT BFR ALREADY CLEAR)
>
	CALL CHKCTT		;SEE IF THIS IS A CONTROLLING TERMINAL
	 CALLRET TTJBDT		;NO. DON'T ISSUE INTERRUPT
IFDEF  CMU,<JN TTPDT,(C),R	;CS36 [151] no psi if user-invoked detach >
	MOVE B,C		;YES. B/ADDRESS OF DYNAMIC DATA

***** CHANGE #100; PAGE 128, LINE 46; PAGE 133, LINE 46

;RETURNS +1: ALWAYS

;SCHEDULED BY TTCOF WHEN A LINE HAS LOST CARRIER. CAUSES HANGUP OF THE
;LINE FOLLOWED BY ACTIVATE

TTHU0:	TDCALL S,<<FE,TTHU2>,<DZ,DZHU0>,<TV,TVTDTS>>
	RET
 ---------------------------------

;RETURNS +1: ALWAYS

;SCHEDULED BY TTCOF WHEN A LINE HAS LOST CARRIER. CAUSES HANGUP OF THE
;LINE FOLLOWED BY ACTIVATE

TTHU0:
IFDEF  CMU,<	TDCALL S,<<FE,TTHU2>,<DZ,DZHU0>,<TV,TVTDTS>> >
IFNDEF CMU,<	TDCALL S,<<FE,TTHU2>,<DZ,DZHU0>,<TV,TVTDTS>,<CH,NVTDTS>> >
	RET

***** CHANGE #101; PAGE 129, LINE 32; PAGE 134, LINE 32
	JRST TTCHD1

TTCHI:	CAIL 2,NLINES		;REASONABLE LINE?
	RET			;NO
	SAVEAC <T2,Q1,FX>
TTCHD1:	STKVAR <TTCHSV,TTCHFL>	;MUST COME AFTER SAVELN
	MOVEM T2,TTCHSV		;SAVE LINE NUMBER
 ---------------------------------
	JRST TTCHD1

TTCHI:	CAIL 2,NLINES		;REASONABLE LINE?
	RET			;NO
	SAVEAC <T2,Q1,FX>
TTCHD1:	STKVAR <TTCHSV,TTCHFL>	;MUST COME AFTER SAVELN
IFDEF  CMU,<
CC,<	SKIPN MCMDBG		;CM324 debugging the micom?
	IFSKP.			;CM324 yes
	  OPSTR <SKIPN>,TTMCM,(T2) ;CM324 a micom line?
	  ANSKP.		;CM324 procede if yes
	  OPSTR <SKIPN>,TTNMC,(T2) ;CM324 micom server set us yet?
	  RET			;CM324 no, ignore the char till we are ready
	ENDIF.			;CM324
   >;CC				;CM324
	MOVE CX,TODCLK		;CS46 Record the last time a character came in
	MOVEM CX,TTCMWN(T2)	;CS46
CC,<	AOS HSILIN(T2)>		;CM375 count of chars input
>
	MOVEM T2,TTCHSV		;SAVE LINE NUMBER

***** CHANGE #102; PAGE 130, LINE 22; PAGE 135, LINE 22
	CAIN 1,PGMOFC+1B28
	SKIPA			;YES
	RETSKP			;NO
TTXOFC:	JN TTRXF,(T2),R		;SEE IF ALREADY STOPPED
	SETONE TTRXF,(T2)	;YES. INDICATE CTRL/S TYPED
	TMNN <TTSAL,TTHPO>,(T2)	;SPECIAL OUTPUT GOING?
	IFNSK. <
	  TDCALL D,<<FE,TTCHI3>> ;NO, STOP THE LINE
	 >,<
	  TDCALL D,<<FE,TTXON1>>> ;YES, RESTART THE LINE
	RET
 ---------------------------------
	CAIN 1,PGMOFC+1B28
	SKIPA			;YES
	RETSKP			;NO
TTXOFC:	JN TTRXF,(T2),R		;SEE IF ALREADY STOPPED
	SETONE TTRXF,(T2)	;YES. INDICATE CTRL/S TYPED
	TMNN <TTSAL,TTHPO>,(T2)	;SPECIAL OUTPUT GOING?
IFDEF  CMU,<
	IFNSK. <
	  TDCAL1 D,FE,TTCHI3	;CS147 NO, STOP THE LINE
	 >,<
	  TDCAL1 D,FE,TTXON1> ;CS147 YES, RESTART THE LINE
>
IFNDEF CMU,<
	IFNSK. <
	  TDCALL D,<<FE,TTCHI3>> ;NO, STOP THE LINE
	 >,<
	  TDCALL D,<<FE,TTXON1>>> ;YES, RESTART THE LINE
>
	RET

***** CHANGE #103; PAGE 131, LINE 24; PAGE 136, LINE 24

TTXONA:	SETZRO TTSFG,(T2)	;CLEAR CTRL/S
TTXONC:	JE TTRXF,(T2),TTXON2	;JUMP IF HOST SIMULATED XOF ONLY
	TDCALL D,<<FE,TTXON1>,<MC,MCLNON>>
	SETZRO TTRXF,(T2)
TTXON2:	MOVE 3,TTOCT(2)		;GET COUNT OF CHARACTERS IN OUTPUT BUFFER
	NOSKD1			;NOSKED FOR STRTOU CALL
 ---------------------------------

TTXONA:	SETZRO TTSFG,(T2)	;CLEAR CTRL/S
TTXONC:	JE TTRXF,(T2),TTXON2	;JUMP IF HOST SIMULATED XOF ONLY
	TDCALL D,<<FE,TTXON1>,<MC,MCLNON>>
	SETZRO TTRXF,(T2)
TTXON2:	MOVE 3,TTOCT(2)		;GET COUNT OF CHARACTERS IN OUTPUT BUFFER
;**;[3106]  Add 1 line after TTXON2:+0			DML	7-MAY-84
	CONSO PI,77000		;[3106] GO NOSKED ONLY AT PI LEVEL 7
	NOSKD1			;NOSKED FOR STRTOU CALL

***** CHANGE #104; PAGE 132, LINE 2; PAGE 137, LINE 2
	CAIN T3,TT.MCB		;[3002] AN MCB LINE?
	RET			;[3002] YES
	RETSKP			;[3002] NO


;HANDLE LINE IN NET USER STATE
 ---------------------------------
	CAIN T3,TT.MCB		;[3002] AN MCB LINE?
	RET			;[3002] YES
	RETSKP			;[3002] NO


IFDEF  CMU,<
;CS130 CTYMCB and TTNU1 removed to TTMCDV
   IFE .MCFLG,<			;CS130 TTNU1 doesn't live here anymore...
TTNU1:	RETSKP			;CS130
  >				;CS130
>
IFNDEF CMU,<
;HANDLE LINE IN NET USER STATE

***** CHANGE #105; PAGE 132, LINE 27; PAGE 137, LINE 34
	CAIE T3,-1		;[3021]
;**;[3002]  Replace 4 lines with 1 at TTNU1:+11		DML	24-AUG-83
	JRST TTCHIF		;[3002] KEEP CHAR IN INPUT STREAM
	CALL TNUCLS		;NO, CLOSE CONNECTION
  >				;END IFN .MCFLG
	RETSKP

 ---------------------------------
	CAIE T3,-1		;[3021]
;**;[3002]  Replace 4 lines with 1 at TTNU1:+11		DML	24-AUG-83
	JRST TTCHIF		;[3002] KEEP CHAR IN INPUT STREAM
	CALL TNUCLS		;NO, CLOSE CONNECTION
  >				;END IFN .MCFLG
	RETSKP
>


***** CHANGE #106; PAGE 141, LINE 56; PAGE 146, LINE 56
		JRST TTC7SK	;YES, GO LOGIN
		HRROI 1,[ASCIZ/
?LOGGING IN ON THE CTY IS CURRENTLY DISALLOWED.
/]
		CALLRET TTEMSS] ;NO LOGIN ALLOWED ON CTY
;**;[2889] Change 1 line at TTC7SJ:+7		DML	21-DEC-82
	TDCALL S,<<FE,RSKP>,<PT,TTC7S2>,<TV,TTC7SN>,<DZ,RSKP>,<MC,TTC7MC>>
				;[2889] DO DEVICE DEPENDENT ROUTINE
 ---------------------------------
		JRST TTC7SK	;YES, GO LOGIN
		HRROI 1,[ASCIZ/
?LOGGING IN ON THE CTY IS CURRENTLY DISALLOWED.
/]
		CALLRET TTEMSS] ;NO LOGIN ALLOWED ON CTY
;**;[2889] Change 1 line at TTC7SJ:+7		DML	21-DEC-82
IFDEF  CMU,<
	TDCALL S,<<FE,RSKP>,<PT,TTC7S2>,<CS,CSNEWC>,<PN,TTCPNL>,<DZ,RSKP>,<MC,TTC7MC>,<TV,TTC7SN>> ;CS19
>
IFNDEF CMU,<
	TDCALL S,<<FE,RSKP>,<PT,TTC7S2>,<TV,TTC7SN>,<DZ,RSKP>,<MC,TTC7MC>,<CH,TTC7SN>>
>
				;[2889] DO DEVICE DEPENDENT ROUTINE

***** CHANGE #107; PAGE 141, LINE 70; PAGE 146, LINE 75
TTC7S1:	JN TTFEM,(T2),TTCHS3	;IF REMOTE, GO CHECK REMOTE LOGINS
	TXNE T1,SF%LCL		;LOCAL LOGINS ALLOWED?
	JRST TTC7SK		;YES. GO CREATE JOB
	HRROI 1,[ASCIZ/
?LOGGING IN ON LOCAL TERMINALS IS CURRENTLY DISALLOWED.
/]
	CALLRET TTEMSS		;LOCAL LOGINS NOT ALLOWED. SEND MESSAGE

 ---------------------------------
TTC7S1:	JN TTFEM,(T2),TTCHS3	;IF REMOTE, GO CHECK REMOTE LOGINS
	TXNE T1,SF%LCL		;LOCAL LOGINS ALLOWED?
	JRST TTC7SK		;YES. GO CREATE JOB
	HRROI 1,[ASCIZ/
?LOGGING IN ON LOCAL TERMINALS IS CURRENTLY DISALLOWED.
/]
IFDEF  CMU,<	CALLRET TTNCON	;CS49 LOCAL LOGINS NOT ALLOWED. SEND MESSAGE >
IFNDEF CMU,<	CALLRET TTEMSS	;LOCAL LOGINS NOT ALLOWED. SEND MESSAGE >


***** CHANGE #108; PAGE 141, LINE 81; PAGE 146, LINE 87

TTC7MC:	TXNE T1,SF%MCB		;[2889] DECNET LOGINS ALLOWED?
	JRST RTRUE		;[2889] YES, GO CREATE JOB
	HRROI T1,[ASCIZ\
?LOGGING IN ON DECNET TERMINALS IS CURRENTLY DISALLOWED.
\]				;[2889]
	CALL TTEMSS		;[2889] PRINT MESSAGE
	JRST RFALSE		;[2889] DISALLOW LOGIN
 ---------------------------------

TTC7MC:	TXNE T1,SF%MCB		;[2889] DECNET LOGINS ALLOWED?
	JRST RTRUE		;[2889] YES, GO CREATE JOB
	HRROI T1,[ASCIZ\
?LOGGING IN ON DECNET TERMINALS IS CURRENTLY DISALLOWED.
\]				;[2889]
IFDEF  CMU,<	CALL TTNCON		;[2889];CS49 PRINT MESSAGE >
IFNDEF CMU,<	CALL TTEMSS		;[2889] PRINT MESSAGE >
	JRST RFALSE		;[2889] DISALLOW LOGIN

***** CHANGE #109; PAGE 141, LINE 93; PAGE 146, LINE 100
TTCHS3:	TXNE 1,SF%RMT		;...
	JRST TTC7SK		;YES. GO CREATE JOB
	SETONE TTFSP,(T2)
	HRROI 1,[ASCIZ/
?LOGGING IN ON DATASETS IS CURRENTLY DISALLOWED.
/]
	CALLRET TTEMSS		;REMOTE LOGINS NOT ALLOWED, SEND MESSAGE

 ---------------------------------
TTCHS3:	TXNE 1,SF%RMT		;...
	JRST TTC7SK		;YES. GO CREATE JOB
	SETONE TTFSP,(T2)
	HRROI 1,[ASCIZ/
?LOGGING IN ON DATASETS IS CURRENTLY DISALLOWED.
/]
IFDEF  CMU,<	CALLRET TTNCON	;CS49 REMOTE LOGINS NOT ALLOWED, SEND MESSAGE >
IFNDEF CMU,<	CALLRET TTEMSS	;REMOTE LOGINS NOT ALLOWED, SEND MESSAGE >


***** CHANGE #110; PAGE 142, LINE 32; PAGE 147, LINE 32
	CAIE T1,.CHLFD		;IS THIS A LF ON A PTY?
	RETSKP			;NO, NO WAKEUP
	LOAD T3,TLTYP,(T2)
	CAIN T3,TT.PTY		;PTY?
	RET			;YES, WAKEUP
	RETSKP			;PROCESS SHOULD NOT BE AWAKENED
 ---------------------------------
	CAIE T1,.CHLFD		;IS THIS A LF ON A PTY?
	RETSKP			;NO, NO WAKEUP
	LOAD T3,TLTYP,(T2)
	CAIN T3,TT.PTY		;PTY?
	RET			;YES, WAKEUP
	RETSKP			;PROCESS SHOULD NOT BE AWAKENED

IFDEF  CMU,<
;*** CS49 Begin, entire page ***
	SUBTTL TTNCON - logging in is disallowed, say why

;Logging in on this line is not allowed, see if we can give more information
; e.g. disk is sick, boot in progress, system shuting down
;	T1/ -1,,address of message ?logging in on tty x is disallowed
;	T2/Internal line number
;	CALL TTNCON
;	Return+1:Always, T1=0 (e.g. JRST RFALSE)
TTNCON:	MOVE T3,FACTSW		;see if something else makes more sense
	SETCM T4,FACTSW		;complement for TXNE checks
	TXNE T4,SF%RMT!SF%LCL!SF%NVT
	 HRROI T1,[ASCIZ /
?All Logins are disallowed.
/]
	SKIPN STARTF		;boot in progress?
	IFSKP.
	  HRROI T1,[ASCIZ /
?Automatic system boot in progress.
/]
	  TXNE T3,SF%MST
	   HRROI T1,[ASCIZ /
?Manual system boot in progress.
/]
	ENDIF.
	TXNE T3,SF%CDE
	 HRROI 1,[ASCIZ /
?System not in operation - file structure needs repair.
/]
	TXNN T3,SF%CDR		;checkd running?
	IFSKP.			;yes
	  HRROI T1,[ASCIZ /
?Disk consistency check in progress.
/]
	  TXNE T3,SF%BTE
	  HRROI T1,[ASCIZ /
?System bit table damaged - automatic rebuild in progress.
/]
	ENDIF.
	CALL TTEMESS		;finaly print the best guess answer
	JRST RFALSE
;*** CS49 End ***
>

***** CHANGE #111; PAGE 145, LINE 17; PAGE 151, LINE 17

;RETURNS +1: ALWAYS

BIGSTO::MOVEI 3,TTBSIZ		;GET SIZE OF TTBBUF
	CAMLE 3,TTBIGC		;HAS TTBBUF OVERFLOWED?
	IFSKP.
	  BUG(TTYBBO)		;YES, LOSE CHARACTER
	  RET
 ---------------------------------

;RETURNS +1: ALWAYS

BIGSTO::MOVEI 3,TTBSIZ		;GET SIZE OF TTBBUF
	CAMLE 3,TTBIGC		;HAS TTBBUF OVERFLOWED?
	IFSKP.
IFDEF  CMU,<	  BUG(TTYBBO)		;YES, LOSE CHARACTER >
IFNDEF CMU,<	  BUG.(CHK,TTYBBO,TTYSRV,HARD,<TTYSRV-BIG BUFFER OVERFLOW>,,<

Cause:	The buffer for incoming TTY characters was full.  (The character
	was discarded and the line XOFFed.)

Action:

>) >
	  RET

***** CHANGE #112; PAGE 145, LINE 43; PAGE 151, LINE 51
	CAIN T1,PGMOFC		;CHECK FOR XOFF
	CALL TTYSTC		;YES CHECK ON WHAT TO DO
TTICNT::TRO T1,DLSRCF		;INDICATE RECEIVED CHARACTER
	HRL T1,T2		;COMBINE LINE NUMBER WITH CHAR
	CALLRET BIGSTO		;PUT IN BUG BUFFER

TTYSTC:	SAVEAC <T1,T2>
	CALL STADYN		;GET DYN ADDRESS
	 RET			;INACTIVE
	JE TT%PGM,TTFLGS(T2),R	;IF NO XOFF, GO AWAY
	CALLRET TTXOFC		;DO XOFF ON COMMAND
 ---------------------------------
	CAIN T1,PGMOFC		;CHECK FOR XOFF
	CALL TTYSTC		;YES CHECK ON WHAT TO DO
TTICNT::TRO T1,DLSRCF		;INDICATE RECEIVED CHARACTER
	HRL T1,T2		;COMBINE LINE NUMBER WITH CHAR
	CALLRET BIGSTO		;PUT IN BUG BUFFER

TTYSTC:
IFDEF  CMU,<
IPTT,<	CALL TIPCHK		;CS99 IP link?
	 RET>			;CS99 Yes, never XOFF
CSFE,<	CALL CSFECK		;CS19 CS FE link?
	 RET>			;CS19 Yes, never XOFF
>
	SAVEAC <T1,T2>
	CALL STADYN		;GET DYN ADDRESS
	 RET			;INACTIVE
	JE TT%PGM,TTFLGS(T2),R	;IF NO XOFF, GO AWAY
IFDEF  CMU,<	JN TTRXF,(T2),R		;CM236 See if already stopped >
	CALLRET TTXOFC		;DO XOFF ON COMMAND

***** CHANGE #113; PAGE 146, LINE 47; PAGE 152, LINE 47
;	CALL STRTOU
;	MUST BE NOSKD1!

;RETURNS +1: ALWAYS OKSKD1

STRTOU:	JN TTOTP,(T2),STRT11	;IF ACTIVE, NO NEED TO START IT
	TDCALL D,<<PT,STRTO2>,<TV,TVTCSO>>
	 SKIPA			;NORMAL START
 ---------------------------------
;	CALL STRTOU
;	MUST BE NOSKD1!

;RETURNS +1: ALWAYS OKSKD1

STRTOU:	JN TTOTP,(T2),STRT11	;IF ACTIVE, NO NEED TO START IT
IFDEF  CMU,<TDCALL D,<<PT,STRTO2>,<CS,RSKP>,<PN,PNVSTO>,<TV,TVTCSO>> ;CS19 >
IFNDEF CMU,<TDCALL D,<<PT,STRTO2>,<TV,TVTCSO>,<CH,CHTCSO>> >
	 SKIPA			;NORMAL START

***** CHANGE #114; PAGE 146, LINE 56; PAGE 152, LINE 57
	JRST STRT11		;NOTHING ELSE TO DO
	SAVELN
	DYNST			;GET LINE NUMBER
	IDIVI T2,^D36		;COMPUTE BIT POSITION IN QUEUE
	MOVE T3,BITS(T3)
	IORM T3,TTSOQ(T2)	;REQUEST START NEXT BIGBUF CYCLE
STRT11:	OKSKD1			;ALLOW SHCEDULING NOW
	RET
 ---------------------------------
	JRST STRT11		;NOTHING ELSE TO DO
	SAVELN
	DYNST			;GET LINE NUMBER
	IDIVI T2,^D36		;COMPUTE BIT POSITION IN QUEUE
	MOVE T3,BITS(T3)
	IORM T3,TTSOQ(T2)	;REQUEST START NEXT BIGBUF CYCLE
;**;[3106]  Replace 1 line at STRT11:			DML	7-MAY-84
STRT11:	CONSO PI,77000		;[3106] GO OKSKED ONLY AT PI LEVEL 7
	OKSKD1			;ALLOW SHCEDULING NOW
	RET

***** CHANGE #115; PAGE 149, LINE 13; PAGE 155, LINE 13
GTOCHR:	SOSGE TTOCT(2)		;ARE THERE CHARACTERS IN OUTPUT BUFFER?
	JRST [	SETZRO TTOTP,(T2) ;NO CHARACTERS. CLEAR OUTPUT-ACTIVE
		SETZM TTOCT(T2)	;ZERO COUNTER
		CALLRET CLENUP] ; AND GO RELEASE BUFFERS
	CALL CHKWRN		;SEE IF FORK WAKEUP NEEDED
	SKIPN 3,TTOOUT(2)	;GET BUFFER POINTER
	BUG(TTONOB)
	TDNE 3,WRPMSK		;AT END OF BUFFER?
 ---------------------------------
GTOCHR:	SOSGE TTOCT(2)		;ARE THERE CHARACTERS IN OUTPUT BUFFER?
	JRST [	SETZRO TTOTP,(T2) ;NO CHARACTERS. CLEAR OUTPUT-ACTIVE
		SETZM TTOCT(T2)	;ZERO COUNTER
		CALLRET CLENUP] ; AND GO RELEASE BUFFERS
	CALL CHKWRN		;SEE IF FORK WAKEUP NEEDED
	SKIPN 3,TTOOUT(2)	;GET BUFFER POINTER
IFDEF  CMU,<	BUG(TTONOB) >
IFNDEF CMU,<	BUG.(HLT,TTONOB,TTYSRV,SOFT,<TTY OUTPUT - NO BUFFER BUT COUNT NON-0>,,<

Cause:	At TTSND7 (send a character to a line) the pointer to the
	line's data base was 0.  This is either a coding error or the resident
	table containing the pointers was clobbered.

Action:	Look at the dump.  The stack should indicate which routine
	made the call without a pointer.

>) >
	TDNE 3,WRPMSK		;AT END OF BUFFER?

***** CHANGE #116; PAGE 150, LINE 20; PAGE 156, LINE 20
	CAIE T1,TTOPFC		;PAGE FULL FUNCTION?
	IFSKP. <
	  SETONE TTSFG,(T2)	;YES. SIMULATE CTRL/S
	  JRST TTSND6>		; AND GO CLEAR OUTPUT ACTIVE
	PUSH P,T2		;SAVE ADDRESS OF DYNAMIC DATA
	DYNST			;GET LINE NUMBER TO PRINT
	BUG(TTILEC,<<2,D>,<3,D>>)
	POP P,T2		;RESTORE ADDRESS OF DYNAMIC DATA
 ---------------------------------
	CAIE T1,TTOPFC		;PAGE FULL FUNCTION?
	IFSKP. <
	  SETONE TTSFG,(T2)	;YES. SIMULATE CTRL/S
	  JRST TTSND6>		; AND GO CLEAR OUTPUT ACTIVE
	PUSH P,T2		;SAVE ADDRESS OF DYNAMIC DATA
	DYNST			;GET LINE NUMBER TO PRINT
IFDEF  CMU,<	BUG(TTILEC,<<2,D>,<3,D>>) >
IFNDEF CMU,<	BUG.(CHK,TTILEC,TTYSRV,HARD,<TTSND-UNRECOGNIZED ESCAPE CODE>,
<<2,D>,<3,D>>,<

Cause:	This BUG is not documented yet.

Action:

>) >
	POP P,T2		;RESTORE ADDRESS OF DYNAMIC DATA

***** CHANGE #117; PAGE 152, LINE 24; PAGE 158, LINE 24
	CAME C,A		;NEW TYPE?
	JRST TTDAL7		;YES. GO INCREMENT THE LINE TYPE

;TRANSFER ACCORDING TO THE VECTOR IN A. CERTAIN TYPES ARE NEVER
;PROCESSED.

TTDAL8:	TDCALX C,<<FE,RSKP>,<TV,RSKP>> ;SKIP IF DETACH SHOULD BE DONE
	 JRST TTDAL7		;DON'T DO IT
 ---------------------------------
	CAME C,A		;NEW TYPE?
	JRST TTDAL7		;YES. GO INCREMENT THE LINE TYPE

;TRANSFER ACCORDING TO THE VECTOR IN A. CERTAIN TYPES ARE NEVER
;PROCESSED.

TTDAL8:
IFDEF  CMU,<TDCALX C,<<FE,RSKP>,<CS,RSKP>,<PN,RSKP>,<TV,RSKP>> ;CS19  >
IFNDEF CMU,<TDCALX C,<<FE,RSKP>,<TV,RSKP>,<CH,RSKP>> >
				;SKIP IF DETACH SHOULD BE DONE
	 JRST TTDAL7		;DON'T DO IT

***** CHANGE #118; PAGE 153, LINE 15; PAGE 159, LINE 15
TTLIL2:	TDCALX Q1,<<FE,FEDABL>>,<RET>
	AOBJN Q1,TTLIL2
	RET

	RESCD

TTBUGH:	BUG(BADTTY)
	RET
 ---------------------------------
TTLIL2:	TDCALX Q1,<<FE,FEDABL>>,<RET>
	AOBJN Q1,TTLIL2
	RET

	RESCD

TTBUGH:
IFDEF  CMU,<BUG(BADTTY) >
IFNDEF CMU,<BUG.(HLT,BADTTY,TTYSRV,SOFT,<TRANSFER TO NONEXISTENT TTY CODE>,,<

Cause:	The transfer vector for a non-existent TTY line type was
	referenced.

Action:	Look at the dump.  The stack should indicate which routine caused
	the reference.

>) >
	RET

***** CHANGE #119; PAGE 156, LINE 6; PAGE 162, LINE 6
;LINE IS A PTY. SEE IF PTY LOGINS ARE ALLOWED

TTC7S2:	TXNE T1,SF%PTY		;SEE IF PTY LOGINS ALLOWED
	JRST RTRUE		;YES, GO LOGIN IN
	HRROI 1,[ASCIZ/
?LOGGING IN OVER PTY'S IS CURRENTLY DISALLOWED.
/]
	CALL TTEMSS
	JRST RFALSE		;FAIL

 ---------------------------------
;LINE IS A PTY. SEE IF PTY LOGINS ARE ALLOWED

TTC7S2:	TXNE T1,SF%PTY		;SEE IF PTY LOGINS ALLOWED
	JRST RTRUE		;YES, GO LOGIN IN
	HRROI 1,[ASCIZ/
?LOGGING IN OVER PTYS IS CURRENTLY DISALLOWED.
/]
IFDEF  CMU,<	JRST TTNCON		;CS49	>
IFNDEF CMU,<	CALL TTEMSS
		JRST RFALSE		;FAIL >


***** CHANGE #120; PAGE 156, LINE 24; PAGE 162, LINE 25
	CALL TTYPTY		;CONVERT TO PTY NUMBER IN T1
	CALL PTYFIN		;NOTE PTY INPUT EVENT
	POP P,T2		;RESTORE ADDRESS OF DYNAMIC DATA
	RET

  >				;END IFN .PTFLG SEVERAL PAGES BACK
 ---------------------------------
	CALL TTYPTY		;CONVERT TO PTY NUMBER IN T1
	CALL PTYFIN		;NOTE PTY INPUT EVENT
	POP P,T2		;RESTORE ADDRESS OF DYNAMIC DATA
	RET

  >				;END IFN .PTFLG SEVERAL PAGES BACK
IFDEF  CMU,<
;CM**** Everything beyond this point is CMU changes ****

;*** CM328 entire page ***

;Routine called from SCHED to check whether a line should be considered
;interactive for scheduling purposes (ie, whether a process waiting on
;the line should be pushed up to queue 1 when it becomes runnable after
;being in TI wait for the line).
;
;Takes:
;	T2/	line number
;Returns:
;	+1	no
;	+2	yes
;Clobbers:
;	nothing
;
	RESCD			;Called from scheduler

CKITTY::
	OPSTR <SKIPN>,TTINT,(T2) ;Check interactive bit
	RET			;Off
	RETSKP			;On

	SWAPCD

;Routines to set/clear the interactive bit
;
;Takes:
;	T2/	line number
;Returns:
;	+1	always
;Clobbers:
;	no AC's

SEITTY::
	SETONE TTINT,(T2)	;Set the bit
	RET
CLITTY::
	SETZRO TTINT,(T2)	;Clear it
	RET

;*** CM328 end addition ***

;Routine to determine whether a terminal is a CS front end line
; and the user escaped back to the front end.  Here so that MEXEC
; doesn't have to know whether or not this system has CSFE terminals.
;
;Takes:
;	T1/	terminal designator
;Returns:
;	+1	terminal is escaped back to the front end
;	+2	terminal is not escaped back or is not a CSFE
;		terminal
;Clobbers:
;	T2

CSESCB::			;CS19
CSFE,<	MOVX T2,.MORCS		;CS19 Get cs-fe information
	MTOPR%			;CS19
	 ERJMP R		;CS19 Assume escaped back if failure
	TXNE T3,MO%RCD		;CS19 Escaped back?
	 RET			;CS19 Yes
>				;CS19
	RETSKP			;CS19 No or no CS FE on this system

;Dummy routines so that random monitor modules don't have to know whether
; this system has CSFE terminal support

NOCSFE,<

SETCSF::
SMONCS::ITERR(SMONX2)		;
TTRCSP::SETZ T1,		;.MORCS - return 0 always
	RET
TTSCSP::ITERR(MTOX1)		;.MOSCS - return invalid MTOPR%

>
	SWAPCD

;CS46 TTCMWN getab
TTCMGT::
	MOVE T1,TTCMWN(T2)	;CS46 get table entry
	RET			;CS46 done

;CS47 *** Begin ***
; Return backspace-means-delete seting
; T2 - Internal line number
; Returns+1: Failure, error code in T1
; Returns+2: Success, T1 - Backspace means delete flag
TTGTBD::CALL LCKTTY		;point to dynamic data
	 RETBAD(TTYX01,<CALL ULKTTY>) ;must have regular block
	LOAD T1,TTBMD,(T2)	;Return backspace means delete seting
	CALL ULKTTY
	RETSKP

; Set backspace-means-delete setting
;Accepts:
; T2 - Internal line number to set
; T3 - Value 0 - dissalow, 1 - allow
; Returns+1: Success
; Returns+2: Failure (Tty not active)

TTSTBD::CALL LCKTTY		;Lock down the dynamic data
	 RETBAD(TTYX01,<CALL ULKTTY>) ;Must have regular block
	STOR T3,TTBMD,(T2)	;Set the value
	CALL ULKTTY		;Done
	RETSKP			;Succeed
;*** CS47 END ***

	RESCD			;CS19
>

